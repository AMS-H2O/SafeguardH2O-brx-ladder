// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database w/Flags;
// System Configuration; Memory Configuration/Devices with Built-In Types and User Add-Ons;
// use Element names (no NickNames); rung/address annotations;
// <TAB> parameter delimiter; 
// Write/overwrite file C:\Users\marcp\OneDrive\Documents\[02]Work\[01]AMS\[05]SafeguardH2O\SetupDmD_v2_9_4\SafeguardH2O-brx-ladder\Program_EXPORT_DMD.txt

PLC BX-DM1E-M-D

// Do not modify SYS_CONFIG block!

#BEGIN SYS_CONFIG
0c968e2f5f66948e5814f1170ee4214da32cf1f82f5ccaf2f614f914abaccc64c1283fb8349d3689
7d052df2df9f013f9bb39629b94e13fc237b8f85b31b4b01292a19f59819656b9ed6202dd3ec6ca5
b841d3174d8a3294ca6f94e7b3e7c6e837a16d637401b7fc7bed3090b0a7cc361a6c8767ac686e6b
1f149c555363f43ebb82f5fd01fa8651120a3efc0d351de80175832f0d989d27860b1c677140c8ed
7a3c975e1fd4a6a68e71e6d1e039c61464526279e6d833a2136b43bf0b48023da282fa520121b53c
9f0933cb2dcfbc40772610b147047778fbe6872a2b95edf9e3dc2df327c7c9d98e17e505fe86fc00
b00cea1b473a514d86c1d8c12a8d89db923454762627c8cf62ccda267edf2b8e6c0b894cd2993cd7
95b7d833bf4562f769bf4aabed56d7266ed1979a9b3d71249b4e2ed07d986f2bc23161aa94f7adbc
d4e5e7af34ad86bc7cb5f8d8e8ef5c8adf451e472207846e4d0d8a35d433cf7dcb28c3e8da890aee
0cf0e9faf2dbe6c7e8fc299fa9d21cd32d5ae7ca588d598e56c7c4905a526b41288a495d2a7c7690
266477daf686ae4c74ee4f289715d88edf0e20168d94f33ad6b03e6690ff6ccdf825ab3205cc4b20
e308c224ce97d23d13e2865097bbbe13d648313e1fc414317fa4e1f146ee91df98b9205df9c3b93d
a9bfb5a96b778d53e3541cc7ab2087712631c9ca56ed02d0738c47be462e938a416eb84ba7902a27
7dfc83b7db9c8de253781dc165d175f5da45455e194563969fa0f8f03b244ce8cf8d20633408efc6
7bb8f2cfa20672a149d8497acd58c0057f7bceb9f4661c4fba7adb561e46810d2b72458c249bc98f
113f03c270bdf524b18542383b7064e6548982ac827f76bf7ea5e1ecbf496b5a3e401e7cafedb0cb
09e5e8d8c19df0da2071021cd59e0dbbb487ae6ca45b0143b89c78efcad1ef633d039064280c439b
422fdb8a7f9056d19be5024b7dddf615cc1b04fde74a8b89dbc50f0e4a78cf68e5b5070ffc72348b
da9d10da8fe010ce9e5524f0775e170808b1d380d1badeca6cf97db40fbdaf9bd69470d9e6a6829c
7985b5b37b5574ad25f3a733acf7b8d7507efbb8119a5e2ac25320ab0c6b4fba4d59e27bff38c364
6b8599e7f4389ee5f5c75352f8711101446d605a78453e23cfc5dbedd9251fbec9298d0706330064
9237e9f36996a11ab49a86bca5339acf2d37bcbc42dd4f3cc18391bbd285e97b71cb3fbef4266d53
19a18775f1fbb033ac772882bac5afb02500235c8e4973821c19be609e390e48e1874b9a4ea4571b
e75d7749f54fd83d348b9b3d0765d7c67ccbf6e19d708e1556049f712d0d0d67705909340b0e7c87
aef9d48a47b611129f2df05c34dbc2118d6c6fd856a114bc8e98594a7c3fd033ac5d3de80cf21721
3c954f5f4e0079761f287a439d68bcc8dc3ca313934bd94a8c406b6d9fef986e6972cfa793aa72a3
368a877e0aa63025b243f37fa3d210544f246e92188f5d774b985ddb3860d0aa987a1e56ad5b741b
843a78ba2fb9bc63ad6126f2e01df39b2cbc51623582abd447373de6c6ba336489d5072f1917a1ad
ff239b23342f701dc4839683936cdbed43ce0a4a6d69372459806884002a356adf3f85e4155fac7a
6b832f7ef5346ab51088a1d8fb51ba32271edc5d826e3d8bea71a9c4dc50d5f0e8064fbcfbb2f4b8
99f4082bc6e334dc3b6403f25c7fe1d9f3f2aa9dc30eab2ce2ba2db64cf1a786965565964f3f335f
1f02330367daaf8ff1de4841e560f2f654926511401133ca6839da715c6e0831273b3be4923a9a17
549928c6a5257bbc990388a755bb35ba263c82cbd0b5152300cd29e26875c22ca8abca5e2520bb67
2bca4fd7daceaf23f9b685aacc70c82b1eaf0b205e8143f659feb127c54c9619e4a3d2fccc0855bf
0fca29d54dc414c85a56be3757311491ce763501642b7fcc5b58f8c6b44fcf05cd12ed927437cf33
fcdc831ae0d1d01444580ac725e6ca1c7afa74ad698741d74e70bcc92a6d3e0dacde2ea9dd2b6ded
359cb60496ca408c6281a9006f5cc6122fb3f31c887a8dfbf3f8355dda2d4a11c54f5c67e135c869
fffd95d447c1dc2b9a5470ff68260ef84dcb25c1847a1c085e77926ae94f60f1ce5ad74bd7863709
85dc992a8bf7714cdbd28ebdd8c83f0d849a50dad731d9ae5d08a2ded85448576070eb181f7d9014
81a5a2fd4255a350f4887f53d6749d6bd4a22d5181012bd4bfd107777d6518000d614518ff5d94ff
83a8f802400246576904669f5bc8ac75c3da87728a4c677e65054c3a26f3ddf15bd235f7c56cce70
ab84f5f1fa0682e02105d36b838bcaf4fa3ba30621264ad75453f328f2de3b0967f467789b68477a
9135a7da0e2476a29c022f6c9b3a4b0e6b925b99cfd2e8a2661a00679a4ca913ecd40bfb4078493c
11b89881e1e29828695a7e5e09e916ee936b044b151eb2ae5a5d192742619339adbd334b2362fd10
6df3f5838b7fb418eb0b94213b6a0a76659cb92f864f77f7bc15f056687066f84237804068157e75
a65c189a19568a4505e4f62fad9f4343c76f8e1b05446e085591a5b96f462b0017eab9c92dcaff44
d22bd7a5a265cc05bf02215366a61d2bfc5cbce61d9c7e0c0ed6069fb162a9a2980977154f09af4f
de87bff972e84c14f1df87aeca387acff472d0bfdfcbfde10f483ffed7ba76b76c1866be3721d484
f8d75c6095b3ee2c32a26ccd315f64486bd5902f4b6a5a843bf94221bd65024be349b4694eefbf76
8aefc476a0d8e38b2949ebb06b5dd186af7e39e7b608da955f6f37b2159c1d3bb19937e9fa3ce1c5
129f1040ebf46d64f5d75c7923f2499199758ad7dfe4001a14fc5104e879df485cf5bd82d2cb3018
b23683ffae3585654df772211a68a2411a0b19c5d9be2a6dd937d64dbfac1a7f3a879876e6e10bb6
9531a8760527e5e41624927497ae5ada2686081bb38f9235d6b3eb45453cd0d330a77ad85ccfd8e4
06148356b1b12cff2e128161b63bef79e78dd5c0db84b163015f1cae2b381d14c0c2af777bdaefc2
8756abe8aa01f40a7663742cccd37a98ebc81c7479078047799a259b18f5d78d53c55b16fcd6aeb9
cd28c5f6521b27ad166d99d4fc6a1600e7fd01e40482b153e84df16d2435b56f4c6591175925999f
4d475b6fa7802348bdde7674b8689da8c93b23eb589f3ddbeb7d18f9a2c85a12f508d21b648eb262
8cc0d5367bdc5ee0d36ac917831a6f5065032331be6a8513f8e34d00b993cdd474c96bbb882b09a5
6a76b8ee12fef4120e40fbd684a5a9e69a2660b65824566eff6aa6704930fa9116d4df76aff1afa5
4240580de9e505802d4b551cce541b730b0859d13884f6c9d6fc2020a6de56bd4d938b71786144d8
cd23d21ee6871b7b93f47cdebefefb07718af7d0eb52c00568605b719bde5c6ade841dd1efc5d96d
b33c0f01641ef26a08845ed106bd06f7ccdd5cacda1f62457ec75491d27e374180d9eff21534c032
cb8f87c2632f257bae4b8dff05c767491543045788e8425d558218b9fecd15a80077e74fc4eac4b9
2d2d690b3571f0be9ee7e8dd733ebd3699110725ebc698ae00a81c4ccb8dd9bc42341a7763e16319
34f0d7aa7e6d192d581c4d9b0f2ce3022a2b9bcc1f232e47a14695647f525fcd60a7787b62e5c0f6
6cee70fd1be70ac5240ce11125c74e752bc05dfe4b396c53cd470929506356e42fed8969b3e32601
7cb021b38bfebaeb32ce31ebf82005b072e93dbbef977136249046c975d984cac8cb7f35b2c39adf
d693327e7749596874da08a2d75fd56588dbfc9d372820f4ce073d61dc14044aa9201b45aa975887
98a38ea4a641d4142ecb4182154900de89a0c705f62c853e167780c48c14839e615f3168bde34a2d
f26f0276a8cb617ea6f120eac7994fe7a1d668c4591523939ec41b3a82adf46e94312a77e0bcbd36
99b701def49ba5b29b766db9788bcb49c8d52a146ce52b000f6dd2b9d366e9425eaadc9044c65ae7
c46f2ece1201b7c8e28db3042c91badb2c286765da47c727dbc7ce2de2cc90c67b5842f6abe2d0c6
44bb234bca63e5c252fa7169e71b8c8cc8aa97939280a8fd9edba62c7a984f516b1077b546dc769d
875392612f2d1a12ec398f99abc571030e12f77352db6ec3599a5f48cf15063ac2027c396f3a1067
2498f14b103e0ee9734e8ae8f2a25e384a7dbb04f347c2fa43c0e0adb7dac9ab4b72672f75fc851d
b2f3de56132a01083c0d2294533f4dc5957fcf9cec8f54dbf63d524393ee14c51f5f170a1b18cce4
a9b0da17f18169ce6a611f5f5aa610ef3b023980121742bdfb73f82608d9de04db427a3e48503163
e4c4adfd0eb50e6255d9191bb8f21e6f208ba1bedc335832b4519321d92f844aed901c8d5f676e55
61ad514848eba12d598c7d05ef8cbb951c6349bbcb4fdc0aad4b663a8c2fb3ebd8e68b036d5bfcf7
3adddc9e8b543e0927a3dc249588c1ffa8992f1458e571c19af45f9112e52590eed89e6d018e4e4f
3da99ca7775282d8193f88cfeadc40a7ee0055e9a9691d21696ebec0597b4f8f4e06e67bfb1e26da
517841936fd66613c30065349c265ec2734320ae0810f6c1593205bc94414d0363be116ccee576ee
c9aeb8d0c9797568f1a2d002c2d400b1e2fa850edbed344ba2297cab480801f050460c30ccc54745
26714a4ada85d94dfaccafb8d870b631d62fc58ead0ac0e568f964d50b25b2bfbb9424b493e0d3c3
e33ee7e2b0717261079ca98198c7d1ef5f4297c013327deea4383b804fd474edb430625a7aaec183
ef15369ec4300c7f249857cc6c19926b55aa59c23decdcc5b4a7d8bc0def289528fa98a5f7385265
55416c81b9a0319e22fc39413bd8a80e076ca1b61cdc9103abe58c2ea427b8fda96e597b6690a5bb
95bd34e2fc0c0b615cdab2c4405b2cab23d3eb5ca0737ecde79efe2af7418990e1f28d99ce179873
7ce2838c4b31d2b3a92d7f9d75b3deb03a0d8bb49528e77cdc47581bf1c512cb072d4271b32e59d7
ef4f1e742082dd40331750553cc1217c5f419186dc04d027b410e06197b726e6df9ea161aa27b9de
f162a0e69b81bdd005f01fa9341ebc80e553ef4f17348bf767bbc00b5bde0468374d47cbe4c3ab6f
f4f698abb24b6b4937c801bcaadb73f15a68b6a5c5c024f4a193529568fb7a353c7513e08d8b22dd
1b0a315ec8af49e87d8fef2876bb22797f24ebff62e91bb451cafa37dc72bb5077e4e541a6e4319e
d7250e9d028329933945e1cec45ad14fb65de24634045952db3e4b24cc4891a518b71f2eddbe3bc4
dfd5af6d80452ffaa0010abf20c6e503653e9e01a02efe27c7d726695e577201ce58e99ad9931d39
ed27ccc65b06334bcb8ffef4836f023c47ca4eccb35e1ce183b31c8b7206e9fdd49c2f8b54cae75e
61493ee4a67cb96d94818f00e4974fa0d9561627059f7563bae5aaabd889e17070710b0ece971351
36a455887725b67b80ac6e5c240aa63f8a54b03647afe6c3c2f9a54d6298796ad9439398216f236f
22af1ab6666829334f453a55f0f052d25e7efafca5f5f45a0b844d3e8f41f0b49f8d99a48b8739b1
adc3ce0419c03c86ad30e405d66e0acd2bbad51c22c95455998433306b46bfc1005844b1f534b777
27165458d983a97fd5ab54d43c97ce4ad5caf04f8fc85d1af6c024d32f057c53ac3c0d64540a1014
e5a79699a9a78675408e7d2c301a7285f9150d53cee2a564b175319ca792f1afe559ca4d3b4b0bd2
37064c20738edad9f7ef901c685cc9f54b0145162c73fb972ea6ead673ecb4d9d8cd76e7f0258b00
05a7ec04d252744f316db23079de844de6cd592bf729de18c17ee9ea48f33605e87ffe33536665ef
523b7b5f076f6a0a9b86542fbfc432b9d0d77dd7486a544c8872b9272c4298b5ae5415d04ff3c400
65cfbbaae9764621e40e64762447760114eee15319988a0bb4c37a8b886bb1b172e2f28a99a9c9b3
cc93acef008ee6a8414db703b01dd7ac0075c6b7e0e36bc942898eb8bd119a34409b43adac9bd82f
22076b48e74590afda2860ca10cabcb67b19d2622bf9ae78b7024797ccacdb60c4753b670ff94876
e2d3ad71ca67f085c9e21f68057a2628cd49e38b8ecd6203b95971e38dd3ccaa393918cd46ce5023
08a492f07aaa8b803392574836d69fab45464d4e063e980d6c2ed83ab93108f5ff7c55806fe366eb
c152985ab7098bc3e07be5502ca39f9ece96004f761cfc1af8220d8b131de142d94ca238d0c64ad3
eff269ac49b14d8c73fd8dfa9a24d36bbddce3f05b63a8dc4d58642e24551bc5d90c42e77aa5ce13
a219a62977a42e819b6f1ab21bd3f35570022ee53c4ceb5c568ab99c1cf10c86b2c13a14ca7f0b20
fcaf1271440187f03b1e0651169eb34ff09e572a7fd440222b00a5608dc27aee45d185b0bb695ce0
dc335b7fa05c53cafe65a1da050f68acd3f89c10eb6bce80beaeaf6ffc1c1ac22b60a49fb3886ed7
3bf456c8ae0eb5fa45b55a29673ba5ebf0c503bf15387087b2eeed83c257c899f17aeeed069addc5
d7176aacb6aea2b9ffe652c0ef23884e03b0cecc0f9da803e2dbd2099db18c5cbe18409895fc8350
3322b2d24a6a46862ec156d9176e85e170910b43e7abe9236c7416102e5bf2b00cfabb7cda48573f
265f6d641b4a4b3460b17c3004e14773a97d20a803755b9f9d18261168dfcbf4769aebbe1f42034c
3250d939499cbc6465848c8c9e7c8f9581eb3c0d80d8e3263b4840b3cacb62df4c0c96ada5c0a786
8a79e4a27950fb1bbc5186f7438e396468bf208eeeb18529ea8119ab901be2cff811ddc669ea6064
372d10165493a64614b37ff116263d996a2cadf5c97feb1ed09d698ed2b2a39f29bde629e5bb80e5
6a0bfd62b3954c9fc1d4eaf20f2574987161610d16b861c29f9ef77052d3743b88fbc16fb5fa8c6e
a928bde382208b0b2ffd55f7a2617b4445fa4980b2c28f243a698c3c6e062aaa5085f6cc37021728
17f4aafe40a7c4d8e5f078e5bf4e9b9eb37f93a4d67d3a87c26cab3a77f74443514d70c2cb8a2135
ad685d3c0432296e5cf2aa6dea74c45b10ab1f7ca43023ef00740ddfc7395d294468282fdd204049
98c6ce3ee4484fa6848e85aef80ccf98c5681b3d64c67e245f36ab3db94abd4fcb094e2fdcfb28d8
581c71e29c8694cb609bc958c16724cbf45c124d51eb2001f689d58dee6311e0e18a921bf31014a2
2fd0ef52af74bfd897814e9b6af6c7cfdc48726fadd4c6a891d03e0d8d604860fd2280e911e99cf5
0c7cf9efa713dd4293cb710f0fcf4fbce0cd6cdb26eca70083de24542e63ab9c7816a0fe5a7b743f
75286378638953e3e637c72e9435eeb72b6165c2258b218e1939f2667b774d6496f3da977dcce918
67114b7eac5adf27ff443b88a2ba37d4f407fbcc4bf9090c0aa109f3afa65ae0315eaeb3194f7181
90de491c13aa55674cac41074d14b7cba4256106ef4ce536bcd5e20cde92c8b32dba4636d2a76e21
2b5e2f69b77452aa891b9b3472ada04ed32f8cffae41d3725bf03fa10e4cb17f9c4e5b18d63be07f
715c108a2580b2867e9b2bea49a90e799b439f21e560f360d4fe6eafbcfec45b7231912e1371847e
72bc2e8f7acff5aee9040c50853cd376b39a47e0b2defca50951f6aae9614eb5c4e672957b4402f3
63ab663bf9df677006b17e79f874b59e2856c2366b6f45e4bdecb40bafaa9bb5c178e5b6f5a878ba
64f6b61177b3833fbce42ab63c9265198d013b3503581c85810d8b614a6ea77b51cace7c16e1140e
dcc0cb91ba9330c06fe8d79421f0abfa97cdaec0de55840bb360ed10de81a554e53f4742570bd4c2
7ef1282eefaf51ea1b7b151b1a8bc6ea994b09fdb9fb9cf9789631520eaa54c23496991f8a7dad91
6538ce3587a2276a9b974ca7fc180cc88f2d6354df226dc7b5b2bda9950dba3f45611f7cb5e38c25
10b1c4d3a18131296132cf42e9a99baaa22de0d7493a9d303decd02876dfd893f0546450040a9234
93440db1bc2ae971d3176ffd66547b50c92c5ffc3e0382ed732bda9d04d48b96667879a2c7e4aa6f
bde21c61cdba07d6da0d139700a0f3ce08f75c67f8bd631f174f308aed9aa16364bad57adeb04350
f8f3514b3b49daaa1cade74a48371ebedabb2cd43a6217faf9bb16ae021688733fd741d414944c01
55e671752825cf7f6fc2b6a42576e8051f874392e569bd389a9179d6dd2dd01d21ed2ca18c6a7221
2311cb06ddc59359f07c2ede691555f3ac005d7f1d669e2912e22215b30de9dc0519851d79262ad2
fb800e9809f9b4f99ddeb65c507636235aa61278390c89ea3fd06673717c3bbc3bda9df3bf2ed866
1c151258d34b30bf257f8da31607c674738a9a1a8fd8d690fa836c182f6bd8b328ce66c418661a1d
fa1f8cb3d8cd7f90010cf4be7048143b273524044bd0c1bdc20613f9dcb513fd81966f50a01a6178
e58cbb09597cf83f0b3bf1fdafeefff090633a5eecaee2fb07841e7753d1dbda69cce74458313119
f089da4c142cb1c4d3948a530b925cedb6779003e6beb05d32b5c0488c86c8db53745726dc35ca1c
4d5826c2438def6c2d5892414172184f31daf7141b2fff1277e7d81a61fce3cc1640ef0c183b864e
d4a3c3b76ec82899784dcad30000bed39e053d4d7b7bb9b73a0184bfc7b80a3bbc9fc98e7e233275
ae6eb1050bf0fe498a1699e98863eedb0a7a4e4592dc1cd6096e2753a202e14d8ca9f17976c8e8bf
75caa89b7b5805d58ef5107c43a1d465ac542cff4d2585a00ccdd7ec60272043eec8ff5f2478ab6a
59ebfcf18ba1ccf668a541e8ec50feb20bd351f3a6a0171c1162c211f75e6427310be56eeb99cb78
d395af466f6b2321046ff226c891c57db7164d2cd54c2d9b8e73a4be551230c9577c3e84fd4a985b
98e2de0efbec2b7f9a37091d54eea5048c07c313ff016bf50dbcab181c355b636df70703dddd1359
b63dc94a77ff47c3f9ff3019976d0b063509db15c3f6cc7e9cd1d859f085e9587231650b36d997b5
1a17651b1e32ac1e3b2ebda138a6dfb85fb3ea2f1a12f34ad6a66f7bd2298c19628298d5709c3641
abf1103d088e3ceb4fa7ab44daf2c9cf56a42a4e98eea28f35996b0a1763177962bef6cf663203dc
2e3bcdfc181d4eef102e9c2f8aa7f93504913960fb3fe8854227e78e39590f9b23f8c07d963925cb
82b0b3acc30e812c78c8453c273cb18126aca89a73371b7175a08166c03b76f718a841990de7a725
da677bf04bd89dc5fbd3faf4bd4b8af770b9d53657273dc1ef13d56efb044df9af4caf809fc566fe
e4be3420d1e7ac8348edcd78a34cda400fd3a90696f98c76994a461589f30574ad4075b9cfec226f
f4980943731c5d91fd7e4baf9f09500af86828d656d093c2605fac4403158894bbfc0415359fc1ac
c32e1849bdcd84de0a2704725ad2722a57cbae1e5fb164f5d7fcdae6789deb5e2e9d8e6b4b35b8a1
becb6153f17f8d5ca25bf4112afced3ad2a441bdb77c6ee1caa6a02f7cbd4dd5c89cce0d3154bd2c
358a6fe58e39821e243ea62fd9e5c60d57a5acd76a624c6ce02e798cbb49c599d4698daa3161158e
69f50fd99360b16b931ddabecac1171e3e2ed577853be9b9824056230a8ea125007da94d9ab52392
7f1a78ea2240a743583c14ac847037d04678a8c4caf5cf94e9d6aeacabef18e1ccb4ffcf047ed953
cec7aa4333014e1662e32d6318fa8a2d2e7353a6c3ab5fc3643e8db0545795cb3ca1c8e6db50ecce
1452a09671ebe57e6f783410f6f73c47cbab37838426d9e11ade31ee7048f8886c17b7f47ad55330
47a8ab29e5cbdaaa1a73d33a090c58e2ffecf35945412476ad06cce8df416c24fafc8f550e7cccb7
daf1b912cf76de5e1fd1a5c6607075e372d77866550e6be8f3a3785f16b48a8a1ebfc768c29660d5
9a63660bea3d58fcdf43b0134d8e66ad18729e8bc20eb77e5a2ea6410924cc0d59bf9e962de7cdaa
9a621e7b55c8faa83a000de611b79674a43cd4be606f07cefe3b577d05e652971b997e41c9a2e9e1
f3a27b371221a2bca4d957c9f2f2e30749225052268bc00fd94d2ada528d2c5b81014c6969a28cf0
afeed3f715aa6963a43173c2c9bd2557d6724f6e271ccc09c308222b0a564c787769395ef9168008
ea7e7cd977577cb8842c86c0627e913e44fc767ee5648034023559290e4d2e3f53ee2548627d9357
3fc77876352c02f37ef62864729354b8c6c722c262dcb4c5ebe407dd5d5a40b09c1fe12f863493f2
6055a19b3f224f14ba3d54eb7c90e68ad46729b4c976d274388040a46a28dd13fe41d504f8d6e09d
fdd8c58e158c35d1a9baa97a40ed1e8b285b03a3bf2c2222f6ea6cd4e15eb4e41052a6086c122ce1
1983bf2694abc37e5ba11487025c3be9b5dc9eedcca049683161d4eded1c771e931995254ca8a3b2
e22903ff859923ac800e6ce247b5ffa14b44bd3845d0d8554192bf5b485fd38aed073c06c076fb2c
ae0f661bf0c0cce95b07971e02ac85d769de37fe59130f1b02523fcaa3596ace18b673f93071ef72
a1262ff90c58cb482d12158fbbf4016b36077b97d104b310471eba263fd63392a7efcd94a4ffc28e
f6159919d627b215827d69f50352cd12ff4783ad27db2a88b8f41968154994707e69d9b5bb78d2dc
4a13ee3b598bf5e7d4efefc9e4a4769a67d6c13f46597abd2e21a108ee30197e07347b7b43911c66
6f8ebc027d1669648f8f417e4dad8a2dd10f06811cd3747c143a1c011025e70bbf1fda98eb75f97d
9f06410210464a68fd7337baacbca5bb47078c9e6a2c89f0ca313e6e8e6c5f94045ac7af1ce91199
c64c98c0322886a1
#END



#BEGIN DEVICE
	@LocalIOMaster, 12, 27
	@UserLog, 7, 11
	@IntEthernet, 4, 2
	@DMLogger, 5, 10
	@IntModTCPClient, 9, 14, 1000, 2, 60
	@IntSerial, 10, 15
	@RamFS, 1, 1
	@SDCardFS, 25, 1
	@IntEIPClient, 22, 31, 1000, 2, 60
	@IntEthDMPPClient, 23, 32, 50, 250, 2
	@POM, 24, 33
	@Axis0, 30, 35
	@Axis1, 31, 35
	@Axis2, 32, 35
	@Axis3, 33, 35
	@HsCtrTmr1, 14, 29
	@MyFTPClient, 32769, 38, 4294967295, 21, 30000, 4, amsftp@amshm.com, AMSwaterHM34896@!, ftp.amshm.com
	@MyHTTPClient, 32770, 8
	@SERIO_001_A, 16385, 24
	@SERIO_001_B, 17409, 24
	@SERIO_001_C, 18433, 24
	@SERIO_001_D, 19457, 24
#END

#BEGIN MEM_CONFIG
	X	BIT	decimal	2048	-1
	Y	BIT	decimal	2048	-1
	WX	SWORD	decimal	256	-1
	WY	SWORD	decimal	256	-1
	C	BIT	decimal	2048
	V	UWORD	decimal	4096
	N	SWORD	decimal	4096
	D	SDWORD	decimal	4096
	R	REAL	decimal	4096
	T	TIMER	decimal	256	-1
	CT	COUNTER	decimal	256
	SS	STRING	decimal	128
	SL	STRING	decimal	64
	UDT	DATETIME	decimal	32
	PL	UWORD	decimal	256
	DLX	BIT	octal	01000
	DLY	BIT	octal	01000
	DLC	BIT	octal	01000
	DLV	UWORD	octal	04000
	MI	BIT	decimal	1024
	MC	BIT	decimal	1024
	MIR	SWORD	decimal	2048
	MHR	SWORD	decimal	2048
	RX	REAL	decimal	256	-1
	RY	REAL	decimal	256	-1
	A	BIT	decimal	256	-1
	F	REAL	decimal	32
	B	BIT	decimal	256
	TO	SDWORD	decimal	32
	TT	REAL	decimal	16
	W	REAL	decimal	16
	SC	REAL	decimal	64
	SE	BIT	decimal	256
	MSG	STRING		0
	ERR	STRING		0
	SysName	STRING		0
	SysDesc	STRING		0
	SerialNum	STRING		0
	PartNum	STRING		0
	TaskGalvanostat	TASK		0	-1
	ProgInfo	PROGRAM		0	-1
	ProgErrors	PROGRAM		0	-1
	TaskUltrasonics	TASK		0	-1
	TaskPolarity	TASK		0	-1
	ProgDosingPump	PROGRAM		0	-1
	ProgWarnings	PROGRAM		0	-1
	TaskAcidPumpPID	TASK		0	-1
	AcidPumpCtlPID	PID		0
	RS_0	RAMPSOAK		0
	TaskLoadWebPages	TASK		0
	PropValveCtlPID	PID		0
	TaskPropValvePID	TASK		0	-1
	RS_1	RAMPSOAK		0
	ConductvyCtlPID	PID		0
	TaskConductvyPID	TASK		0	-1
	RS_2	RAMPSOAK		0
	TaskRoutineTest	TASK		0	-1
	TaskUpdPlatePerc	TASK		0	-1
	ProgNotices	PROGRAM		0	-1
	ProgStateMachine	PROGRAM		0	-1
	ProgDraining	PROGRAM		0	-1
	ProgAbortDrain	PROGRAM		0	-1
	ProgAbortRinsing	PROGRAM		0
	ProgRinsing	PROGRAM		0	-1
	TaskResetPlates	TASK		0	-1
	TaskFilterError	TASK		0	-1
#END

// Beginning of Code Block $tFirstScan
$TSK	$tFirstScan

// Rung $tFirstScan#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br>"
"<FONT tsize=5>$tFirstScan</FONT><br><FONT tsize=5></FONT> "
"<br>This is the first ladder task that is ran once when the "
"PLC is placed into RUN mode.  Just to be sure, internal "
"memory variables are initialized and any default "
"configurations can be reloaded.  If a program change "
"requires these to be reloaded, be sure to switch to program "
"mode then back to run mode either by physical or software "
"switch."
#END

NOP

// Rung $tFirstScan#2
// Offset 1
#BEGIN FMT_COMMENT 
"Reset local memory variable ranges/registers to zero when "
"PLC first starts up.  (If a nickname appears in the ""End"" "
"column, may need to increase the initialization range.)  If "
"an I/O was previously on when it shouldn't, it will be "
"reset at the bottom of the scan.  Note, not clearning "
"specific registers to be left as retentive in case they are "
"changed by UI operator (examples are target amperage, "
"polarity or ultrasonic timings)."
#END

STR	ST1
INIT	"3 C0 C70 0 A0 A33 0 B2 B48 0 F0 F23 0 W0 W15 0"
INIT	"3 R0 R7 0 R9 R47 0 D0 D3 0 D7 D23 0"

// Rung $tFirstScan#3
// Offset 32
#BEGIN FMT_COMMENT 
"Initialize specific modbus registers to 0."
#END

STR	ST1
INIT	"3 MC1 MC10 0 MC101 MC123 0"

// Rung $tFirstScan#4
// Offset 40
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C ENABLE/DISABLE "
"%3E%3E%3E%3E</FONT><br> <br>Set various enable/bypass "
"registers to test or enable/disable subsections of code.  "
"Not determined yet if from config file, retentive memory, "
"GUI, or other method.  Be sire to reset once done testing "
"and restart the PLC program mode for first scan to take "
"affect."
#END

STR	ST1
COPY	0x1	"4 0x0 0 C33 1 0x0 1 C26 1 0x0 1 C27 1 0x0 1 C28 1 0x0 1 C29 1 0x0 0 C24 1 0x0 0 C45 1 0x0 0 C47 1 0x0 1 C48 1 0x0 1 C38 1 0x0 0 C39 1 0x0 0 C50 1 0x0 1 C51 1 0x0 1 C52 1 0x0 0 C56 1 0x0 1 C34 1 0x0 1 C41 1 0x0 1 C42 1 0x0 1 C43 1 0x0 1 C59 1"

// Rung $tFirstScan#5
// Offset 65
#BEGIN FMT_COMMENT 
"Load or set default values to original hard-coded run-time "
"values.  Future could load configurations from common "
"sources (UI, file, LEDs, etc).  Not determined yet if from "
"config file, retentive memory, GUI, or other method."
#END

STR	ST1
COPY	0x1	"4 0x0 60 F3 1 0x0 10 F1 1 0x0 30 F2 1 0x0 70 F0 1 0x0 1.7 F10 1 0x0 1000 F4 1 0x0 1000 F9 1 0x0 2000 F7 1 0x0 2000 F8 1 0x0 1000 F5 1 0x0 1000 F6 1 0x0 1 F11 1 0x0 1 F12 1 0x0 1 F13 1 0x0 31 F14 1 0x0 3.5 F15 1 0x0 36000 F16 1 0x0 1000 F17 1 0x0 23400 F18 1 0x0 75.0 F19 1 0x0 30.0 F20 1 0x0 60 F21 1"

// Rung $tFirstScan#6
// Offset 118
#BEGIN FMT_COMMENT 
"Set various ranges for errors, warnings, and interlocks.  "
"Not determined yet if from config file, retentive memory, "
"GUI, or other method."
#END

STR	ST1
COPY	0x1	"4 0x0 3 R0 1 0x0 5 R1 1 0x0 29 R2 1 0x0 35 R3 1 0x0 1.5 R4 1 0x0 2 R5 1 0x0 10 R20 1 0x0 14 R21 1 0x0 30 R22 1 0x0 40 R23 1 0x0 20 R24 1 0x0 15 R25 1 0x0 200 R26 1"

// Rung $tFirstScan#7
// Offset 150
#BEGIN FMT_COMMENT 
"Set various timeout values for errors, warnings, and "
"interlocks.  Not determined yet if from config file, "
"retentive memory, GUI, or other method."
#END

STR	ST1
COPY	0x1	"4 0x0 120000 TO0 1 0x0 120000 TO1 1 0x0 120000 TO2 1 0x0 120000 TO3 1 0x0 120000 TO4 1 0x0 300000 TO5 1 0x0 120000 TO6 1"

// Rung $tFirstScan#8
// Offset 176
#BEGIN FMT_COMMENT 
"Set check rules (warnings, interlocks, errors) to be "
"either enabled or disabled for individual testing.  Be sure "
"to reset once done testing and restart the PLC program "
"mode.  First, INIT all B registers to 0 or 1 (depending "
"upon desired affect), then COPY select B registers to 1 to "
"test individual rules.  Several combinations are possible.  "
"Remember to check the CEnableErrors, CEnableInterlocks, and "
"CEnableWarnings registers above too."
#END

STR	ST1
COPY	0x1	"4 0x0 0 B2 1 0x0 1 B3 1 0x0 1 B4 1 0x0 0 B5 1 0x0 1 B6 1 0x0 1 B7 1 0x0 0 B8 1 0x0 0 B9 1 0x0 0 B10 1 0x0 0 B11 1 0x0 0 B12 1 0x0 0 B13 1 0x0 1 B15 1 0x0 1 B16 1 0x0 0 B18 1 0x0 1 B19 1 0x0 1 B20 1 0x0 0 B21 1 0x0 1 B22 1 0x0 1 B23 1 0x0 0 B26 1 0x0 1 B27 1 0x0 1 B28 1 0x0 1 B29 1 0x0 1 B30 1 0x0 1 B31 1 0x0 1 B32 1"

// Rung $tFirstScan#9
// Offset 208
#BEGIN FMT_COMMENT 
"Load original default values into actual default working "
"variables that do not need any manipulation like "
"milliseconds.  If these change downstream or via GUI, "
"alternate approach is needed between working and saving of "
"the new default values.  Not determined yet if from config "
"file, retentive memory, GUI, or other method.<br> <br>"
"Set debounce values..."
#END

STR	ST1
COPY	0x1	"4 0x0 F4 D7 1 0x0 F9 D12 1 0x0 F5 D8 1 0x0 F6 D9 1 0x0 F7 D10 1 0x0 F8 D11 1 0x0 F5 D16 1 0x0 F6 D17 1 0x0 1440 D19 1 0x0 720 D20 1"

// Rung $tFirstScan#10
// Offset 233
#BEGIN FMT_COMMENT 
"Set scaling parameters for each device.  Different "
"installs/products could have different ranges depending "
"upon product.  Rather than finding the SCALE command, can "
"enter here."
#END

STR	ST1
COPY	0x1	"4 0x0 0 SC0 1 0x0 16383 SC1 1 0x0 0 SC2 1 0x0 R26 SC3 1 0x0 0 SC4 1 0x0 32767 SC5 1 0x0 0 SC6 1 0x0 100 SC7 1 0x0 0 SC8 1 0x0 16383 SC9 1 0x0 -2 SC10 1 0x0 2 SC11 1 0x0 6553 SC12 1 0x0 32767 SC13 1 0x0 -10 SC14 1 0x0 70 SC15 1 0x0 0 SC16 1 0x0 32767 SC17 1 0x0 -40 SC18 1 0x0 85 SC19 1 0x0 6553 SC20 1 0x0 32767 SC21 1 0x0 0 SC22 1 0x0 25 SC23 1 0x0 6553 SC24 1 0x0 32767 SC25 1 0x0 0 SC26 1 0x0 14 SC27 1 0x0 0 SC28 1 0x0 32767 SC29 1 0x0 0 SC30 1 0x0 15 SC31 1 0x0 6553 SC32 1 0x0 32767 SC33 1 0x0 8 SC34 1 0x0 0 SC35 1 0x0 0 SC36 1 0x0 R26 SC37 1 0x0 3276 SC38 1 0x0 29490 SC39 1 0x0 0 SC40 1 0x0 32767 SC41 1 0x0 0 SC42 1 0x0 32767 SC43 1 0x0 0 SC44 1 0x0 32767 SC45 1 0x0 0 SC46 1 0x0 32767 SC47 1"

// Rung $tFirstScan#11
// Offset 334
#BEGIN FMT_COMMENT 
"Scaling for acid pump PID in regards to pH."
#END

STR	ST1
COPY	0x1	"4 0x0 0 SC48 1 0x0 14 SC49 1 0x0 0 SC50 1 0x0 14 SC51 1 0x0 0 SC52 1 0x0 25 SC53 1 0x0 0 SC54 1 0x0 25 SC55 1 0x0 0 SC56 1 0x0 100 SC57 1 0x0 0 SC58 1 0x0 100 SC59 1"

// Rung $tFirstScan#12
// Offset 363
#BEGIN FMT_COMMENT 
"Set the default path and file name for log files using the "
"SysName of the assigned PLC."
#END

STR	ST1
STRCOPY	SysName	SS1	1
STRINSERT	"""data\"""	SS1	0

// Rung $tFirstScan#13
// Offset 372
#BEGIN FMT_COMMENT 
"Set the default tuning parameters for the acid pump PID control."
#END

STR	ST1
AND	C50
PIDINIT	AcidPumpCtlPID	276	295.432	9.208	0

// Rung $tFirstScan#14
// Offset 381
#BEGIN FMT_COMMENT 
"Set the default tuning parameters for the proportional "
"valve PID control."
#END

STR	ST1
AND	C51
PIDINIT	PropValveCtlPID	100	4.5	3.809	0

// Rung $tFirstScan#15
// Offset 390
#BEGIN FMT_COMMENT 
"Set the default tuning parameters for the conductivity PID control."
#END

STR	ST1
AND	C52
PIDINIT	ConductvyCtlPID	100	2.544	11.91	1.985

// Rung $tFirstScan#16
// Offset 400
#BEGIN FMT_COMMENT 
"Set timed variables back to original default if a previous "
"value was not in retentive memory (i.e. was zero value).  "
"Also, convert original saved default values from seconds to "
"milliseconds for those registers that need milliseconds."
#END

STR	ST1
MATH	D6	"ROUND(F3 * 1000)"
MATH	D4	"ROUND(F1 * 1000)"
MATH	D5	"ROUND(F2 * 1000)"

// Rung $tFirstScan#17
// Offset 428
#BEGIN FMT_COMMENT 
"Set remote on here rather than using software forces.  "
"This is a reserved register for sites requiring an external "
"event to start/stop processing."
#END

STR	ST1
COPY	0x1	"4 0x0 1 C0 1"

// Rung $tFirstScan#18
// Offset 434
STR	ST1
COPY	0x1	"4 0x0 ""First scan complete."" SL0 1"

// End of Code Block $tFirstScan
$TSKEND	$tFirstScan

// Beginning of Code Block $tTopOfScan
$TSK	$tTopOfScan

// Rung $tTopOfScan#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br>"
"<FONT tsize=5>$tTopOfScan</FONT><br><FONT tsize=5></FONT> "
"<br>This is the first ladder task before the main ladder "
"steps for each loop.  By taking any physical inputs and/or "
"Modbus and/or any other device supplying updates and "
"writing them into memory registers for all ladder "
"operations for processing until the bottom of the scan in "
"which all outputs are set."
#END

NOP

// Rung $tTopOfScan#2
// Offset 1
STR	X1
DEBOUNCE	D13	D14	C63

// Rung $tTopOfScan#3
// Offset 6
#BEGIN FMT_COMMENT 
"Read in incoming digital bits (X) and debounce signal for "
"stability into working variables (C).<br> "
#END

STR	X2
DEBOUNCE	D13	D14	C9

// Rung $tTopOfScan#4
// Offset 11
STR	X8
DEBOUNCE	D13	D14	C10

// Rung $tTopOfScan#5
// Offset 16
STR	X2
DEBOUNCE	D13	D14	C46

// Rung $tTopOfScan#6
// Offset 21
STR	X4
DEBOUNCE	D13	D14	C11

// Rung $tTopOfScan#7
// Offset 26
STR	X5
DEBOUNCE	D13	D14	C12

// Rung $tTopOfScan#8
// Offset 31
STR	X6
DEBOUNCE	D13	D14	C13

// Rung $tTopOfScan#9
// Offset 36
STR	X7
DEBOUNCE	D13	D14	C14

// Rung $tTopOfScan#10
// Offset 41
STR	X8
DEBOUNCE	D13	D14	C15

// Rung $tTopOfScan#11
// Offset 46
STR	X9
DEBOUNCE	D13	D14	C25

// Rung $tTopOfScan#12
// Offset 51
STR	X10
ANDN	MC8
ANDN	C57
DEBOUNCE	D15	32768	C35

// Rung $tTopOfScan#13
// Offset 58
STR	X11
DEBOUNCE	D15	32768	C36

// Rung $tTopOfScan#14
// Offset 63
STR	X12
DEBOUNCE	D15	32768	C64

// Rung $tTopOfScan#15
// Offset 68
STR	X13
DEBOUNCE	D15	32768	C65

// Rung $tTopOfScan#16
// Offset 73
STR	X14
DEBOUNCE	D15	32768	C66

// Rung $tTopOfScan#17
// Offset 78
STR	X15
DEBOUNCE	D15	32768	C67

// Rung $tTopOfScan#18
// Offset 83
#BEGIN FMT_COMMENT 
"Read all scaled analog inputs (WX) into local memory "
"decimal variables (R).  Use unscaled analog inputs (WX) for "
"original raw values from devices."
#END

STR	ST1
MAPIO	"2 WX23 W0 WX4 W1 WX2 W8 WX21 W3 WX1 W4 WX20 W5 WX3 W6 WX22 W7"

// Rung $tTopOfScan#19
// Offset 103
#BEGIN FMT_COMMENT 
"Convert raw (WX) values into scaled values per each "
"individual device specs."
#END

STR	ST1
SCALE	W0	SC0	SC1	SC2	SC3	R18
SCALE	W1	SC4	SC5	SC6	SC7	R14
SCALE	W3	SC12	SC13	SC14	SC15	R16
SCALE	W4	SC16	SC17	SC18	SC19	R17
SCALE	W5	SC20	SC21	SC22	SC23	R9
SCALE	W6	SC24	SC25	SC26	SC27	R13
SCALE	W7	SC28	SC29	SC30	SC31	R27
SCALE	W8	SC32	SC33	SC34	SC35	R28

// Rung $tTopOfScan#20
// Offset 152
#BEGIN FMT_COMMENT 
"If on a system where galvanostat doesn't return a feedback "
"amperage, set the feedback to the target out amperagee."
#END

STRN	C45
COPY	0x1	"4 0x0 R8 R18 1"

// Rung $tTopOfScan#21
// Offset 159
#BEGIN FMT_COMMENT 
"If flow rate returns negative, set back to zero."
#END

STRLT	R9	0.06
COPY	0x1	"4 0x0 0 R9 1"

// Rung $tTopOfScan#22
// Offset 170
#BEGIN FMT_COMMENT 
"If voltage approaches zero, set to zero."
#END

STRLT	R27	0.06
COPY	0x1	"4 0x0 0 R27 1"

// Rung $tTopOfScan#23
// Offset 181
#BEGIN FMT_COMMENT 
"If amperage approaches zero, set to zero."
#END

STRLT	R18	0.06
COPY	0x1	"4 0x0 0 R18 1"

// Rung $tTopOfScan#24
// Offset 192
#BEGIN FMT_COMMENT 
"Use FILTER command against the incoming voltage reading to "
"slow down the drastic changes, especially during polarity "
"switching."
#END

STR	ST1
FILTER	2	R27	R19

// Rung $tTopOfScan#25
// Offset 196
STR	C45
MATH	R19	"R19 * 10"
MATH	R18	"R18 * 10"

// Rung $tTopOfScan#26
// Offset 213
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C DEMO MODE "
"%3E%3E%3E%3E</FONT><br><FONT tsize=5></FONT> <br>If in "
"DemoMode, overwrite any values from above."
#END

STR	C33
COPY	0x1	"4 0x0 5.55 R18 1 0x0 55.5 R14 1 0x0 25.5 R16 1 0x0 35.5 R17 1 0x0 4.44 R9 1 0x0 2.2 R13 1 0x0 7.77 R19 1 0x0 4000 R28 1"

// Rung $tTopOfScan#27
// Offset 241
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C WEB PAGES "
"%3E%3E%3E%3E</FONT><br> <br>Refresh web pages from SD card "
"to RAM."
#END

STR	C38
ENTASK	TaskLoadWebPages	0x0	0	0x1

// Rung $tTopOfScan#28
// Offset 246
#BEGIN FMT_COMMENT 
"On leading edge of green button press or leading edge of "
"HMI start state, set local bit.<br>"
"Output the button press to modbus (MC3) so that it can be "
"interpreted by the UI as a command to start."
#END

STRPD	C35
ORPD	MC1
ORPD	C63
COPY	0x1	"4 0x0 1 C1 1 0x0 0 C36 1 0x0 0 MC1 1"

// Rung $tTopOfScan#29
// Offset 259
#BEGIN FMT_COMMENT 
"On leading edge of red button press or trailing edge of "
"HMI entered stop state, set local bit.<br>"
"Output the button press to modbus (MC4) so that it can be "
"interpreted by the UI as a command to stop."
#END

STRPD	C36
ORPD	MC2
ORND	C63
ORE	D0	SM_Halted
COPY	0x1	"4 0x0 0 C1 1 0x0 0 C35 1 0x0 0 MC2 1"

// Rung $tTopOfScan#30
// Offset 277
STR	MC8
ENTASK	TaskRoutineTest	0x0	0	0x1

// End of Code Block $tTopOfScan
$TSKEND	$tTopOfScan

// Beginning of Code Block $Main
$PRGRM	$Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br><FONT tsize=5>$Main</FONT><br>"
"<FONT tsize=5></FONT> <br>This is the main ladder loop "
"launched afte the TopOfScan.  The BottomOfScan is launched "
"after this Main loop.  This Main task starts and stops "
"other programs and tasks."
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C ERRORS / WARNINGS / INFO "
"%3E%3E%3E%3E</FONT><br> <br>Start side programs to monitor "
"conditions (errors, warnings and info) that may or may not "
"require a temporary halt of processing.  If the condition "
"returns to normal, processing may proceed, otherwise, local "
"operators may need to resolve the issue and restart.  See "
"the programs for further details."
#END

STR	C28
RUN	ProgInfo

// Rung $Main#3
// Offset 4
STR	C26
RUN	ProgErrors

// Rung $Main#4
// Offset 7
STR	C27
RUN	ProgWarnings

// Rung $Main#5
// Offset 10
STR	C59
RUN	ProgNotices

// Rung $Main#6
// Offset 13
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C GENERATOR "
"%3E%3E%3E%3E</FONT><br> <br>If the system bit is on and "
"there are no errors and there are no interlocks, start the "
"tasks which handle the amperage, ultrasonics, and "
"polarity.  The task should stay active and running as long "
"as these conditions are met.  Also, turn on one of the "
"H-bridge relays."
#END

STRE	D0	SM_Running
ENTASK	TaskGalvanostat	0x0	0	0x1
ENTASK	TaskUltrasonics	0x0	0	0x1
ENTASK	TaskPolarity	0x0	0	0x1

// Rung $Main#7
// Offset 30
#BEGIN FMT_COMMENT 
"<FONT tsize=5></FONT>But, if the system bit is off, or "
"there is an error, or there is an interlock, or the system "
"mode is not correct, turn off the generator task.  Although "
"halting a task should automatically turn off all embedded "
"bits to that task, perform a copy anyway to make sure."
#END

STRNE	D0	SM_Running
HALT	TaskGalvanostat
HALT	TaskUltrasonics
HALT	TaskPolarity
COPY	0x1	"4 0x0 0 C5 1 0x0 0 R8 1 0x0 0 C3 1 0x0 0 C4 1 0x0 0 C30 1 0x0 0 C31 1 0x0 0 C37 1"

// Rung $Main#8
// Offset 50
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C MAIN INLET VALVE "
"%3E%3E%3E%3E</FONT><br> <br>If the system is running, open "
"up the main valve and close when not running."
#END

STRN	MC602
AND	C60
STR	MC602
AND	MC603
ORSTR
COPY	0x1	"4 0x0 1 C16 1"

// Rung $Main#9
// Offset 60
#BEGIN FMT_COMMENT 
" "
#END

STRN	MC8
STRN	MC602
ANDN	C60
STR	MC602
ANDN	MC603
ORSTR
ANDSTR
COPY	0x1	"4 0x0 0 C16 1"

// Rung $Main#10
// Offset 72
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C DRAIN PUMP "
"%3E%3E%3E%3E</FONT><br> <br>If the UI is forcing on/off the "
"drain pump, set elements needed."
#END

STR	MC610
DUPBOOL
AND	MC611
COPY	0x1	"4 0x0 1 C7 1"
POPBOOL
ANDN	MC611
COPY	0x1	"4 0x0 0 C7 1"

// Rung $Main#11
// Offset 87
#BEGIN FMT_COMMENT 
"<FONT tsize=5><FONT tsize=5>%3C%3C%3C%3C ACID PUMP PID "
"%3E%3E%3E%3E</FONT><br> <br></FONT><FONT tsize=3>Start/stop "
"PID task for acid pump controlling ph.</FONT>"
#END

STR	C60
AND	C50
ENTASK	TaskAcidPumpPID	0x0	0	0x1
COPY	0x1	"4 0x0 1 C6 1"

// Rung $Main#12
// Offset 98
#BEGIN FMT_COMMENT 
" "
#END

STRN	C60
HALT	TaskAcidPumpPID
COPY	0x1	"4 0x0 0 R10 1 0x0 0 C6 1"

// Rung $Main#13
// Offset 107
#BEGIN FMT_COMMENT 
"<FONT tsize=5><FONT tsize=5><FONT tsize=5><FONT "
"tsize=5>%3C%3C%3C%3C PROPORTIONAL VALVE PID "
"%3E%3E%3E%3E</FONT><br> <br></FONT><FONT tsize=3>Start/stop "
"PID task for proportional valve controlling flow "
"rate.</FONT></FONT><br></FONT>"
#END

STRN	MC602
AND	C60
AND	C51
STR	MC602
AND	MC603
ORSTR
ENTASK	TaskPropValvePID	0x0	0	0x1
COPY	0x1	"4 0x0 1 C49 1"

// Rung $Main#14
// Offset 122
STRN	MC8
DUPBOOL
ANDN	MC602
ANDN	C60
HALT	TaskPropValvePID
POPBOOL
AND	MC602
ANDN	MC603
COPY	0x1	"4 0x0 0 C49 1"

// Rung $Main#15
// Offset 135
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C SYSTEM MODE "
"%3E%3E%3E%3E</FONT><br> <br>Upon each and every loop, "
"regardelss if system is on or off, determine the current "
"status of the system (i.e. Ready, Running, Alarm, etc) and "
"set registers accordingly for further use.  This isn't "
"defined as a task or program, which may run in different "
"scans, but instead as a subroutine, which will run as part "
"of the current scan, every time, right now.<br> <br>"
"Hierarchy of Status:<br> <br>"
"1)  If the system determines no errors and there are no "
"interlocks:<br>RUNNING, PROCESSING, GENERATING, ON, "
"NORMAL<br> <br>2)  If the system determines an interruption "
"event:<br>PAUSED, WAITING, PENDING, INTERLOCKED, STARTUP<br>"
" <br>3)  If the system determines an error event:<br>"
"ALARM, ERROR, STOPPED, HALTED, ALERT, OFF<br> <br>"
"4)  Else<br>READY, IDLE, STANDBY, OFF, OPERATOR, "
"MAINTENANCE, MANUAL"
#END

STR	ST1
RUN	ProgStateMachine

// Rung $Main#16
// Offset 138
#BEGIN FMT_COMMENT 
"<FONT tsize=5><FONT tsize=5>%3C%3C%3C%3C CONDUCTIVITY PID "
"%3E%3E%3E%3E</FONT><br> <br></FONT><FONT tsize=3>Start/stop "
"PID task for acid pump controlling conductivity.</FONT>"
#END

STR	C60
AND	C52
ENTASK	TaskConductvyPID	0x0	0	0x1
COPY	0x1	"4 0x0 1 C6 1"

// Rung $Main#17
// Offset 149
STRN	C60
HALT	TaskConductvyPID
COPY	0x1	"4 0x0 0 R10 1 0x0 0 C6 1"

// Rung $Main#18
// Offset 158
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C FILE LOG %3E%3E%3E%3E</FONT><br>"
" <br>If the system is running, log data entry at "
"pre-determined time."
#END

STR	ST1
FILELOG	@SDCardFS	SS1	0x22	SS0	"2 D0 4 C0 3 R8 2 R13 1 R16 2 R19 1 TT0 4"	"TimeStamp() "","" D0 "","" D1 "","" D2 "","" D3 "","" C0 "","" C1 "","" C2 "","" R8 "","" R9 "","" R13 "","" R16 "","" R17 "","" R19 "","" TT0 "","" TT1 "","" TT2 "","" TT3 ""$0D$0A"""	0x0	C19	C20

// Rung $Main#19
// Offset 321
STR	ST1
ENTASK	TaskUpdPlatePerc	0x0	0	0x1

// Rung $Main#20
// Offset 326
STR	ST1
ENTASK	TaskResetPlates	0x0	0	0x1

// Rung $Main#21
// Offset 331
STR	C61
RUN	ProgDraining

// Rung $Main#22
// Offset 334
STR	ST1
ENTASK	TaskFilterError	0x0	0	0x1

// End of Code Block $Main
$PGMEND	$Main

// Beginning of Code Block TaskGalvanostat
$TSK	TaskGalvanostat

// Rung TaskGalvanostat#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br> <br>"
"<FONT tsize=5>TaskGalvanostat</FONT><br><FONT "
"tsize=5></FONT> <br>"
"<FONT tsize=3>This independent task is started and stopped "
"via the Main control loop ladder.  The generator supporting "
"devices are started and stopped here.  The generator flow "
"cell has the galvanostat, ultrasonics, and polarity "
"switching.  To disable a specific device, its values could "
"be preconfigured as zero.</FONT>"
#END

NOP

// Rung TaskGalvanostat#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=3></FONT> "
#END

STRGT	F0	0
DUPBOOL
AND	C32
COPY	0x1	"4 0x0 0 C5 1 0x0 F0 R8 1"
POPBOOL
ANDN	C32
COPY	0x1	"4 0x0 1 C5 1 0x0 F0 R8 1"

// Rung TaskGalvanostat#3
// Offset 23
#BEGIN FMT_COMMENT 
"If the target amperage is equal or below zero, make sure "
"the galvanostat is off/disabled and amperage is zero.<br> "
#END

STRLE	F0	0
COPY	0x1	"4 0x0 0 C5 1 0x0 0 R8 1"

// End of Code Block TaskGalvanostat
$TSKEND	TaskGalvanostat

// Beginning of Code Block ProgInfo
$PRGRM	ProgInfo

// Rung ProgInfo#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br><FONT tsize=5>ProgInfo</FONT><br>"
"<FONT tsize=5></FONT> <br>This separate independent program "
"loops thru conditions looking for those that may need to be "
"reported, but not necessary halt or pause the system.  The "
"reverse condition may also be checked waiting and hoping "
"the warning eventually clears, thus allowing the process to "
"continue in the long term.  Or, the warnings may be reset "
"at first and reprocessed over and over.  The warnings "
"aren't read in order, but final assignment is ordered from "
"those that are least important to most important so that "
"all conditions can be checked, but leaving the routine with "
"the most important code recorded."
#END

NOP

// Rung ProgInfo#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Low Web Pages %3E%3E%3E%3E</FONT>"
#END

STR	C38
AND	B26
DUPBOOL
ANDN	SE0
AND	SE2
AND	SE4
DEBOUNCE	D8	D9	A26
POPBOOL
AND	SE0
STRN	SE2
ORN	SE4
ANDSTR
DEBOUNCE	D8	D9	A26

// Rung ProgInfo#3
// Offset 20
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Acid Tank Low "
"%3E%3E%3E%3E</FONT><br> "
#END

STR	C9
AND	B8
DEBOUNCE	D8	D9	A8

// Rung ProgInfo#4
// Offset 26
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Voltage Increasing %3E%3E%3E%3E</FONT>"
#END

STRGE	R19	R20
AND	B10
DEBOUNCE	D8	D9	A10

// Rung ProgInfo#5
// Offset 35
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Temperature Increasing %3E%3E%3E%3E</FONT>"
#END

STRGE	R17	R22
AND	B21
DEBOUNCE	D8	D9	A21

// Rung ProgInfo#6
// Offset 44
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Outer Plates Low %25 %3E%3E%3E</FONT>"
#END

STRLE	TT9	R24
AND	B15
DEBOUNCE	D8	D9	A15

// Rung ProgInfo#7
// Offset 53
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Outer Plates Low %25 %3E%3E%3E</FONT>"
#END

STRLE	TT11	R24
AND	B30
DEBOUNCE	D8	D9	A30

// Rung ProgInfo#8
// Offset 62
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Filter Backwash %3E%3E%3E</FONT>"
#END

STR	C64
OR	C65
OR	C66
OR	C67
AND	B33
DEBOUNCE	D8	D9	A33

// Rung ProgInfo#9
// Offset 71
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Set Warning Codes ON/OFF "
"%3E%3E%3E%3E</FONT> "
#END

STR	C2
DUPBOOL
AND	A26
COPY	0x1	"4 0x0 A_LoadWebPages D3 1 0x0 1 C23 1"
POPBOOL
DUPBOOL
AND	A8
COPY	0x1	"4 0x0 A_AcidTankLow D3 1 0x0 1 C23 1"
POPBOOL
DUPBOOL
AND	A10
COPY	0x1	"4 0x0 A_VoltInfo D3 1 0x0 1 C23 1"
POPBOOL
DUPBOOL
AND	A21
COPY	0x1	"4 0x0 A_TempInfo D3 1 0x0 1 C23 1"
POPBOOL
DUPBOOL
AND	A30
COPY	0x1	"4 0x0 A_InPlatesInfo D3 1 0x0 1 C23 1"
POPBOOL
DUPBOOL
AND	A15
COPY	0x1	"4 0x0 A_OutPlatesInfo D3 1 0x0 1 C23 1"
POPBOOL
DUPBOOL
AND	A33
COPY	0x1	"4 0x0 A_Backwash D3 1 0x0 1 C23 1"
POPBOOL
ANDN	A8
ANDN	A10
ANDN	A21
ANDN	A15
ANDN	A30
ANDN	A33
COPY	0x1	"4 0x0 A_NoAlarm D3 1 0x0 0 C23 1"

// Rung ProgInfo#10
// Offset 163
STRN	C2
COPY	0x1	"4 0x0 A_NoAlarm D3 1 0x0 0 C23 1"

// End of Code Block ProgInfo
$PGMEND	ProgInfo

// Beginning of Code Block ProgErrors
$PRGRM	ProgErrors

// Rung ProgErrors#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br>"
"<FONT tsize=5>ProgErrors</FONT><br><FONT tsize=5></FONT> "
"<br>This separate independent program loops thru conditions "
"looking for those that may halt the entire system.  The "
"reverse condition may not be checked, but cleared by "
"operators and restarted manually.  The errors are read in "
"any order, but ordered from those that are least important "
"to most important so that all conditions can be checked, "
"but leaving the routine with the most important recorded "
"code."
#END

NOP

// Rung ProgErrors#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Acid Tank Empty "
"%3E%3E%3E%3E</FONT><br> "
#END

STR	C25
AND	B9
DEBOUNCE	D7	32768	A9

// Rung ProgErrors#3
// Offset 7
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Reagent Tank Overflow "
"%3E%3E%3E%3E</FONT><br> "
#END

STR	C14
AND	B12
DEBOUNCE	D7	32768	A12

// Rung ProgErrors#4
// Offset 13
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Voltage Too High "
"%3E%3E%3E%3E</FONT><br> "
#END

STRGE	R19	R21
AND	B11
DEBOUNCE	D7	32768	A11

// Rung ProgErrors#5
// Offset 22
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Temperature Too High %3E%3E%3E%3E</FONT>"
#END

STRGE	R17	R23
AND	B5
DEBOUNCE	D7	32768	A5

// Rung ProgErrors#6
// Offset 31
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Startup Timeout %3E%3E%3E</FONT>"
#END

STR	T17.Done
AND	B32
DEBOUNCE	D7	10000	A32

// Rung ProgErrors#7
// Offset 37
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C TIMEOUTS %3E%3E%3E%3E</FONT><br> "
#END

STR	A3
AND	B19
ONDTMR	T7	TO0	A19

// Rung ProgErrors#8
// Offset 42
#BEGIN FMT_COMMENT 
" "
#END

STR	A4
AND	B20
ONDTMR	T8	TO1	A20

// Rung ProgErrors#9
// Offset 47
STR	A6
AND	B22
ONDTMR	T9	TO3	A22

// Rung ProgErrors#10
// Offset 52
STR	A7
AND	B23
ONDTMR	T15	TO2	A23

// Rung ProgErrors#11
// Offset 57
STR	A2
AND	B18
ONDTMR	T11	TO5	A18

// Rung ProgErrors#12
// Offset 62
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Too many backwashes %3E%3E%3E</FONT>"
#END

STRGE	CT0.Acc	3
AND	B34
DEBOUNCE	D7	10000	A34

// Rung ProgErrors#13
// Offset 71
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Set Error Codes On/Off "
"%3E%3E%3E%3E</FONT><br><FONT tsize=5></FONT> "
#END

STRE	D0	SM_Idle
ORE	D0	SM_Running
ORPD	C62
DUPBOOL
AND	A12
COPY	0x1	"4 0x0 A_ReagntOverFlow D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A9
COPY	0x1	"4 0x0 A_AcidTankEmpty D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A11
COPY	0x1	"4 0x0 A_VoltAlarm D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A5
COPY	0x1	"4 0x0 A_TempAlarm D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A19
COPY	0x1	"4 0x0 A_CondRangeTO D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A20
COPY	0x1	"4 0x0 A_FlowRangeTO D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A22
COPY	0x1	"4 0x0 A_GenNotFullTO D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A18
COPY	0x1	"4 0x0 A_pHRangeTO D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A23
COPY	0x1	"4 0x0 A_GenEmptyTO D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A32
COPY	0x1	"4 0x0 A_StartupTimeout D2 1 0x0 1 C21 1"
POPBOOL
AND	A34
COPY	0x1	"4 0x0 A_TooManyBW D2 1 0x0 1 C21 1"

// Rung ProgErrors#14
// Offset 202
STRND	C62
COPY	0x1	"4 0x0 A_NoAlarm D2 1 0x0 0 C21 1"

// End of Code Block ProgErrors
$PGMEND	ProgErrors

// Beginning of Code Block TaskUltrasonics
$TSK	TaskUltrasonics

// Rung TaskUltrasonics#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br> <br>"
"<FONT tsize=5>TaskUltrasonics</FONT><br><FONT "
"tsize=5></FONT> <br>"
"<FONT tsize=3>This independent task is started and stopped "
"via the Main control loop ladder.  The generator supporting "
"devices are started and stopped here.  The generator flow "
"cell has the galvanostat, ultrasonics, and polarity "
"switching.  To disable a specific device, its values could "
"be preconfigured as zero.</FONT>"
#END

NOP

// Rung TaskUltrasonics#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C ULTRASONICS - INDEPENDENT "
"%3E%3E%3E%3E</FONT><br> <br>If values are above zero, and "
"NOT syncing to polarity, start the interval timer, turn on "
"ultrasonics, then start another timer for duration.  Once "
"all complete, reset and start over.<br> "
#END

STRGT	D5	0
ANDGT	D4	0
ANDN	C24
TMRDOWN	T1	D5

// Rung TaskUltrasonics#3
// Offset 12
STRGT	D5	0
ANDGT	D4	0
ANDN	C24
AND	T1.Done
COPY	0x1	"4 0x0 1 C3 1"
TMRDOWN	T2	D4

// Rung TaskUltrasonics#4
// Offset 29
STRGT	D5	0
ANDGT	D4	0
ANDN	C24
AND	T1.Done
AND	T2.Done
COPY	0x1	"4 0x0 0 C3 1"
RSTT	T1

// Rung TaskUltrasonics#5
// Offset 46
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C ULTRASONICS - SYNCRONIZED "
"%3E%3E%3E%3E</FONT><br> <br>If values are above zero, and "
"syncing to polarity, set values as soon as the polarity "
"switched.  Once that is detected, turn on ultrasonics, "
"start a timer, then reset for next polarity event.<br> "
#END

STRGT	D4	0
AND	C24
ANDPD	C32
COPY	0x1	"4 0x0 1 C37 1 0x0 1 C3 1"

// Rung TaskUltrasonics#6
// Offset 59
STRGT	D4	0
AND	C24
AND	C37
TMRDOWN	T6	D4
AND	T6.Done
COPY	0x1	"4 0x0 0 C37 1 0x0 0 C3 1"

// End of Code Block TaskUltrasonics
$TSKEND	TaskUltrasonics

// Beginning of Code Block TaskPolarity
$TSK	TaskPolarity

// Rung TaskPolarity#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br> <br>"
"<FONT tsize=5>TaskPolarity</FONT><br><FONT tsize=5></FONT> "
"<br><FONT tsize=3>This independent task is started and "
"stopped via the Main control loop ladder.  The generator "
"supporting devices are started and stopped here.  The "
"generator flow cell has the galvanostat, ultrasonics, and "
"polarity switching.  To disable a specific device, its "
"values could be preconfigured as zero.</FONT>"
#END

NOP

// Rung TaskPolarity#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C SINGLE RELAY POLARITY "
"%3E%3E%3E%3E</FONT><br> <br>If polarity duration is above "
"zero (zero is disabled), start polarity duration timer.  If "
"duration is above zero, and when timer finishes, toggle the "
"output bit for polarity reversing of the galvanostat "
"relays.  Also, set variable for setting the beginning of "
"the polarity switching.  This will alert the galvanostat "
"task.  This is for single relay systems."
#END

STRGT	D6	0
ANDN	C32
ANDN	T0.Done
TMR	T0	D6

// Rung TaskPolarity#3
// Offset 9
STRGT	D6	0
ANDN	C32
AND	T0.Done
PONOFF	C4	ST1023
COPY	0x1	"4 0x0 1 C32 1"

// Rung TaskPolarity#4
// Offset 22
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C H-BRIDGE RELAY POLARITY "
"%3E%3E%3E%3E</FONT><br> <br>For H-Bridge relay sets, once "
"main duration timer completes above, turn off galvanostat "
"for a lower power switching of relay coils.  The "
"galvanostat is turned off in its task when the bit "
"CPolaritySwitch is enabled.<br> <br>"
"If not switching, turn on appropriate relays depending upon "
"the polarity value.  This is really only needed on startup "
"as the logic below will handle the actual switch.  However, "
"on first cycle, this rung sets the first relay bank."
#END

STRGT	D6	0
ANDN	C32
DUPBOOL
AND	C4
COPY	0x1	"4 0x0 1 C30 1 0x0 0 C31 1"
POPBOOL
ANDN	C4
COPY	0x1	"4 0x0 0 C30 1 0x0 1 C31 1"

// Rung TaskPolarity#5
// Offset 43
#BEGIN FMT_COMMENT 
" If switching, give time for galvanostat(s) to turn "
"off.<br> "
#END

STRGT	D6	0
AND	C32
TMRDOWN	T3	250

// Rung TaskPolarity#6
// Offset 50
#BEGIN FMT_COMMENT 
"Once timer finishes, turn off relay banks and start "
"another timer to allow time for that to complete.<br> "
#END

STRGT	D6	0
AND	C32
AND	T3.Done
TMRDOWN	T4	250
COPY	0x1	"4 0x0 0 C30 1 0x0 0 C31 1"

// Rung TaskPolarity#7
// Offset 64
#BEGIN FMT_COMMENT 
"Once that timer completes for relays to turn off, switch "
"relays and start another timer for that to complete.<br> "
#END

STRGT	D6	0
AND	C32
AND	T3.Done
AND	T4.Done
DUPBOOL
AND	ST1
TMRDOWN	T5	250
POPBOOL
DUPBOOL
AND	C4
COPY	0x1	"4 0x0 1 C30 1"
POPBOOL
ANDN	C4
COPY	0x1	"4 0x0 1 C31 1"

// Rung TaskPolarity#8
// Offset 90
#BEGIN FMT_COMMENT 
"Once all timers complete, reset the switching variable.  "
"This will tell the galvanostat to turn back on too.<br> "
#END

STRGT	D6	0
AND	C32
AND	T3.Done
AND	T4.Done
AND	T5.Done
COPY	0x1	"4 0x0 0 C32 1"

// End of Code Block TaskPolarity
$TSKEND	TaskPolarity

// Beginning of Code Block ProgDosingPump
$PRGRM	ProgDosingPump

// Rung ProgDosingPump#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><FONT "
"tsize=5></FONT> <br> <br>"
"<FONT tsize=5>ProgDosingPump</FONT><br><FONT "
"tsize=5></FONT> <br>pending"
#END

NOP

// End of Code Block ProgDosingPump
$PGMEND	ProgDosingPump

// Beginning of Code Block ProgWarnings
$PRGRM	ProgWarnings

// Rung ProgWarnings#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br>"
"<FONT tsize=5>ProgWarnings</FONT><FONT tsize=5></FONT><br>"
"This separate independent program loops thru conditions "
"looking for those that may pause other parts of the "
"system.  The reverse condition may also be checked waiting "
"and hoping the condition eventually clears, thus allowing "
"generation to continue.  Or, the interlock variables may be "
"reset assuming interlocks are clear, then reprocess.  The "
"interlocks are not read in particular order, however the "
"final order is from least important to most important so "
"that all conditions can be checked, but leaving the routine "
"with the most important recorded with a final code."
#END

NOP

// Rung ProgWarnings#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Flow In Rate %3E%3E%3E%3E</FONT>"
#END

STRLT	R9	R0
ORGT	R9	R1
AND	B4
DEBOUNCE	D10	D11	A4

// Rung ProgWarnings#3
// Offset 14
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Generator Cell Level "
"%3E%3E%3E%3E</FONT><br>"
#END

STRN	C46
AND	B6
DEBOUNCE	D10	D11	A6

// Rung ProgWarnings#4
// Offset 20
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Generator Cell Level "
"%3E%3E%3E%3E</FONT><br>"
#END

STRN	C10
AND	B7
DEBOUNCE	D10	D11	A7

// Rung ProgWarnings#5
// Offset 26
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Conductivity "
"%3E%3E%3E%3E</FONT><br>"
#END

STRLT	R14	R2
ORGT	R14	R3
AND	B3
DEBOUNCE	D10	D11	A3

// Rung ProgWarnings#6
// Offset 39
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C pH %3E%3E%3E%3E</FONT>"
#END

STRLT	R13	R4
ORGT	R13	R5
AND	B2
DEBOUNCE	D10	D11	A2

// Rung ProgWarnings#7
// Offset 52
#BEGIN FMT_COMMENT 
" <FONT tsize=5>%3C%3C%3C%3C Set Interlock Codes ON/OFF "
"%3E%3E%3E%3E</FONT> <br> "
#END

STRE	D0	SM_Running
ORE	D0	SM_Idle
DUPBOOL
AND	A2
COPY	0x1	"4 0x0 A_pHRange D1 1 0x0 1 C22 1"
POPBOOL
DUPBOOL
AND	A3
COPY	0x1	"4 0x0 A_CondRange D1 1 0x0 1 C22 1"
POPBOOL
DUPBOOL
AND	A6
COPY	0x1	"4 0x0 A_GenNotFull D1 1 0x0 1 C22 1"
POPBOOL
DUPBOOL
AND	A4
COPY	0x1	"4 0x0 A_FlowRange D1 1 0x0 1 C22 1"
POPBOOL
AND	A7
COPY	0x1	"4 0x0 A_GenEmpty D1 1 0x0 1 C22 1"

// Rung ProgWarnings#8
// Offset 115
STRN	A2
ANDN	A3
ANDN	A6
ANDN	A7
OUT	C63
COPY	0x1	"4 0x0 A_NoAlarm D1 1 0x0 0 C22 1"

// Rung ProgWarnings#9
// Offset 128
STRNE	D0	SM_Running
ANDNE	D0	SM_Idle
COPY	0x1	"4 0x0 A_NoAlarm D1 1 0x0 0 C22 1"

// Rung ProgWarnings#10
// Offset 146
NOP

// Rung ProgWarnings#11
// Offset 147
NOP

// End of Code Block ProgWarnings
$PGMEND	ProgWarnings

// Beginning of Code Block $t1Second
$TSK	$t1Second

// Rung $t1Second#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br><FONT tsize=5>$t1Second</FONT><br>"
"<FONT tsize=5></FONT> <br>This ladder task runs every "
"second after it completes.  In other words, it doesn't run "
"exactly every second, but exactly one second each time "
"after it finishes, regardless of how short or long it "
"executes.  This should be enough accuracy for total "
"calculations."
#END

NOP

// Rung $t1Second#2
// Offset 1
#BEGIN FMT_COMMENT 
"Calculate Ah and KWh and Asec"
#END

STR	ST1
AND	C2
AND	C5
MATH	TT1	"TT1 + (((R18 * R19) / 3600) / 1000)"
MATH	TT0	"TT0 + (R18 / 3600)"
MATH	TT4	"TT4 + R18"
MATH	TT5	"TT5 + (1 / 3600)"
MATH	TT6	"TT6 + 1"

// Rung $t1Second#3
// Offset 54
#BEGIN FMT_COMMENT 
"Calculate flow volume"
#END

STR	ST1
AND	C2
MATH	TT3	"TT3 + (R9 / 60)"

// Rung $t1Second#4
// Offset 66
#BEGIN FMT_COMMENT 
"Calculate the current tank level and percentage available."
#END

STR	ST1
MATH	R30	"(F11 - R28) * F12"
MATH	TT7	"(R30 / F13) * 100"

// End of Code Block $t1Second
$TSKEND	$t1Second

// Beginning of Code Block TaskAcidPumpPID
$TSK	TaskAcidPumpPID

// Rung TaskAcidPumpPID#1
// Offset 0
STR	ST1
STR	ST2
STR	ST2
RAMPSOAK	RS_0	AcidPumpCtlPID.SP	1	"4 1 F10 0 0"

// Rung TaskAcidPumpPID#2
// Offset 10
STR	ST1
FILTER	1	R13	R29

// Rung TaskAcidPumpPID#3
// Offset 14
STR	ST1
PID	AcidPumpCtlPID	0x62	R29	SC48	SC49	SC50	SC51	""""""	6553	32767	R10	DST511

// End of Code Block TaskAcidPumpPID
$TSKEND	TaskAcidPumpPID

// Beginning of Code Block TaskLoadWebPages
$TSK	TaskLoadWebPages

// Rung TaskLoadWebPages#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>Aqua Metrology Systems SafeGuard "
"H2O</FONT><br> <br><FONT tsize=5>TaskLoadWebPages</FONT><br>"
"<FONT tsize=5></FONT> <br><FONT tsize=3>When the PLC "
"restarts, the RAM file system gets cleared out, which holds "
"the user pages for the web server.  Upon startup, during "
"the top scan, and using a status holding bit, this task is "
"enabled.  By recreating the subdirectory and copying the "
"files from the SD file system back to the RAM file "
"system.</FONT>"
#END

NOP

// Rung TaskLoadWebPages#2
// Offset 1
STR	C38
FILENEWFLDR	@RamFS	"""up"""	0x0	SE0	SE1
TMRDOWN	T13	1000

// Rung TaskLoadWebPages#3
// Offset 12
STR	C38
AND	T13.Done
FILECOPY	@SDCardFS	"""\up\SGH2O_PLC.html"""	@RamFS	"""\up\SGH2O_PLC.html"""	0x0	0x0	SE2	SE3
AND	SE2
FILECOPY	@SDCardFS	"""\up\jquery.min.js"""	@RamFS	"""\up\jquery.min.js"""	0x0	0x0	SE4	SE5
AND	SE4
COPY	0x1	"4 0x0 0 C38 1"

// End of Code Block TaskLoadWebPages
$TSKEND	TaskLoadWebPages

// Beginning of Code Block TaskPropValvePID
$TSK	TaskPropValvePID

// Rung TaskPropValvePID#1
// Offset 0
STR	ST1
STR	ST2
STR	ST2
RAMPSOAK	RS_1	PropValveCtlPID.SP	1	"4 1 F15 0 0"

// Rung TaskPropValvePID#2
// Offset 10
STR	ST1
FILTER	1	R9	R32

// Rung TaskPropValvePID#3
// Offset 14
STR	ST1
PID	PropValveCtlPID	0x60	R32	SC52	SC53	SC54	SC55	""""""	6553	32767	R31	DST511

// End of Code Block TaskPropValvePID
$TSKEND	TaskPropValvePID

// Beginning of Code Block TaskConductvyPID
$TSK	TaskConductvyPID

// Rung TaskConductvyPID#1
// Offset 0
STR	ST1
STR	ST2
STR	ST2
RAMPSOAK	RS_2	ConductvyCtlPID.SP	1	"4 1 F14 0 0"

// Rung TaskConductvyPID#2
// Offset 10
STR	ST1
FILTER	1	R14	R33

// Rung TaskConductvyPID#3
// Offset 14
STR	ST1
PID	ConductvyCtlPID	0x60	R33	SC56	SC57	SC58	SC59	""""""	6553	32767	R10	DST511

// End of Code Block TaskConductvyPID
$TSKEND	TaskConductvyPID

// Beginning of Code Block TaskRoutineTest
$TSK	TaskRoutineTest

// Rung TaskRoutineTest#1
// Offset 0
STRPD	MC401
COPY	0x1	"4 0x0 1 MC402 1 0x0 MHR201 R37 1 0x0 0 MC404 1"

// Rung TaskRoutineTest#2
// Offset 10
STRN	MC403
ANDN	MC404
DUPBOOL
ANDE	R37	4
RUN	ProgRinsing
POPBOOL
ANDE	R37	1
RUN	ProgDraining

// Rung TaskRoutineTest#3
// Offset 26
STR	MC403
ANDN	MC404
DUPBOOL
ANDE	R37	4
RUN	ProgAbortRinsing
POPBOOL
ANDE	R37	1
RUN	ProgAbortDrain

// Rung TaskRoutineTest#4
// Offset 42
#BEGIN FMT_COMMENT 
"<B><I>Handshake Step 4 (Optional)</I>*</B><br>"
"<I>The GUI may send a request to stop the current routine. "
"This action is immediate but optional.</I><br>"
"<!-- notionvc: 8f5b29c4-3e89-4d80-9e0b-ba815f8c4503 "
"--><B></B><br><B>Handshake Step 5</B><br>"
"<I>The PLC sends the End signal. This action is immediate "
"for the PLC. The GUI waits for the PLC to signal the end of "
"the routine, either automatically or upon receiving an "
"abort request. This action requires waiting.</I>"
#END

STR	MC403
ANDN	MC405
COPY	0x1	"4 0x0 1 MC404 1"

// Rung TaskRoutineTest#5
// Offset 49
#BEGIN FMT_COMMENT 
"<B>Handshake Step 6</B><br>"
"<I>The GUI acknowledges the end of the routine. This action "
"is immediate. The PLC reads the acknowledgement via EndACK "
"and sets EndCMD to 0.</I>"
#END

STR	MC404
AND	MC405
COPY	0x1	"4 0x0 0 MC404 1"

// Rung TaskRoutineTest#6
// Offset 56
#BEGIN FMT_COMMENT 
"<B>Step 7</B><br>"
"<I>The GUI sees that the PLC sets EndCMD to 0 and sets "
"EndAck to 0. The PLC waits for the GUI to set StartCMD to 0 "
"and then sets StartACK to 0.</I>"
#END

STRN	MC401
COPY	0x1	"4 0x0 0 MC402 1"

// End of Code Block TaskRoutineTest
$TSKEND	TaskRoutineTest

// Beginning of Code Block TaskUpdPlatePerc
$TSK	TaskUpdPlatePerc

// Rung TaskUpdPlatePerc#1
// Offset 0
#BEGIN FMT_COMMENT 
"Consumption ratio per second"
#END

STRPD	ST4
MATH	R38	"(1.78 * F0) / 3600.0"

// Rung TaskUpdPlatePerc#2
// Offset 14
#BEGIN FMT_COMMENT 
"Total mass consumed of outter plates"
#END

STRPD	ST4
ANDE	SM_Running	D0
MATH	TT8	"MIN(TT8 + R38, F18)"

// Rung TaskUpdPlatePerc#3
// Offset 31
#BEGIN FMT_COMMENT 
"Outter plates %25 left"
#END

STRPD	ST4
MATH	TT9	"(100 * (F18 - TT8)) / F18"

// Rung TaskUpdPlatePerc#4
// Offset 45
#BEGIN FMT_COMMENT 
"Total mass consumed of inner plates. Consumption ratio is "
"2 times as large"
#END

STRPD	ST4
ANDE	SM_Running	D0
MATH	TT10	"MIN(TT10 + (2 * R38), F18)"

// Rung TaskUpdPlatePerc#5
// Offset 64
#BEGIN FMT_COMMENT 
"Inner plates %25 left"
#END

STRPD	ST4
MATH	TT11	"(100 * (F18 - TT10)) / F18"

// End of Code Block TaskUpdPlatePerc
$TSKEND	TaskUpdPlatePerc

// Beginning of Code Block ProgNotices
$PRGRM	ProgNotices

// Rung ProgNotices#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Reagent Tank Full Condition %3E%3E%3E%3E</FONT>"
#END

STRGE	TT7	F19
STRE	D0	SM_Starting
ANDGE	TT7	F21
ORSTR
AND	B27
DEBOUNCE	D16	32768	A27

// Rung ProgNotices#2
// Offset 19
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Reagent Tank Empty Condition "
"%3E%3E%3E</FONT><br>Ideally this should be a negated "
"debounce but it doesn't exist."
#END

STRLE	TT7	F20
AND	B27
COPY	0x1	"4 0x0 0 A27 1"

// Rung ProgNotices#3
// Offset 29
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Inner Plates Fully Depleted %3E%3E</FONT>"
#END

STRLE	TT11	0.05
DEBOUNCE	D16	10000	A31

// Rung ProgNotices#4
// Offset 38
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Outer Plates Fully Depleted %3E%3E%3E</FONT>"
#END

STRLE	TT9	0.05
DEBOUNCE	D16	10000	A16

// Rung ProgNotices#5
// Offset 47
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Set Alarm Code And Alarm Active "
"Bit %3E%3E</FONT>"
#END

STR	C2
DUPBOOL
AND	A27
COPY	0x1	"4 0x0 N_ReagTankFull D18 1 0x0 1 C58 1"
POPBOOL
DUPBOOL
AND	A31
COPY	0x1	"4 0x0 N_InPlates D18 1 0x0 1 C58 1"
POPBOOL
DUPBOOL
AND	A16
COPY	0x1	"4 0x0 N_OutPlates D18 1 0x0 1 C58 1"
POPBOOL
ANDN	A27
ANDN	A16
ANDN	A31
COPY	0x1	"4 0x0 A_NoAlarm D18 1 0x0 0 C58 1"

// Rung ProgNotices#6
// Offset 92
STRN	C2
COPY	0x1	"4 0x0 A_NoAlarm D18 1 0x0 0 C58 1"

// End of Code Block ProgNotices
$PGMEND	ProgNotices

// Beginning of Code Block ProgStateMachine
$PRGRM	ProgStateMachine

// Rung ProgStateMachine#1
// Offset 0
#BEGIN FMT_COMMENT 
"System is On if it is remotely enabled and locally enabled"
#END

STR	C0
AND	C1
ANDN	MC8
OUT	C2

// Rung ProgStateMachine#2
// Offset 4
STRE	D0	SM_Stopped
AND	C2
COPY	0x1	"4 0x0 SM_Starting D0 1"

// Rung ProgStateMachine#3
// Offset 17
STRE	D0	SM_Starting
DUPBOOL
AND	ST1
TMRDOWN	T17	180000
POPBOOL
DUPBOOL
AND	A32
COPY	0x1	"4 0x0 SM_Halted D0 1"
POPBOOL
ANDN	A32
DUPBOOL
ANDE	D18	A_NoAlarm
AND	C63
TMRDOWN	T14	10000
AND	T14.Done
COPY	0x1	"4 0x0 SM_Running D0 1"
POPBOOL
ANDNE	D18	A_NoAlarm
COPY	0x1	"4 0x0 SM_Standby D0 1"

// Rung ProgStateMachine#4
// Offset 69
STRE	D0	SM_Running
DUPBOOL
ANDE	D2	A_NoAlarm
DUPBOOL
ANDE	D18	A_NoAlarm
ANDNE	D1	A_NoAlarm
COPY	0x1	"4 0x0 SM_Idle D0 1"
POPBOOL
ANDNE	D18	A_NoAlarm
COPY	0x1	"4 0x0 SM_Standby D0 1"
POPBOOL
ANDNE	D2	A_NoAlarm
COPY	0x1	"4 0x0 SM_Halted D0 1"

// Rung ProgStateMachine#5
// Offset 124
STRE	D0	SM_Idle
DUPBOOL
ANDE	D2	A_NoAlarm
DUPBOOL
ANDNE	D18	A_NoAlarm
COPY	0x1	"4 0x0 SM_Standby D0 1"
POPBOOL
ANDE	D18	A_NoAlarm
ANDE	D1	A_NoAlarm
COPY	0x1	"4 0x0 SM_Running D0 1"
POPBOOL
ANDNE	D2	A_NoAlarm
COPY	0x1	"4 0x0 SM_Halted D0 1"

// Rung ProgStateMachine#6
// Offset 179
STRE	D0	SM_Standby
DUPBOOL
ANDN	MC404
COPY	0x1	"4 0x0 1 C61 1"
POPBOOL
AND	MC404
COPY	0x1	"4 0x0 0 C61 1"
ANDE	D18	A_NoAlarm
COPY	0x1	"4 0x0 SM_Starting D0 1 0x0 0 MC404 1"

// Rung ProgStateMachine#7
// Offset 211
STRE	D0	SM_Stopping
DUPBOOL
ANDN	MC404
COPY	0x1	"4 0x0 1 C61 1"
POPBOOL
AND	MC404
DUPBOOL
AND	C0
COPY	0x1	"4 0x0 0 MC404 1 0x0 0 C61 1 0x0 SM_Stopped D0 1"
POPBOOL
ANDN	C0
COPY	0x1	"4 0x0 0 MC404 1 0x0 0 C61 1 0x0 SM_RemoteDisable D0 1"

// Rung ProgStateMachine#8
// Offset 247
STRE	D0	SM_RemoteDisable
AND	C0
DUPBOOL
ANDE	D2	A_NoAlarm
COPY	0x1	"4 0x0 SM_Stopped D0 1"
POPBOOL
ANDNE	D2	A_NoAlarm
COPY	0x1	"4 0x0 SM_Halted D0 1"

// Rung ProgStateMachine#9
// Offset 279
STRE	D0	SM_Halted
DUPBOOL
ANDN	MC404
COPY	0x1	"4 0x0 1 C61 1"
POPBOOL
AND	MC404
COPY	0x1	"4 0x0 0 C61 1"
AND	MC9
COPY	0x1	"4 0x0 SM_Stopped D0 1 0x0 0 MC404 1 0x0 0 MC9 1"

// Rung ProgStateMachine#10
// Offset 308
STRN	C2
DUPBOOL
ANDNE	D0	SM_Stopped
ANDNE	D0	SM_Halted
ANDNE	D0	SM_RemoteDisable
COPY	0x1	"4 0x0 SM_Stopping D0 1"
POPBOOL
STRE	D0	SM_Stopped
ORE	D0	SM_Halted
ANDSTR
ANDN	C0
COPY	0x1	"4 0x0 SM_RemoteDisable D0 1"

// Rung ProgStateMachine#11
// Offset 352
STRE	D0	SM_Halted
OUT	C62

// Rung ProgStateMachine#12
// Offset 358
STRE	D0	SM_Starting
ORE	D0	SM_Running
ORE	D0	SM_Idle
OUT	C60

// Rung ProgStateMachine#13
// Offset 374
STR	ST1
COPY	0x1	"4 0x0 D0 MHR101 1"

// End of Code Block ProgStateMachine
$PGMEND	ProgStateMachine

// Beginning of Code Block ProgDraining
$PRGRM	ProgDraining

// Rung ProgDraining#1
// Offset 0
#BEGIN FMT_COMMENT 
"<B>Step 5</B><br>"
"<I>The PLC sends the End signal. This action is immediate "
"for the PLC. The GUI waits for the PLC to signal the end of "
"the routine, either automatically or upon receiving an "
"abort request. This action requires waiting.</I>"
#END

STR	ST1
COPY	0x1	"4 0x0 1 MHR202 1"

// Rung ProgDraining#2
// Offset 7
STR	C10
COPY	0x1	"4 0x0 1 C7 1"

// Rung ProgDraining#3
// Offset 13
STRN	C10
COPY	0x1	"4 0x0 0 C7 1"

// Rung ProgDraining#4
// Offset 19
STRN	C10
ANDN	C7
COPY	0x1	"4 0x0 1 MC404 1"

// Rung ProgDraining#5
// Offset 26
STR	MC404
EXIT

// End of Code Block ProgDraining
$PGMEND	ProgDraining

// Beginning of Code Block ProgAbortDrain
$PRGRM	ProgAbortDrain

// Rung ProgAbortDrain#1
// Offset 0
STR	ST1
COPY	0x1	"4 0x0 0 C7 1"

// Rung ProgAbortDrain#2
// Offset 6
STR	C7
COPY	0x1	"4 0x0 1 MC404 1"

// Rung ProgAbortDrain#3
// Offset 12
STR	MC404
EXIT

// End of Code Block ProgAbortDrain
$PGMEND	ProgAbortDrain

// Beginning of Code Block ProgAbortRinsing
$PRGRM	ProgAbortRinsing

// Rung ProgAbortRinsing#1
// Offset 0
STR	ST1
COPY	0x1	"4 0x0 1 MC404 1"

// Rung ProgAbortRinsing#2
// Offset 6
STR	MC404
EXIT

// End of Code Block ProgAbortRinsing
$PGMEND	ProgAbortRinsing

// Beginning of Code Block ProgRinsing
$PRGRM	ProgRinsing

// Rung ProgRinsing#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><FONT "
"tsize=5></FONT> <br> <br>"
"<FONT tsize=5>TaskRinsing</FONT><br><FONT tsize=5></FONT> "
"<br>pending"
#END

STR	ST1
COPY	0x1	"4 0x0 1 MHR202 1"

// Rung ProgRinsing#2
// Offset 7
STRN	MC404
COPY	0x1	"4 0x0 1 C16 1 0x0 1 C49 1"
ENTASK	TaskPropValvePID	0x0	0	0x1

// Rung ProgRinsing#3
// Offset 18
STR	X2
AND	C16
AND	C49
COPY	0x1	"4 0x0 1 C3 1"

// Rung ProgRinsing#4
// Offset 26
STR	C3
TMRDOWN	T16	10000

// Rung ProgRinsing#5
// Offset 29
STR	T16.Done
COPY	0x1	"4 0x0 0 C16 1 0x0 0 C49 1 0x0 0 C3 1"
HALT	TaskPropValvePID

// Rung ProgRinsing#6
// Offset 38
STR	T16.Done
ANDN	C16
COPY	0x1	"4 0x0 1 MC404 1"

// End of Code Block ProgRinsing
$PGMEND	ProgRinsing

// Beginning of Code Block TaskResetPlates
$TSK	TaskResetPlates

// Rung TaskResetPlates#1
// Offset 0
#BEGIN FMT_COMMENT 
"Reset Media Event"
#END

STR	C29
ANDPD	MC6
MOVE	0	TT10
MOVE	0	TT8
COPY	0x1	"4 0x0 0 TT0 1 0x0 0 TT4 1 0x0 0 TT1 1 0x0 0 TT6 1 0x0 0 TT5 1"
COPY	0x1	"4 0x0 0 MC6 1"

// Rung TaskResetPlates#2
// Offset 26
#BEGIN FMT_COMMENT 
"Reset Media Event"
#END

STR	C29
ANDPD	MC7
MOVE	0	TT10
COPY	0x1	"4 0x0 0 TT0 1 0x0 0 TT4 1 0x0 0 TT1 1 0x0 0 TT6 1 0x0 0 TT5 1"
COPY	0x1	"4 0x0 0 MC7 1"

// End of Code Block TaskResetPlates
$TSKEND	TaskResetPlates

// Beginning of Code Block TaskFilterError
$TSK	TaskFilterError

// Rung TaskFilterError#1
// Offset 0
STR	ST3
STR	C100
CNT	CT1	D100

// Rung TaskFilterError#2
// Offset 4
STRE	CT1.Acc	D20
OUT	C100

// Rung TaskFilterError#3
// Offset 9
STR	C64
STR	C100
ANDGT	CT0.Acc	0
STRPD	ST1
UDC	CT0	DST511	DST511

// Rung TaskFilterError#4
// Offset 20
NOP

// End of Code Block TaskFilterError
$TSKEND	TaskFilterError

// Beginning of Code Block $tBottomOfScan
$TSK	$tBottomOfScan

// Rung $tBottomOfScan#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br>"
"<FONT tsize=5>$tBottomOfScan</FONT><br><FONT "
"tsize=5></FONT> <br>"
"This is the last ladder task after the main ladder.  By "
"taking the necessary working memory variables and writing "
"them to the physical outputs and/or Modbus and/or any other "
"device requiring updates."
#END

NOP

// Rung $tBottomOfScan#2
// Offset 1
#BEGIN FMT_COMMENT 
"Write local memory bit variables (C) into digital outputs (Y)."
#END

STR	ST1
MAPIO	"2 C2 Y0 C21 Y1 C22 Y2 C23 Y3 C6 Y8 C7 Y7 C8 Y6 C17 Y11 C18 Y12"

// Rung $tBottomOfScan#3
// Offset 23
#BEGIN FMT_COMMENT 
"Set the inlet valve on/off only if enabled."
#END

STR	ST1
DUPBOOL
AND	C48
MAPIO	"2 C16 Y10"
POPBOOL
ANDN	C48
COPY	0x1	"4 0x0 0 Y10 1"

// Rung $tBottomOfScan#4
// Offset 38
#BEGIN FMT_COMMENT 
"Set green button LED"
#END

STR	ST1
AND	C2
OUT	Y13

// Rung $tBottomOfScan#5
// Offset 41
#BEGIN FMT_COMMENT 
"Set red button LED"
#END

STR	ST1
ANDN	C2
OUT	Y14

// Rung $tBottomOfScan#6
// Offset 44
#BEGIN FMT_COMMENT 
"Set galvanostat output if enabled"
#END

STR	ST1
AND	C41
SCALE	R8	SC36	SC37	SC38	SC39	WY0
MAPIO	"2 C5 Y28"

// Rung $tBottomOfScan#7
// Offset 57
#BEGIN FMT_COMMENT 
"Set galvanostat output enable for 10V models."
#END

STR	ST1
AND	C41
DUPBOOL
AND	C5
COPY	0x1	"4 0x0 0 WY5 1"
POPBOOL
ANDN	C5
COPY	0x1	"4 0x0 32767 WY5 1"

// Rung $tBottomOfScan#8
// Offset 75
#BEGIN FMT_COMMENT 
"Set ultrasonic output if enabled"
#END

STR	ST1
AND	C43
MAPIO	"2 C3 Y24"

// Rung $tBottomOfScan#9
// Offset 82
#BEGIN FMT_COMMENT 
"Set polarity output if enabled"
#END

STR	ST1
AND	C42
MAPIO	"2 C4 Y5 C30 Y16 C30 Y17 C31 Y20 C31 Y21"

// Rung $tBottomOfScan#10
// Offset 97
#BEGIN FMT_COMMENT 
"Set acid pump rate from PID result via pH."
#END

STR	ST1
DUPBOOL
AND	C34
AND	C50
COPY	0x1	"4 0x0 R10 WY1 1"
POPBOOL
ANDN	C34
COPY	0x1	"4 0x0 0 WY1 1"

// Rung $tBottomOfScan#11
// Offset 115
#BEGIN FMT_COMMENT 
"Set proportional valve rate from PID result via flow rate."
#END

STR	ST1
DUPBOOL
AND	C49
AND	C51
COPY	0x1	"4 0x0 R31 WY4 1"
POPBOOL
ANDN	C49
COPY	0x1	"4 0x0 0 WY4 1"

// Rung $tBottomOfScan#12
// Offset 133
#BEGIN FMT_COMMENT 
"Set acid pump rate from PID result via conductivity."
#END

STR	ST1
DUPBOOL
AND	C34
AND	C52
COPY	0x1	"4 0x0 R10 WY1 1"
POPBOOL
ANDN	C34
COPY	0x1	"4 0x0 0 WY1 1"

// Rung $tBottomOfScan#13
// Offset 151
#BEGIN FMT_COMMENT 
"Set modbus alarm bits for UI"
#END

STR	C29
DUPBOOL
ANDNE	D18	A_NoAlarm
MAPIO	"2 A27 MC127 A31 MC131 A16 MC116"
POPBOOL
ANDE	D18	A_NoAlarm
COPY	0x0	"4 0x0 0 MC127 1 0x0 0 MC131 1 0x0 0 MC116 1"

// Rung $tBottomOfScan#14
// Offset 181
#BEGIN FMT_COMMENT 
"Set modbus alarm bits for UI"
#END

STR	C29
DUPBOOL
ANDNE	D1	A_NoAlarm
MAPIO	"2 A2 MC102 A3 MC103 A4 MC104 A6 MC106 A7 MC107"
POPBOOL
ANDE	D1	A_NoAlarm
COPY	0x1	"4 0x0 0 MC101 1 0x0 0 MC102 1 0x0 0 MC103 1 0x0 0 MC104 1 0x0 0 MC106 1 0x0 0 MC107 1"

// Rung $tBottomOfScan#15
// Offset 217
#BEGIN FMT_COMMENT 
"Set modbus alarm bits for UI"
#END

STR	C29
DUPBOOL
ANDNE	D3	A_NoAlarm
MAPIO	"2 A8 MC108 A10 MC110 A15 MC115 A21 MC121 A30 MC130 A33 MC133"
POPBOOL
ANDE	D3	A_NoAlarm
COPY	0x1	"4 0x0 0 MC108 1 0x0 0 MC110 1 0x0 0 MC115 1 0x0 0 MC121 1 0x0 0 MC130 1 0x0 0 MC133 1"

// Rung $tBottomOfScan#16
// Offset 255
#BEGIN FMT_COMMENT 
"Set modbus alarm bits for UI"
#END

STR	C29
DUPBOOL
ANDNE	D2	A_NoAlarm
MAPIO	"2 A5 MC105 A9 MC109 A11 MC111 A12 MC112 A16 MC116 A17 MC117 A18 MC118 A19 MC119 A20 MC120 A22 MC122 A23 MC123 A32 MC132 A34 MC134"
POPBOOL
ANDE	D2	A_NoAlarm
COPY	0x1	"4 0x0 0 MC105 1 0x0 0 MC109 1 0x0 0 MC111 1 0x0 0 MC112 1 0x0 0 MC116 1 0x0 0 MC117 1 0x0 0 MC118 1 0x0 0 MC119 1 0x0 0 MC120 1 0x0 0 MC122 1 0x0 0 MC123 1 0x0 0 MC132 1 0x0 0 MC134 1"

// Rung $tBottomOfScan#17
// Offset 314
#BEGIN FMT_COMMENT 
"Set modbus sensor bits for UI"
#END

STR	C29
MAPIO	"2 C53 MC212 C54 MC213 C9 MC214 C46 MC215 C10 MC216"

// Rung $tBottomOfScan#18
// Offset 328
#BEGIN FMT_COMMENT 
"Set modbus sensor gauge values for UI"
#END

STR	C29
MATH	MHR1	"ROUND(R19 * 100)"
MATH	MHR2	"ROUND(R18 * 100)"
MATH	MHR3	"ROUND(R13 * 100)"
MATH	MHR4	"ROUND(R9 * 100)"
MATH	MHR6	"ROUND(R16 * 100)"
MATH	MHR7	"ROUND(R17 * 100)"
MATH	MHR8	"ROUND(TT7 * 100)"
MATH	MHR9	"ROUND(R14 * 100)"
MATH	MHR10	"ROUND(TT9 * 100)"
MATH	MHR11	"ROUND(TT11 * 100)"

// End of Code Block $tBottomOfScan
$TSKEND	$tBottomOfScan

#BEGIN ELEMENT_DOC
"X0","FLAGS = REST_READONLY","XRemoteEnable","Input / Bit","Remote enable"
"X1","FLAGS = REST_READONLY","XRemoteStart","",""
"X2","FLAGS =","XGenLevelHiOn","Input / Bit","generator flow cell level sensor hi"
"X4","FLAGS =","XReagntLoLoOn","Input / Bit","reagent tank level sensor lo-lo"
"X5","FLAGS =","XReagntLoOn","Input / Bit","reagent tank level sensor lo"
"X6","FLAGS =","XReagntHiOn","Input / Bit","reagent tank level sensor hi"
"X7","FLAGS =","XReagntHiHiOn","Input / Bit","reagent tank level sensor hi-hi"
"X8","FLAGS =","XGenLevelLoOn","Input / Bit","vent overflow level sensor hi"
"X10","FLAGS =","XGreenButton","Input / Bit","push button to start machine or reflect started"
"X11","FLAGS =","XRedButton","Input / Bit","push button to stop machine or reflect stopped"
"X12","FLAGS = REST_READONLY","XFilter1Backwash","",""
"X13","FLAGS = REST_READONLY","XFilter2Backwash","",""
"X14","FLAGS = REST_READONLY","XFilter3Backwash","",""
"X15","FLAGS = REST_READONLY","XFilter4Backwash","",""
"Y0","FLAGS =","YSystemOn","Output / Bit","status signal for system running"
"Y1","FLAGS =","YErrorOn","Output / Bit","status signal for errors exist"
"Y2","FLAGS =","YWarnOn","Output / Bit","status signal for warnings exist"
"Y3","FLAGS =","YInfoOn","Output / Bit","status signal for info exist"
"Y5","FLAGS =","YPolarityOn","Output / Bit","polarity on/off"
"Y6","FLAGS =","YReagntPumpOn","Output / Bit","reagent pump on/off"
"Y7","FLAGS =","YDrainPumpOn","Output / Bit","drain pump on/off"
"Y10","FLAGS =","YInletValveOn","Output / Bit","inlet valve on/off"
"Y11","FLAGS =","YGenValveOn","Output / Bit","generator cell drain valve on/off"
"Y13","FLAGS =","YGreenButtonOn","Output / Bit","panel button LED to reflect running"
"Y14","FLAGS =","YRedButtonOn","Output / Bit","panel button LED to reflect stopped"
"Y16","FLAGS =","YPolarity1OnR1","Output / Bit","h-bridge polarity position 1 on/off relay 1"
"Y17","FLAGS =","YPolarity1OnR3","Output / Bit","h-bridge polarity position 1 on/off relay 3"
"Y20","FLAGS =","YPolarity2OnR2","Output / Bit","h-bridge polarity position 2 on/off relay 2"
"Y21","FLAGS =","YPolarity2OnR4","Output / Bit","h-bridge polarity position 2 on/off relay 4"
"Y24","FLAGS =","YUltrasonicsOn","Output / Bit","ultrasonics on/off"
"Y28","FLAGS =","YGalvanostatOn","Output / Bit","galvanostat on/off"
"WX1","FLAGS =","WXTempOutlet","Input / SWord","raw temperature outlet value (see module/scale for ranges)"
"WX2","FLAGS =","WXTankLevel","Input / SWord","raw level sensor value (see module/scale for ranges)"
"WX3","FLAGS =","WXpH","Input / SWord","raw pH sensor value (see module/scale for ranges)"
"WX4","FLAGS =","WXConductivity","Input / SWord","raw conductivity sensor value (see module/scale for ranges)"
"WX20","FLAGS =","WXFlowInRate","Input / SWord","raw flow rate inlet value (see module/scale for ranges)"
"WX21","FLAGS =","WXTempInlet","Input / SWord","raw temperature of inlet value (see module/scale for ranges)"
"WX22","FLAGS =","WXVoltFeedback","Input / SWord","raw voltage feedback from galvanostat (see module/scale for ranges)"
"WX23","FLAGS =","WXAmpFeedback","Input / SWord","raw galvanostat amperage feedback value (see module/scale for ranges)"
"WY0","FLAGS =","WYAmperageOut","Output / SWord","scaled galvanostat out (see module/scale for ranges)"
"WY1","FLAGS =","WYAcidPumpRate","Output / SWord","scaled acid pump rate (see module/scale for ranges)"
"WY4","FLAGS =","WYPropValve","Output / SWord","scaled proportional valve out (see module/scale for ranges)"
"WY5","FLAGS =","WYGalvanostatOn","Output / SWord","galvanostat on/off for models requiring full 10V signal"
"C0","FLAGS = REST_READONLY","CRemoteEnable","Working / Bit","remote signal ok to start"
"C1","FLAGS =","COnTrigger","Working / Bit","local signal ok to start"
"C2","FLAGS =","CSystemOn","Working / Bit","system is on"
"C3","FLAGS =","CUltrasonicsOn","Working / Bit","ultrasonics start/stop"
"C4","FLAGS =","CPolarityOn","Working / Bit","polarity start/stop"
"C5","FLAGS =","CGalvanostatOn","Working / Bit","galvanostat start/stop"
"C6","FLAGS =","CAcidPumpOn","Working / Bit","acid pump start/stop"
"C7","FLAGS =","CDrainPumpOn","Working / Bit","drain pump start/stop"
"C8","FLAGS =","CReagntPumpOn","Working / Bit","reagent pump start/stop"
"C9","FLAGS =","CAcidLevelLoOn","Working / Bit","acid tank level sensor lo"
"C10","FLAGS =","CGenLevelLo","Working / Bit","generator cell level sensor lo"
"C11","FLAGS =","CReagntLoLoOn","Working / Bit","reagent tank level sensor lo-lo"
"C12","FLAGS =","CReagntLoOn","Working / Bit","reagent tank level sensor lo"
"C13","FLAGS =","CReagntHiOn","Working / Bit","reagent tank level sensor hi"
"C14","FLAGS =","CReagntHiHiOn","Working / Bit","reagent tank level sensor hi-hi"
"C15","FLAGS =","CVentLevelOn","Working / Bit","vent overflow level sensor hi"
"C16","FLAGS =","CInletValveOn","Working / Bit","inlet valve"
"C17","FLAGS =","CGenValveOn","Working / Bit","generator cell drain valve"
"C18","FLAGS =","CReagntValveOn","Working / Bit","reagent tank drain valve"
"C19","FLAGS =","CFileLogSuccess","Working / Bit","file log success"
"C20","FLAGS =","CFileLogError","Working / Bit","file log error"
"C21","FLAGS =","CErrorOn","Working / Bit","error events exist"
"C22","FLAGS =","CWarnOn","Working / Bit","warning events exist"
"C23","FLAGS =","CInfoOn","Working / Bit","info events exist"
"C24","FLAGS =","CPolaritySyncUS","Config / Bit","ultrasonics synced with polarity switch"
"C25","FLAGS =","CAcidLevelLoLoOn","Working / Bit","acid tank level sensor lo-lo"
"C26","FLAGS =","CEnableErrors","Config / Bit","run with/without error checking"
"C27","FLAGS = REST_READONLY","CEnableWarnings","Config / Bit","run with/without warnings checking"
"C28","FLAGS = REST_READONLY","CEnableInfo","Config / Bit","run with/without info checking"
"C29","FLAGS =","CEnableModbus","Working / Bit","run with/without Modbus calls"
"C30","FLAGS =","CPolarity1On","Working / Bit","h-bridge polarity position 1"
"C31","FLAGS =","CPolarity2On","Working / Bit","h-bridge polarity position 2"
"C32","FLAGS =","CPolaritySwitch","Working / Bit","boolean during polarity h bridge switching"
"C33","FLAGS =","CDemoMode","Config / Bit","turn demo valves on/off"
"C34","FLAGS =","CEnableAcidPump","Config / Bit","run with/without acid pump"
"C35","FLAGS =","CGreenPressed","Working / Bit","stores if green button pressed last"
"C36","FLAGS =","CRedPressed","Working / Bit","stores if red button pressed last"
"C37","FLAGS =","CPolSyncStart","Working / Bit","true for the duration of ultrasonics to sync with polarity"
"C38","FLAGS =","CLoadWebPages","on/off bit","true to refreshing web user pages from SD card to RAM"
"C39","FLAGS =","CEnableRandom","Config / Bit","run with/without random sensor values"
"C40","FLAGS =","CHmiOn","Working / Bit","hmi signal ok to start"
"C41","FLAGS =","CEnableGalvan","Config / Bit","run with/without galvanostat"
"C42","FLAGS =","CEnablePolarity","Config / Bit","run with/without polarity"
"C43","FLAGS =","CEnableUltraSon","Config / Bit","run with/without ultrasonics"
"C44","FLAGS =","CPrcsngStartStop","Working / Bit","whether a start or a stop command are being processed"
"C45","FLAGS =","CGalvHasAmpFB","Config / Bit","whether galvanostat gives an amperage feedback"
"C46","FLAGS =","CGenLevelHi","Working / Bit","generator cell level sensor hi"
"C47","FLAGS =","CEnableUSFan","Config / Bit","run with/without ultrasonic fan"
"C48","FLAGS =","CEnableInletVal","Config / Bit","run with/without inlet valve"
"C49","FLAGS =","CPropValveOn","Working / Bit","proportional valve"
"C50","FLAGS =","CEnableAcidPID","Config / Bit","run with/without acid pump PID"
"C51","FLAGS =","CEnablePropPID","Config / Bit","run with/without proportional valve PID"
"C52","FLAGS =","CEnableCondPID","Config / Bit","run with/without conductivity PID"
"C53","FLAGS =","CLeakSensor","Working / Bit","leak sensor on/off"
"C54","FLAGS =","CAcidLevelHi","Working / Bit","acid tank level hi"
"C56","FLAGS =","CEnableCondPPID","Config / Bit","run with/without conductivity pulse PID"
"C57","FLAGS =","CStopDrain","",""
"C58","FLAGS =","CNoticeOn","","Bit for whether or not there is an active notice"
"C59","FLAGS =","CEnableNotices","",""
"C60","FLAGS =","CFlowingStates","","The system is on and water is flowing but not necessarily generating"
"C61","FLAGS = REST_READONLY","C61_Drain","",""
"C62","FLAGS = REST_READONLY","CHaltedState","",""
"C63","FLAGS = REST_READONLY","CRemoteOn","",""
"C64","FLAGS = REST_READONLY","CFilter1Backwash","",""
"C65","FLAGS = REST_READONLY","CFilter2Backwash","",""
"C66","FLAGS = REST_READONLY","CFilter3Backwash","",""
"C67","FLAGS = REST_READONLY","CFilter4Backwash","",""
"C100","FLAGS = REST_READONLY","CBWCntReset","",""
"D0","FLAGS =","DSystemMode","Default / SDWord","latest mode (see SystemModes)"
"D1","FLAGS =","DWarnCode","Default / SDWord","latest warning (see WarningCodes)"
"D2","FLAGS =","DErrorCode","Default / SDWord","latest error (see ErrorCodes)"
"D3","FLAGS =","DInfoCode","Default / SDWord","latest info (see InfoCodes)"
"D4","FLAGS =","DUltraDuration","Default / SDWord","ultrasonic duration off in milliseconds (o = disabled/off)"
"D5","FLAGS =","DUltraInterval","Default / SDWord","ultrasonic interval on in milliseconds (o = disabled/off)"
"D6","FLAGS =","DPolarityCycle","Default / SDWord","polarity cycle time in milliseconds (0 = disabled/off)"
"D7","FLAGS =","DErrorDebounOn","Default / SDWord","error debounce on stability in milliseconds"
"D8","FLAGS =","DInfoDebounOn","Default / SDWord","info debounce on stability in milliseconds"
"D9","FLAGS = REST_READONLY","DInfoDebounOff","Default / SDWord","info debounce off stability in milliseconds"
"D10","FLAGS = REST_READONLY","DWarnDebounOn","Default / SDWord","warning debounce on stability in milliseconds"
"D11","FLAGS = REST_READONLY","DWarnDebounOff","Default / SDWord","warning debounce off stability in milliseconds"
"D12","FLAGS =","DErrorDebounOff","Default / SDWord","error debounce off stability in milliseconds"
"D13","FLAGS =","DInputDebounOn","Default / SDWord","digital input debounce on stability in milliseconds"
"D14","FLAGS =","DInputDebounOff","Default / SDWord","digital input debounce off stability in milliseconds"
"D15","FLAGS =","DButtonDebounOn","Default / SDWord","button input debounce on stability in milliseconds"
"D16","FLAGS =","DDebounNoticeOn","","notice debounce on in miliseconds"
"D17","FLAGS =","DDebounNoticeOff","","notice debounce on in miliseconds"
"D18","FLAGS =","DNoticeCode","","Code for the notice"
"D19","FLAGS = REST_READONLY","DBackwashFreq","",""
"D20","FLAGS = REST_READONLY","DBackwCountDown","",""
"R0","FLAGS =","RFlowRateMin","Limit / Real","flow rate minimum"
"R1","FLAGS =","RFlowRateMax","Limit / Real","flow rate maximum"
"R2","FLAGS =","RConductMin","Limit / Real","conductivity minimum"
"R3","FLAGS =","RConductMax","Limit / Real","conductivity maximum"
"R4","FLAGS =","RpHMin","Limit / Real","pH minimum"
"R5","FLAGS =","RpHMax","Limit / Real","pH maximum"
"R8","FLAGS =","RAmperageOut","Scaled / Real","scaled galvanostat amperage in amps (see module/scale for ranges)"
"R9","FLAGS =","RFlowInRate","Scaled / Real","scaled flow incoming rate in L/min (see module/scale for ranges)"
"R10","FLAGS =","RAcidPumpRate","Scaled / Real","scaled acid pump rate in mL/min (see module/scale for ranges)"
"R11","FLAGS =","RDrainPumpRate","Scaled / Real","scaled drain pump rate in XXX (see module/scale for ranges)"
"R12","FLAGS =","RReagntPumpRate","Scaled / Real","scaled reagent pump rate in mL/min (see module/scale for ranges)"
"R13","FLAGS =","RpH","Scaled / Real","scaled ph sensor value in pH (see module/scale for ranges)"
"R14","FLAGS =","RConductivity","Scaled / Real","scaled conductivity sensor value in mS (see module/scale for ranges)"
"R16","FLAGS =","RTempInlet","Scaled / Real","scaled temperature in value in C (see module/scale for ranges)"
"R17","FLAGS =","RTempOutlet","Scaled / Real","scaled temperature out value in C (see module/scale for ranges)"
"R18","FLAGS =","RAmpFeedback","Scaled / Real","scaled amperage feedback value in amps (see module/scale for ranges)"
"R19","FLAGS =","RVoltFeedback","Scaled / Real","scaled voltage feedback value in volts (see module/scale for ranges)"
"R20","FLAGS =","RVoltInfo","Limit / Real","voltage Info level in volts"
"R21","FLAGS =","RVoltAlarm","Limit / Real","voltage alarm level in volts"
"R22","FLAGS =","RTempInfo","Limit / Real","temperature info level in C"
"R23","FLAGS =","RTempAlarm","Limit / Real","temperature alarm level in C"
"R24","FLAGS =","RMediaInfo","Limit / Real","media info level in %"
"R25","FLAGS =","RMediaAlarm","Limit / Real","media alarm level in %"
"R26","FLAGS =","RMaxAmerage","Limit / Real","maxium amperage devices can supply in amps"
"R27","FLAGS =","RTempVolt","Temp / Real","temporary holding variable between calculations and functions"
"R28","FLAGS =","RTankLevel","Scaled / Real","scaled tank level in meters (see module/scale for ranges)"
"R29","FLAGS =","RpHFiltered","Temp / Real","scaled and filtered value for pH for acid pump PID"
"R30","FLAGS =","RTankCurrVol","Temp / Real","reagent tank current volume in meters3"
"R31","FLAGS =","RPropValve","Scaled / Real","tbd"
"R32","FLAGS =","RFlowFiltered","Temp / Real","scaled and filtered value for flow rate for prop valve PID"
"R33","FLAGS =","RCondFiltered","Temp / Real","scaled and filtered value for conductivity for acid pump PID"
"R34","FLAGS =","RAcidDutyCycle","Percent / Real","percentage for acid pump duty cycle"
"R35","FLAGS =","RAcidDutyOn","Temp / Real","time acid pump is on in msec"
"R36","FLAGS =","RAcidDutyOff","Temp / Real","time acid pump is off in msec"
"R37","FLAGS =","StoredRoutineID","",""
"R38","FLAGS =","RMediaMConsRate","","Plates mas consumption rate"
"R39","FLAGS = REST_READONLY","RBackwashCount","","Counts backwashes attempts per hour"
"T0","FLAGS =","TPolDuration","TImer Struct","timer for switching polarity"
"T0.Done","FLAGS =","","TImer Struct",""
"T1","FLAGS =","TUltraInterval","TImer Struct","timer for ultrasonics interval (off time)"
"T1.Done","FLAGS =","TUltraInterval.D","TImer Struct",""
"T2","FLAGS =","TUltraDuration","TImer Struct","timer for ultrasonics duration (on time)"
"T2.Done","FLAGS =","TUltraDuration.D","TImer Struct",""
"T3","FLAGS =","TPolPause3","TImer Struct","timer for pause between h bridge switching"
"T3.Done","FLAGS =","","TImer Struct",""
"T4","FLAGS =","TPolPause4","TImer Struct","timer for pause between h bridge switching"
"T4.Done","FLAGS =","","TImer Struct",""
"T5","FLAGS =","TPolPause5","TImer Struct","timer for pause between h bridge switching"
"T5.Done","FLAGS =","","TImer Struct",""
"T6","FLAGS =","TUltraDuation","TImer Struct","timer for ultrasonics sync duration (on time)"
"T6.Done","FLAGS =","TUltraDuation.Do","TImer Struct","timer done for ultrasonics sync duration (on time)"
"T7","FLAGS =","TCondRangeTO","TImer Struct","timer for conductivity timeout"
"T8","FLAGS =","TFlowRangeTO","TImer Struct","timer for flow rate timeout"
"T9","FLAGS =","TGenNotFullTO","TImer Struct","timer for generator not filled timeout"
"T10","FLAGS =","TORPRangeTO","TImer Struct","timer for orp range timeout"
"T11","FLAGS =","TpHRangeTO","TImer Struct","timer for ph range timeout"
"T13","FLAGS =","TLoadWebPagesUP","Timer Struct","timer for creating web pages directory"
"T13.Done","FLAGS =","TLoadWebPagesUP.","Timer Struct","timer for creating web pages directory"
"T15","FLAGS = REST_READONLY","TGenEmptyTO","TimerStruct","timer for generator empty timeout"
"T17","FLAGS = REST_READONLY","TStartupTimeout","",""
"CT0","FLAGS = REST_READONLY","CTBackwasFreqCnt","",""
"SS1","FLAGS =","SSFileName","File / String","PLC specific file name prefix"
"SL0","FLAGS =","SL_Message0","Message / String","latest message string"
"MC1","FLAGS =","MC1_UIStartCMD","Modbus / Bit","modbus UI start bit"
"MC2","FLAGS =","MC2_UIStopCMD","Modbus / Bit","modbus UI stop bit"
"MC6","FLAGS =","MC6_RstAllPltCMD","Modbus / Bit","Reset All plates CMD"
"MC7","FLAGS = REST_READONLY","MC7_RstInPltsCMD","","Reset Inner plates CMD"
"MC8","FLAGS =","MC8_RestricStart","","Address to lock the start of the process from the UI"
"MC9","FLAGS =","MC9_HaltACK","","Bit that the GUI sets to 1 to acknowledge errors. Used to go from HALTED to STOPPED"
"MC101","FLAGS =","MC101_AORP","Modbus / Bit","modbus alarm: AORPRange"
"MC102","FLAGS =","MC102_ApH","Modbus / Bit","modbus alarm: ApHRange"
"MC103","FLAGS =","MC103_ACond","Modbus / Bit","modbus alarm: ACondRange"
"MC104","FLAGS =","MC104_AFlow","Modbus / Bit","modbus alarm: AFlowRange"
"MC105","FLAGS =","MC105_ATemp","Modbus / Bit","modbus alarm: ATempRange"
"MC106","FLAGS =","MC106_GenNotFull","Modbus / Bit","modbus alarm: AGenNotFull"
"MC107","FLAGS =","MC107_GenEmpty","",""
"MC108","FLAGS =","MC108_AcidTankLo","",""
"MC109","FLAGS =","MC109_AcidEmpty","",""
"MC110","FLAGS = REST_READONLY","MC110_VoltInfo","",""
"MC111","FLAGS =","MC111_VoltAlarm","",""
"MC112","FLAGS =","MC112_ReagntOF","",""
"MC115","FLAGS = REST_READONLY","MC115_OutPlatesI","",""
"MC116","FLAGS = REST_READONLY","MC116_OutPlatesN","",""
"MC117","FLAGS =","MC117_ORPRangeTO","",""
"MC118","FLAGS =","MC118_pHRangeTO","",""
"MC119","FLAGS =","MC119_CondRangTO","",""
"MC120","FLAGS =","MC120_FlowRangTO","",""
"MC121","FLAGS = REST_READONLY","MC121_TempInfo","",""
"MC122","FLAGS =","MC122_GenNotFuTO","Modbus / Bit","modbus alarm: AGenNotFullTO"
"MC123","FLAGS =","MC123_GenEmptyTO","",""
"MC127","FLAGS = REST_READONLY","MC127_ReTankFull","",""
"MC130","FLAGS = REST_READONLY","MC130_InPlatesI","",""
"MC131","FLAGS = REST_READONLY","MC131_InPlatesN","",""
"MC132","FLAGS = REST_READONLY","MC132_StartTO","",""
"MC133","FLAGS = REST_READONLY","MC133_Backwash","",""
"MC134","FLAGS = REST_READONLY","MC134_TooManyBWE","",""
"MC212","FLAGS =","MC212_LeakSensor","Modbus / Bit","modbus leak sensor"
"MC213","FLAGS =","MC213_Acid_Lvl_H","Modbus / Bit","modbus acid tank level hi"
"MC214","FLAGS =","MC214_Acid_Lvl_L","Modbus / Bit","modbus acid tank level lo"
"MC215","FLAGS =","MC215_Gen_Lvl_H","Modbus / Bit","modbus generator flow cell level hi"
"MC216","FLAGS =","MC216_Gen_Lvl_L","Modbus / Bit","modbus generator flow cell level lo"
"MC401","FLAGS =","StartRoutineCMD","",""
"MC402","FLAGS =","StartRoutineACKS","",""
"MC403","FLAGS =","AbortRoutineCMD","",""
"MC404","FLAGS =","EndRoutineCMD","",""
"MC405","FLAGS =","EndRoutineACK","",""
"MC602","FLAGS =","MC_InletForce","Modbus / Bit","modbus actuator is being forced from GUI"
"MC603","FLAGS =","MC_InletValue","Modbus / Bit","modbus status value for actuator"
"MC610","FLAGS =","MC_DrainForce","Modbus / Bit","modbus actuator is being forced from GUI"
"MC611","FLAGS =","MC_DrainValue","Modbus / Bit","modbus status value for actuator"
"MHR1","FLAGS =","MHR1_Volt","Modbus / SWord","modbus voltage value"
"MHR2","FLAGS =","MHR2_Amp","Modbus / SWord","modbus amperage value"
"MHR3","FLAGS =","MHR3_pH","Modbus / SWord","modbus pH value"
"MHR4","FLAGS =","MHR4_Flow","Modbus / SWord","modbus flow rate"
"MHR6","FLAGS =","MHR6_TempIn","Modbus / SWord","modbus temperature in"
"MHR7","FLAGS =","MHR7_TempOut","Modbus / SWord","modbus temperature out"
"MHR8","FLAGS =","MHR8_ReagntPerc","Modbus / SWord","modbus reagent percentage value"
"MHR9","FLAGS =","MHR9_Conduct","Modbus / SWord","modbus conductivity"
"MHR10","FLAGS = REST_READONLY","MHR10_OutPlatePe","","Outer plates percentage"
"MHR11","FLAGS = REST_READONLY","MHR11_InPlatePer","","Outer plates percentage"
"MHR101","FLAGS = REST_READONLY","MHR101_Status","","Status of the StateMachine"
"MHR201","FLAGS =","RoutineID","Modbus / SWord","ID of the routine being triggered (Flush, etc.)"
"MHR202","FLAGS =","RoutineStepNum","","Current step of the routine running"
"A0","FLAGS =","ANoAlarm","Alarm / Bit","No Alarm"
"A1","FLAGS =","AORPRange","Alarm / Bit","ORP Range - ORP is out of range"
"A2","FLAGS =","ApHRange","Alarm / Bit","pH Range - PH is out of range"
"A3","FLAGS =","ACondRange","Alarm / Bit","Conductivity Range - Conductivity is out of range"
"A4","FLAGS =","AFlowRange","Alarm / Bit","Flow Range - Flow rate is out of range"
"A5","FLAGS =","ATempAlarm","Alarm / Bit","Temperature Alarm - Temperature exceeds alarm level"
"A6","FLAGS =","AGenNotFull","Alarm / Bit","Generator Level - Generator flow cell is not filled"
"A7","FLAGS =","AGenEmpty","Alarm / Bit","Generator Level - Generator flow cell is empty"
"A8","FLAGS =","AAcidTankLow","Alarm / Bit","Acid Level - Acid tank is running low"
"A9","FLAGS =","AAcidTankEmpty","Alarm / Bit","Acid Level - Acid tank is empty"
"A10","FLAGS =","AVoltInfo","Alarm / Bit","Voltage Info - Voltage exceeds info level"
"A11","FLAGS =","AVoltAlarm","Alarm / Bit","Voltage Alarm - Voltage exceeds alarm level"
"A12","FLAGS =","AReagntOverFlow","Alarm / Bit","Reagent Level - Reagent tank reached overflow"
"A13","FLAGS =","AReagntEmpty","Alarm / Bit","Reagent Level - Reagent tank is empty"
"A14","FLAGS =","AErrorPLC","Alarm / Bit","PLC Error - PLC is experiencing errors"
"A15","FLAGS =","AOutPlatesInfo","Alarm / Bit","Media Info - Media near end-of-life"
"A16","FLAGS =","AOutPlatesNotice","Alarm / Bit","Media Alarm - Media at end-of-life"
"A17","FLAGS =","AORPRangeTO","Alarm / Bit","ORP Range - ORP is out of range and timed out"
"A18","FLAGS =","ApHRangeTO","Alarm / Bit","pH Range - PH is out of range and timed out"
"A19","FLAGS =","ACondRangeTO","Alarm / Bit","Conductivity Range - Conductivity is out of range and timed out"
"A20","FLAGS =","AFlowRangeTO","Alarm / Bit","Flow Range - Flow rate is out of range and timed out"
"A21","FLAGS =","ATempInfo","Alarm / Bit","Temperature Info - Temperature exceeds info level"
"A22","FLAGS =","AGenNotFullTO","Alarm / Bit","Generator Level - Generator flow cell has not filled and timed out"
"A23","FLAGS =","AGenEmptyTO","Alarm / Bit","Generator Level - Generator flow cell is empty and timed out"
"A24","FLAGS =","AModbusWrite","Alarm / Bit","Modbus Write - an error from writing Modbus"
"A25","FLAGS =","AModbusRead","Alarm / Bit","Modbus Read - an error from reading Modbus"
"A26","FLAGS =","ALoadWebPages","Alarm / Bit","Load Web Pages - an error occurred while refreshing web pages"
"A27","FLAGS =","AReagentTankFull","Notice","Notice - the reagent tank is full"
"A30","FLAGS = REST_READONLY","AInPlatesInfo","",""
"A31","FLAGS = REST_READONLY","AInPlatesNotice","",""
"A32","FLAGS = REST_READONLY","AStartupTimeoutE","",""
"A33","FLAGS = REST_READONLY","ABackwash","Info","Filters are backwashing"
"A34","FLAGS = REST_READONLY","ATooManyBWError","","Too many backwashes error"
"F0","FLAGS =","FAmperageOut","Original / Real","amperage out to galv in amps"
"F1","FLAGS =","FUltraDuration","Original / Real","ultrasonic duration off in seconds"
"F2","FLAGS =","FUltraInterval","Original / Real","ultrasonic interval on in seconds"
"F3","FLAGS =","FPolarityCycle","Original / Real","polarity cycle time in seconds"
"F4","FLAGS =","FErrorDebounOn","Original / Real","error debounce on in milliseconds"
"F5","FLAGS =","FInfoDebounOn","Original / Real","info debounce on in milliseconds"
"F6","FLAGS =","FInfoDebounOff","Original / Real","info debounce off in milliseconds"
"F7","FLAGS =","FWarnDebounOn","Original / Real","warning debounce on in milliseconds"
"F8","FLAGS =","FWarnDebounOff","Original / Real","warning debounce off in milliseconds"
"F9","FLAGS =","FErrorDebounOff","Original / Real","error debounce off in milliseconds"
"F10","FLAGS =","FpHTarget","Original / Real","target value for pH level in acid pump PID"
"F11","FLAGS =","FTankHeight","Original / Real","reagent tank height in meters"
"F12","FLAGS =","FTankCrossSect","Original / Real","reagent tank cross sectional area in meters2"
"F13","FLAGS =","FTankCapacity","Original / Real","reagent tank capacity in meters3"
"F14","FLAGS =","FCondTarget","Original / Real","target value for conductivity level"
"F15","FLAGS =","FFlowTarget","Original / Real","target flow value for proportional valve in lpm"
"F16","FLAGS =","FAmpSecFactor","Original / Real","factor used in calculating media percent"
"F17","FLAGS =","FAcidDutyDur","Original / Real","duratino time for acid pump duty cycle in msec"
"F18","FLAGS =","FTotalPlatesMass","","Total mass of the plates"
"F19","FLAGS =","FReagTankMaxPerc","","Percentage for which we consider the reagent tank to be full"
"F20","FLAGS =","FReagTankMinPerc","","Percentage for which we consider the reagent tank to be empty"
"F21","FLAGS = REST_READONLY","FReagTankHysPerc","","Percentage that acts as a limit when the device is restarted, to decide whether or not we generate"
"B2","FLAGS =","BpHRange","Bypass / Bit","enable/disable associated alarm: ApHRange"
"B3","FLAGS =","BCondRange","Bypass / Bit","enable/disable associated alarm: ACondRange"
"B4","FLAGS =","BFlowRange","Bypass / Bit","enable/disable associated alarm: AFlowRange"
"B5","FLAGS =","BTempAlarm","Bypass / Bit","enable/disable associated alarm: ATempAlarm"
"B6","FLAGS =","BGenNotFull","Bypass / Bit","enable/disable associated alarm: AGenNotFull"
"B7","FLAGS =","BGenEmpty","Bypass / Bit","enable/disable associated alarm: AGenEmpty"
"B8","FLAGS =","BAcidTankLow","Bypass / Bit","enable/disable associated alarm: AAcidTankLow"
"B9","FLAGS =","BAcidTankEmpty","Bypass / Bit","enable/disable associated alarm: AAcidTankEmpty"
"B10","FLAGS =","BVoltInfo","Bypass / Bit","enable/disable associated alarm: AVoltInfo"
"B11","FLAGS =","BVoltAlarm","Bypass / Bit","enable/disable associated alarm: AVoltAlarm"
"B12","FLAGS =","BReagntOverFlow","Bypass / Bit","enable/disable associated alarm: AReagntOverFlow"
"B13","FLAGS =","BReagntEmpty","Bypass / Bit","enable/disable associated alarm: AReagntEmpty"
"B15","FLAGS =","BOutPlatesInfo","Bypass / Bit","enable/disable associated alarm: AMediaInfo"
"B16","FLAGS =","BOutPlatesNotice","Bypass / Bit","enable/disable associated alarm: AMediaAlarm"
"B18","FLAGS =","BpHRangeTO","Bypass / Bit","enable/disable associated alarm: ApHRangeTO"
"B19","FLAGS =","BCondRangeTO","Bypass / Bit","enable/disable associated alarm: ACondRangeTO"
"B20","FLAGS =","BFlowRangeTO","Bypass / Bit","enable/disable associated alarm: AFlowRangeTO"
"B21","FLAGS =","BTempInfo","Bypass / Bit","enable/disable associated alarm: ATempInfo"
"B22","FLAGS =","BGenNotFullTO","Bypass / Bit","enable/disable associated alarm: AGenNotFullTO"
"B23","FLAGS =","BGenEmptyTO","Bypass / Bit","enable/disable associated alarm: AGenEmptyTO"
"B26","FLAGS = REST_READONLY","BLoadPages","",""
"B27","FLAGS =","BReagTankFull","","enable/disable for tank is full"
"B28","FLAGS =","BReagTankEmpty","",""
"B29","FLAGS = REST_READONLY","BReagTankOverHys","",""
"B30","FLAGS = REST_READONLY","BInPlatesInfo","",""
"B31","FLAGS = REST_READONLY","BInPlatesNotice","",""
"B32","FLAGS = REST_READONLY","BStartupTimeoutE","",""
"B33","FLAGS = REST_READONLY","BBackwash","","Enable bit for backwash alarm"
"B34","FLAGS = REST_READONLY","BTooManyBWError","",""
"TO0","FLAGS =","TOCondRange","Timeout / SDWord","conductivity timeout in seconds"
"TO1","FLAGS =","TOFlowRange","Timeout / SDWord","flow rate timeout in seconds"
"TO2","FLAGS =","TOGenEmpty","Timeout / SDWord","generator empty timeout in seconds"
"TO3","FLAGS =","TOGenNotFull","Timeout / SDWord","generator not filled timeout in seconds"
"TO4","FLAGS =","TOORPRange","Timeout / SDWord","orp range timeout in seconds"
"TO5","FLAGS =","TOpHRange","Timeout / SDWord","pH range timeout in seconds"
"TO6","FLAGS =","TOMediaAlarm","Timeout / SDWord","media timeout in seconds"
"TT0","FLAGS =","TTAmpHours","Totals / Real","accumulated Ah since last plate reset"
"TT1","FLAGS =","TTKWattHours","Totals / Real","accumulated KWh since last plate reset"
"TT3","FLAGS =","TTFlowVolume","Totals / Real","total flow volume since last plate reset"
"TT4","FLAGS =","TTAmpSeconds","Totals / Real","holding variable for amp seconds for percent subtraction"
"TT5","FLAGS =","TTGenRunTmeHrs","Totals / Real","accumulated run time in hours of generator"
"TT6","FLAGS =","TTGenRunTimeSec","Totals / Real","accumulated run time in seconds of generator"
"TT7","FLAGS =","TTReagntPercent","Totals / Real","reagent tank current volume in percentage"
"TT8","FLAGS = REST_READONLY","TTMassConsuOut","","Total media mass consumed of the outter plates"
"TT9","FLAGS = REST_READONLY","TTMediaPerOut","","percentage of outer plate media remaining since last plate reset"
"TT10","FLAGS = REST_READONLY","TTMasConsuIn","","Total media mass consumed of the inner plates"
"TT11","FLAGS = REST_READONLY","TTMediaPercIn","","Percentage left of the inner plates"
"W0","FLAGS =","WAmpFeedback","Raw/ Real","raw galvanostat amperage feedback value (see module/scale for ranges)"
"W1","FLAGS =","WConductivity","Raw/ Real","raw conductivity sensor value (see module/scale for ranges)"
"W2","FLAGS =","WORP","Raw/ Real","raw orp value (see module/scale for ranges)"
"W3","FLAGS =","WTempInlet","Raw/ Real","raw temperature inlet value (see module/scale for ranges)"
"W4","FLAGS =","WTempOutlet","Raw/ Real","raw temperature outlet value (see module/scale for ranges)"
"W5","FLAGS =","WFlowInRate","Raw/ Real","raw incoming rate value (see module/scale for ranges)"
"W6","FLAGS =","WpH","Raw/ Real","raw pH sensor value (see module/scale for ranges)"
"W7","FLAGS =","WVoltFeedback","Raw/ Real","raw galvanostat voltage feedback value (see module/scale for ranges)"
"W8","FLAGS =","WTankLevel","Raw/ Real","raw level sensor value (see module/scale for ranges)"
"SC0","FLAGS =","SCAmpFbInMin","Scale / Real","scales for amperage feedbacks"
"SC1","FLAGS =","SCAmpFbInMax","Scale / Real","scales for amperage feedbacks"
"SC2","FLAGS =","SCAmpFbOutMin","Scale / Real","scales for amperage feedbacks"
"SC3","FLAGS =","SCAmpFbOutMax","Scale / Real","scales for amperage feedbacks"
"SC4","FLAGS =","SCCondInMin","Scale / Real","scales for conductivity"
"SC5","FLAGS =","SCCondInMax","Scale / Real","scales for conductivity"
"SC6","FLAGS =","SCCondOutMin","Scale / Real","scales for conductivity"
"SC7","FLAGS =","SCCondOutMax","Scale / Real","scales for conductivity"
"SC8","FLAGS =","SCOrpInMin","Scale / Real","scales for orp"
"SC9","FLAGS =","SCOrpInMax","Scale / Real","scales for orp"
"SC10","FLAGS =","SCOrpOutMin","Scale / Real","scales for orp"
"SC11","FLAGS =","SCOrpOutMax","Scale / Real","scales for orp"
"SC12","FLAGS =","SCTempInInMin","Scale / Real","scales for temp in"
"SC13","FLAGS =","SCTempInInMax","Scale / Real","scales for temp in"
"SC14","FLAGS =","SCTempInOutMin","Scale / Real","scales for temp in"
"SC15","FLAGS =","SCTempInOutMax","Scale / Real","scales for temp in"
"SC16","FLAGS =","SCTempOutInMin","Scale / Real","scales for temp out"
"SC17","FLAGS =","SCTempOutInMax","Scale / Real","scales for temp out"
"SC18","FLAGS =","SCTempOutOutMin","Scale / Real","scales for temp out"
"SC19","FLAGS =","SCTempOutOutMax","Scale / Real","scales for temp out"
"SC20","FLAGS =","SCFlowInMin","Scale / Real","scales for flow in rate"
"SC21","FLAGS =","SCFlowInMax","Scale / Real","scales for flow in rate"
"SC22","FLAGS =","SCFlowOutMin","Scale / Real","scales for flow in rate"
"SC23","FLAGS =","SCFlowOutMax","Scale / Real","scales for flow in rate"
"SC24","FLAGS =","SCpHInMin","Scale / Real","scales for pH"
"SC25","FLAGS =","SCpHInMax","Scale / Real","scales for pH"
"SC26","FLAGS =","SCpHOutMin","Scale / Real","scales for pH"
"SC27","FLAGS =","SCpHOutMax","Scale / Real","scales for pH"
"SC28","FLAGS =","SCVoltFbInMin","Scale / Real","scales for voltage feedback"
"SC29","FLAGS =","SCVoltFbInMax","Scale / Real","scales for voltage feedback"
"SC30","FLAGS =","SCVoltFbOutMin","Scale / Real","scales for voltage feedback"
"SC31","FLAGS =","SCVoltFbOutMax","Scale / Real","scales for voltage feedback"
"SC32","FLAGS =","SCTankLvInMin","Scale / Real","scales for tank level"
"SC33","FLAGS =","SCTankLvInMax","Scale / Real","scales for tank level"
"SC34","FLAGS =","SCTankLvOutMin","Scale / Real","scales for tank level"
"SC35","FLAGS =","SCTankLvOutMax","Scale / Real","scales for tank level"
"SC36","FLAGS =","SCAmpOutInMin","Scale / Real","scales for amperage out"
"SC37","FLAGS =","SCAmpOutInMax","Scale / Real","scales for amperage out"
"SC38","FLAGS =","SCAmpOutOutMin","Scale / Real","scales for amperage out"
"SC39","FLAGS =","SCAmpOutOutMax","Scale / Real","scales for amperage out"
"SC40","FLAGS =","SCDrainRtInMin","Scale / Real","scales for drain pump rate"
"SC41","FLAGS =","SCDrainRtInMax","Scale / Real","scales for drain pump rate"
"SC42","FLAGS =","SCDrainRtOutMin","Scale / Real","scales for drain pump rate"
"SC43","FLAGS =","SCDrainRtOutMax","Scale / Real","scales for drain pump rate"
"SC44","FLAGS =","SCReagntRtInMin","Scale / Real","scales for ragent pump rate"
"SC45","FLAGS =","SCReagntRtInMax","Scale / Real","scales for ragent pump rate"
"SC46","FLAGS =","SCReagntRtOutMin","Scale / Real","scales for ragent pump rate"
"SC47","FLAGS =","SCReagntRtOutMax","Scale / Real","scales for ragent pump rate"
"SC48","FLAGS =","SCpHRawMin","Scale / Real","scales for PID acid pump pH"
"SC49","FLAGS =","SCpHRawMax","Scale / Real","scales for PID acid pump pH"
"SC50","FLAGS =","SCpHEngMin","Scale / Real","scales for PID acid pump pH"
"SC51","FLAGS =","SCpHEngMax","Scale / Real","scales for PID acid pump pH"
"SC52","FLAGS =","SCFlowRawMin","Scale / Real","scales for PID proportional valve flow rate in lpm"
"SC53","FLAGS =","SCFlowRawMax","Scale / Real","scales for PID proportional valve flow rate in lpm"
"SC54","FLAGS =","SCFlowEngMin","Scale / Real","scales for PID proportional valve flow rate in lpm"
"SC55","FLAGS =","SCFlowEngMax","Scale / Real","scales for PID proportional valve flow rate in lpm"
"SC56","FLAGS =","SCCondRawMin","Scale / Real","scales for PID conductivity acid flow rate in mS"
"SC57","FLAGS =","SCCondRawMax","Scale / Real","scales for PID conductivity acid flow rate in mS"
"SC58","FLAGS =","SCCondEngMin","Scale / Real","scales for PID conductivity acid flow rate in mS"
"SC59","FLAGS =","SCCondEngMax","Scale / Real","scales for PID conductivity acid flow rate in mS"
"SE0","FLAGS =","SEWebDirSuc","File / Bit","success of web directory creation"
"SE1","FLAGS =","SEWebDirErr","File / Bit","error of web directory creation"
"SE2","FLAGS =","SEWebFile1Suc","File / Bit","success of web copy file 1"
"SE3","FLAGS =","SEWebFile1Err","File / Bit","error of web copy file 1"
"SE4","FLAGS =","SEWebFile2Suc","File / Bit","success of web copy file 2"
"SE5","FLAGS =","SEWebFile2Err","File / Bit","error of web copy file 2"
"ProgInfo","FLAGS =","PInfo","Program Struct","program monitors conditions that may affect future operations"
"ProgErrors","FLAGS =","PErrors","Program Struct","program monitors conditions that may halt processing and require assistance"
"TaskUltrasonics","FLAGS =","TUltrasonics","Task Struct","task starts/stops ultrasonics for the generator flow cell"
"TaskPolarity","FLAGS =","TPolarity","Task Struct","task starts/stops polarity for the generator flow cell"
"ProgWarnings","FLAGS =","PWarnings","Program Struct","program monitors conditions that may pause generation but also may recover"
"TaskGalvanostat","FLAGS =","TGalvanostat","Task Struct","task starts/stops galvanostat for the generator flow cell"
"TaskAcidPumpPID","FLAGS =","TAcidPumpPID","Task Struct","task adjusts acid pump rate to meet target pH level using PID"
"AcidPumpCtlPID","FLAGS =","PIDAcidPumpCtl","PID","routine for acid pump"
"AcidPumpCtlPID.SP","FLAGS =","PIDAcidPumpCtl.S","PID","routine for acid pump set point"
"RS_0","FLAGS =","RSAcidPumpPID","RampSoak Struct","ramp soak structure for acid pump PID"
"TaskLoadWebPages","FLAGS =","TLoadWebPages","Task Struct","task refreshes web user pages from SD card to RAM"
"PropValveCtlPID","FLAGS =","PIDPropValveCtl","PID","routine for flow control with proportional valve"
"PropValveCtlPID.SP","FLAGS =","PIDPropValveCtl.","PID","routine for flow control with proportional valve"
"TaskPropValvePID","FLAGS =","TPropValvePID","Task Strut","task adjusts proportional valve to meet flow rate target level using PID"
"RS_1","FLAGS =","RSPropValvePID","RampSoak Struct","ramp soak structure for proportional valve PID"
"ConductvyCtlPID","FLAGS =","PIDConductvyCtl","PID","routine for conductivity to acid pump"
"ConductvyCtlPID.SP","FLAGS =","","PID","routine for conductivity to acid pump"
"TaskConductvyPID","FLAGS =","TConductvyPID","Task Struct","task adjusts acid pump rate to meet target conductivity level using PID"
"RS_2","FLAGS =","RSConductvyPID","RampSoak Struct","ramp soak structure for conductivity acid PID"
"SK1","FLAGS =","SM_Idle","4","system mode: idle"
"SK2","FLAGS =","SM_Running","3","system mode: running"
"SK3","FLAGS =","SM_Stopped","1","system mode: stopped"
"SK4","FLAGS =","SM_Halted","10","system mode: halted"
"SK5","FLAGS =","A_VoltAlarm","220","alarm code: AVoltAlarm"
"SK6","FLAGS =","A_CondRange","30","alarm code: ACondRange"
"SK7","FLAGS =","A_NoAlarm","0","alarm code: ANoAlarm"
"SK8","FLAGS =","A_ReagntOverFlow","190","alarm code: AReagntOverFlow"
"SK9","FLAGS =","A_GenEmpty","105",""
"SK10","FLAGS =","A_TempAlarm","200","alarm code: ATempAlarm"
"SK11","FLAGS =","A_FlowRange","60","alarm code: AFlowRange"
"SK12","FLAGS =","A_pHRange","160","alarm code: ApHRange"
"SK13","FLAGS =","A_ORPRange","140","alarm code: AORPRange"
"SK14","FLAGS =","A_GenNotFull","100","alarm code: AGenNoFull"
"SK15","FLAGS =","A_VoltInfo","230","alarm code: AVoltInfo"
"SK16","FLAGS =","A_AcidTankEmpty","10","alarm code:AAcidTankEmpty"
"SK17","FLAGS =","A_AcidTankLow","20","alarm code: AAcidTankLow"
"SK18","FLAGS =","A_GenEmptyTO","115",""
"SK19","FLAGS =","A_Backwash","300",""
"SK20","FLAGS =","A_InPlatesInfo","270",""
"SK21","FLAGS =","A_OutPlatesInfo","130","alarm code: AMediaInfo"
"SK23","FLAGS =","A_ORPRangeTO","150","alarm code: AORPRangeTO"
"SK24","FLAGS =","A_pHRangeTO","170","alarm code: ApHRangeTO"
"SK25","FLAGS =","A_CondRangeTO","40","alarm code: ACondRangeTO"
"SK26","FLAGS =","A_FlowRangeTO","70","alarm code: AFlowRangeTO"
"SK27","FLAGS =","A_TempInfo","210","alarm code: ATempInfo"
"SK28","FLAGS =","A_GenNotFullTO","110","alarm code: AGenNotFullTO"
"SK29","FLAGS =","N_InPlates","275",""
"SK30","FLAGS =","N_OutPlates","280",""
"SK31","FLAGS =","A_LoadWebPages","122","alarm code: ALoadWebPages"
"SK32","FLAGS =","N_ReagTankFull","240",""
"SK34","FLAGS =","SM_Standby","5","system mode: standby"
"SK35","FLAGS =","SM_Starting","2",""
"SK36","FLAGS =","SM_Stopping","6",""
"SK37","FLAGS =","SM_RemoteDisable","7",""
"SK38","FLAGS =","A_StartupTimeout","290",""
"SK39","FLAGS =","A_TooManyBW","310","Error: Too many backwashes"
#END

