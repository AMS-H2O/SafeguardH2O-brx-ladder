// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database w/Flags;
// System Configuration; Memory Configuration/Devices with Built-In Types and User Add-Ons;
// use Element names (no NickNames); rung/address annotations;
// <TAB> parameter delimiter; 
// Write/overwrite file C:\Users\AMS629\Desktop\SafeguardH2O_BRX_Alarms\Program_EXPORT_DMD.txt

PLC BX-DM1E-M-D

// Do not modify SYS_CONFIG block!

#BEGIN SYS_CONFIG
ba203899e9d02238eea247a1b85297fb159a474e99ea7c4440a24fa21d1a5af257bea92ea20ba01f
eb93d1f9566b192268c38b45fbc0b8ef012b49d5ad1487ca2ad9e5ad210d9c43f16191d5b914d1c9
56533fc9fb2fd7742a8f74075307260897804e40572294df58ce13b39384ef15394fa4448f4b4d48
3c37bf767040d71d98a1d6de22d9a57231291d5fdcf7f54730d483de296d8981b39b71abb0902f27
13dc5de90d7ac04a1b83e0ae46a0277a46f841133d94d7b5250a98ac2a84d3c7d40bf7d67b69ab2e
4e4420552663bf682b15bbdb47947914b7bbc58f34024f4d5b52e0d6c086d6fcd4f75b02976dd1c5
a69dd8aa657150fbda35bfa68899049b5cb18dd2bc578101b067ac8072222071149a9225217f66af
913ef3262609005437c93145accccfe84c7c154f8ca1ef4767713fb0b1723700d9cc24b39b95d00a
a188abf87b9f465e6ae6b9067fec6027df1d936e680114208112f0b6b364e3d8b8bb0f8e5a756035
e0d7b66c4199293c64687e0e15a2055421556951556305206d0ff25d7205bc732e0febcaf6ee8449
85ab27968fa0d207190ad3c2f3766f61a479404edd0f7ea89b069558f79a3e6e1e1496b25a3d2d4b
acbfd9d4ade24bded730062051493a8771b539322875732c926c8fe432b34f93d71e7a373e7a2732
209af2831408ed43df4ea711bc6c56f23bb02c0ba80e5b7d2fc00735b0c5b912b3aa8cebc53d5bf1
4758059b9699c086668945ab065700836acd2d077e11c0b8528c72d98d5c498ea6913321e6758a5d
f18477c1ced0e380a5993b33bd609369f1f169a88a604ac3dd0c4db2d8c70b8f78731946249d144e
1f54ed4599fc6f1e96146a54a6b49abf713699c496711cb8d6ce15ae05cd68f2a97fc7ecd8837a70
c98ab1d015d536d9e75eb42351706c3406ffd027fa34f90f931a80066fa171a64d0b835fd589e19f
cfddf142e2f97c8057c639b5057b7b6bf9bcdc2eec51795889c0111d34253dface62962d33d80e38
aae51b054173a738bd1f0791f81b516f1620a2f7811912070094e6893fb3cc9910dab0e7564a0a01
ffa7ba419fb3d026acbb3adfdc8a4bd8890aa6d23e39861ab99e6d74e370e7e96dacbeb631475d8a
4a93d26a13fa0b330b8f37d7a411b18015503b824e3d6638de0da4da177bda42eb7c17aa21a15fc0
5409fa80cc4d25731f21ddafb7ded97d947d5ab3932b0c4f7d45a5d2d0911b906c72d5a49c72b656
b79bd5de31c1fea8c404e701e16dbaa92d1142616106ac42b1a56b32283fbeca4e0e99e09abe71b6
cb2ee1b147a35033705d4807a60b37c46052c79c5f8df854f893c43ae7ca21325f762cab338042d2
4796cf80a42f0cd562962f4686e15c10ac8d84d277076e405974404067ac9076250e1e9042c7c017
6e9807500c7daec3d2f30646cb750c83386fce6115bd9087f879644f60fee7688ed7b10b1df0c5c3
02c5bd24f660d5b2122ee32206a5bdd6ade7daa1a69ae9a28b9b1c23fda05971c8ca2349c00e54b6
9da40d0b9a1c541ccbd66d24e02cc35d72ae0f079ecaec5b649f62ce9feae7be400d676db421eece
1265832720f425465d5d45fbb22e822c6df25c43c8882c759dc27a719ecf1212a74ef25a1451caff
17557298a5ee37001a7a08bbcf38cf5d24160122684c567e0f7b2b591a2fdc31fa1aa530cac6153c
4c704391168a66e928a30b65a77a05fcd0bab07fa4a98d26cccdb9480d083c0c37a8ee0d30fbbe57
0dbb8b897b09266cbf2bcd5d4e6b6c658f1d01228d354c655960269429a3c0541eae686f0f13a191
4066368330fa717cb437674d92f0267298d9b77483aca2135fd33c5c019af60e3e6d669f1e76ac7b
5a6c77372c8ccab47ade1604fee4d5c1e0e017569334b9dd3f6e67dbb1cf01d35df49ec0cd9862c0
47e9304629b48d37e8006ac44752ca15ce0c8210c37c4c4163d2048c88a34ca2792d626fc120de7e
54167485a0190730f178cdf7539d0995266c11147b9309fea3e7e3484962dbcb812eaaa630ad1ee4
1b6de5af17fe3261d423549028e09b5903aff0fdd9585e3e7fc8a222362c5d4f270af1d9a260d4c9
f812a90d8847e6b6ef72a33ae416998791fc04074ed1574db7a0d6eac765c0878ec789dd6f5482fa
e9efce6bab326ee914d754a20d0e315d03e38b56451b7bccd822e27bab7138a33b3a8a0eb6f87569
73fb20c3a13d199656479087224ce2c25b9bd771dd39fe1040eab3ccb7f711d3031e465f51c3b1e9
1abec6614dde779e281767e853dda62e52992a3229ccad50fa018ddf543b85f80e9aa894edc7837d
1a6c6380c8ca74cfd7d7326ef6d29b426f039f9c1457a56676cdb84b871eb777cf4a695d79ae6291
06adf0703f71ffb2eba2111b2a161e2d395af7e9265c3d217686a793081d0b6ccd54624cb1bd5c82
b3c03dff574a4a5355f01bd2bed8796b7f0123110bd0371690c2de7f33e484e3ca677f470098dbed
7baa470d4896bc3056dccbc14efa60b8ada399da092b34d141bcb2b9405ac7d8cf0dc452cdf529fc
55a35f90b10b016979c33e7758dd1f1079fac629dcec36a642503fac3ee1c964090420441a32157a
f791ab2f6123f0da33760bb0253b786600f75cae62dd7de1409abfe059b787acdd4c50c8489bfc4e
e917c4dcdd5acbc73ebbebba6ca242c74a2106c5715ced4a9e76182a6fc782082e166884eb548282
a6c8dffea4cf0d4368c7b1da232b6e23c419d1283809e855baa0ef812882ccf8a3ccf983f2714b73
d1174ae19b34710d4ed87d2595309fa3a55fd355b332387a2cbd31ed2edd86b1d855449e779948f1
33cc91f7bcb300b5a6d0a33eba4ae3f52e44c27ad4a13fc6790566bc7e15d2c24394a8f759804875
96d969c95152cfa77a05dec293f88c1692c57d3dca0ee1a95133a9a2f2e1423c5cd3f2f3085563f2
a9faebb1c9581d300e1792d604bf292a3048e3b685eeb902fe0a42d97f2bd19cdc61dfa67dd2bb71
df76e161a9e8cd1f1dc808b270e3a7148b8141dc39ae83fd455755765352874e0756c230abb63748
989e08430b2812fe6009021698a56d473fae6fd7ebad20b0b1784addffbbadd1b48bcdd1328d3322
e9903737a603d011a9d1b3e26c5531fd152a57d944da1fca41704b05e056ac7bd03996cb7b01d1b2
11669ef7b95d4ae82da0624ca2d94b98de2ff792c042391793a16277630f9c8fb3b06c032e565448
9bb3a8f40c46ab355abfc283d2e45d8102d20f101b0663b65cc7ead7125764863d309329a85b4cc3
039e91a9382f3ec0ead3184506bce25228781378ceba331099c025547b2849081df3a0b1cc382e3d
ff799cc424e64fd4516f2043c01050595e5e0e95eed66fe7fcd42c2172a23ddebe480a56f4477ef7
eb40dbf7f37df3b385947372bab297bdfd4997186beca734268d1e7cb82cb8d1c634e59a13ec32c0
4fd1cca49000332bf4f7a79816602196fcfcc0ead662bc3340c58e411b557e4ab64a8946a78f22d3
87506c61688538303bfe1930728597bfea65611f96c022f5ed9744325547fce508f563c2d01c1f36
95dd512f7abf949bf91e758bd09e8b09df444f41e35e900c15d8432ca668afb44cb4e32ee5ac3edf
80059dc7c28c6f53dc657f71507a152b10796779ad6c9fdbd9dc3b1aeeaaf3767e3b9a666f9c8fcc
0752371d7bb49ef1cf18314c6504f3377e062b88c04c3a6f0d8f35ee388327d6cde0cbf9653abf27
65e24aa79b14adb8de83bc21eff09c17477b31ff2526efeb656dabdc9809dd7dbb81dd60c8d89675
fcc729c5756b60a5425b1960725a0f6c29348e6db95941e1a27daf04f63fb893f205c18c5415dcf9
1b7f9e745f5032ed861ae3adb83a0c9724e1c6bb77e486e74d52da08325ecd24209787992e4bb6cb
b3503206279ed1c21880dfa24463f042150a231cca6ad916f7dfde6eb968545930d6b1b6df4ee7f0
18b22d035f09ce9dfa9a302f27f78d2661528a270fa8c2b4f591cfb32525610339fdaa30ca6f78a5
b7869a34c268a789d58394c708f1018576a19b23a4a81f709256585eb92cecfba64c874521c7bd7c
b89fe26efd2f50587347bb475e47512f94e02fb668da2dab600bbf309b8771878643641995053764
7b526db919d553bb543b649d1b638b24ddb6a4bfef1375070857e280d4d1d7f67fca67fd32ba28e5
4f1c7f6d88507b7be4c529254f6a45fc23290c5908032daef49d1be9881ededb6c6f1d9e5eacdcbf
64eb864d6273a3de24e399c40a9d9bdd0d647ec54e594cc3ed0c0be145f6ecde52803fcb46849682
bdb4e9923c7cca82370bc3cbee440deb0887f473b85aa6f6218072bfe4eafc83f88bdef573feca3d
7d0d6dc3b61c02da8d9c6324130ba03caf3db53e705e8b212ae780ac869b4996948d0c695040eb44
6adc2fe07392962fefd9a14a2008714a7fe34315f5223a402f5936249f86714d2cda1e5149ca2f2e
da48b17d4b052d545b6eba16f520405e7ea9c587740ea6c01a64bb159721ac402c3110df812f913f
2da2623c3e047a55c9c0c358ca32d1b27b7cbb14a63e6c0e2d72a8d864e04bf58d3ef2ef1cf7ad5a
335071a9d771c599ab3e1d7a0570ad9036369a82fc64fe9579fc84e252ebb70e4d1651f291b95e7b
9d02f99a3ff0a85e73c248910b10368ee6aecbd64393b2d53135aa1ea9dde4c06ce32d7790a51bb3
3a5173eac9071e0a9a29221ceef8df3cdf33c4fb688d9d45ea1f4c955849008a42fdc9d656f25fe4
a54ecaeade71cae3e7679dfc213979c69a11b6f3d113215018b4529e637e6c8c1529ce65743496d7
1dddb0ded416254e925ea3beccbbcc93cffb945668cd1d4afdbe359b24ab7b27919eaa17d628b69d
8cda02e63661316f3239553613253561e6a1a45c7cb89ae0244d47cdfdba3eb929270850c3755b07
fd1c8dd1e1e001c9e17ae57d099405f14b3da75b1b597a876bc2d1010660b7e057141f82e22c4e80
5346e2f69b28027beb41e286a81946aebaaef841965aa7bab868cb31b3a0de86613bb977b5b26988
231e726051bd8838a0313edc87bee0d9316efc97fd7e6a4507331fb26acf70163a61d0b06fb89d39
8c23b57a0353041e93f59d5db20bcb484b9024c2c1e72e165aa15066721752b0bdc11aced239aa4a
efbc3e28cc70c91d4cb36367cc965c2c025be04ad1cff974ff293b6e5970a65c2aa911678befa936
9def26ab26362052ea56c516d6a84ac9325128ec0b376dea8538e09df3611397a68f0588a1bae7b3
fe8daffbd22c49227777139d41a6fa13e6a9b29636c64327b0b7e900976572b8dc46e7c5727c2a45
2b4a7a0dfd8797e9c63129ea6f537b9364dd88a17e4aba0da938980efc7cc01117a589b1fa575f45
bbc03d65b7ac4e54af09e1f1b77231d60c0b062562ce8cbe975edda024463e5aa09292c583d1a977
5bb2b02eb638292b8970530ac0cae0f65212324fe653c392862eda8f88cc7cbfa487a7cc3ede4d92
3e0dbb5bdba3fe84c657dedb97e69f82cd35bb8cb4d1ad5c711e74fe7d6fd184ac0bd1f4d12b2f71
d1f6dddd03f25ab5579e4848bbaaea3d4a9b9e31452b06b115715b6b904891092aefeacfbda077c4
639d809c6d6f1df160c781d1f95e282690b7d0ce972138c38136ad301cbaa050f29c83a5cb51a278
ff12d613660469a9c6ca50b0fa69b9d86db027b05e92ce9ab4e5251d830c2429f3773602bbcd16e7
87d71a43395861775054263c015014a5f167deb4cde48a48aa20d7dcfdb0d634f0d55e752d6eee8c
8abdc7bf21e71b3a1801c5d6188740d36c8c58f36abecd37ded94342cd36c12180adf46100d06b8c
9df1b51bd95c7b362fc73d825dd2026cdd46b9a34d63e1c4de75ba2d082b8fae009feb8cac61566b
f89296073f680dbd0a5d790d88c41a257a3768d74271245f21ff1d712cb0c6b596a4da3033742654
081b4186ce676e8ab851fd401cc6d1b13298a11255fa6bee00d0f3bc7810d6e688393017d5d56995
f64f7fee634bd6a67fc3a8128ead15ddcfa8e987c9db4393b2f20efda4118c2d99f5ef5a7b6e7963
8b939dc15935fc592d45100772d7c18684a48a89d47a742b0881fc8cfa5bb101635c24bc52ec56c8
e488c9bf46a90a901b267fea84c5d8b07964b76025cd41a59dcd4b56a29e8f6ed9d4ee00108fa8b6
ec5c5ffd13c02f48a9e2956b7622fc6ff81710229296bfa1e2b832a54d3f67b2fcaddac36c28a30f
281f5ac9b66e38c8b11d8f77cb72389af71c35084c75b9deabbcb25e84cac261b36ff8e98c969826
aad3c8fa0a5112a5ba86afd9ea951db1d06e0054f8a9f69b20a13482a074ca2e43686dc680564eed
d2af6d17075d925eb7fe6e75168a01fc579ff042018fa8bfda7a86c9828094dff8461979d58a93bb
e59efb51939daffe037c423524dde5d20d427e627bc2feed19935089cb7ce3fb421279cda98af054
4d2a2d03031d8d245ad18bf251d0c8ce99f32b9497015b91fe6c1533509d65b4feb1706781b4c6bd
f2ffc0d0579646a8b06e2b7786b8f809d516ff53093b15368c574c781db2e8398d642bff1b53d3b8
aeac21b646162273865832fd9ccae6bd936cb5f4674385bfcd7d0b6a3196f18280a1e8f282bc5297
688ff88756f776859afde0a094f472c0facefd75a4226b33b53ea227cc3c7949a6f8b14a208fa695
c5613bc7b87d35d2e0821ad0dadfb4ddb3bee126326f4580c2bd0e3be3856b964e0f656fd689d09a
1193ab4b43c23a3b24f2442f7b6551dbcf29488fe525e04b5445013278288e6e5922c52ce78b0959
bd5b11110dcbf3bdc4ab006a2c8489dee0267a1967471d4757d1fb1cf301f856cc57bd2495cf5609
3c64ab67eb5d5a494841a56ba85e5ebbeb2e291ee232d8e7bc5c91f5f26651ad7dcbf7ae5b2f38e1
943798c28e9ef90c2485723e241637e566a6360283f706f2604b44a36166fb4060a2b194f21f7936
7d543431c3db4afa5fac29ca4ea61fab9a6d0763217b655a202dfa1050f1f0a7cc63153e920e3fd1
ee529827a065803da1fe5519faf3382ab0b41c4e5748cb41bff09b02df7fc6ad0586e352100e25c8
845954b520173f9b8f3c6fa72c02ed83f43f38c0eb114e2781e3be8ed0d979a12463db701b233030
4d15ef8719a03de80512e68a2aaf1d608c24e0abee3c49f727c02a953d425ed6f1be34d04263347a
63406738cca01c97a7b4d97ace48348b930c6f90528a594eb0aada544c7451e47ddd36e6834a6e77
55ed2195b2dc122ec214bd837da8f74190e47c3883a5a41125b641b862910173ce564204b8c3e81b
5892f765d08a03efce43bf1d5d14f19508fcdcb7db4da36497615d6e429d62538f413c3c7dbeefcd
383ef1c6b0c5ece59abcd9e3307ecc5603430f1d876474cb73e46f94c4b23d1ee3fef4d9bb5270c7
2940edff5dc6ce7eab94baed00ddaea0d6d6be12b71e17c657b00a23c831e68512f016859eadc319
840863354567c525aae19500109627fb246a128f58f254e3f0d608702e2c9539d32b6860c35311c2
9e332f6aec03333c1ac65e65941f3a005bdc73d3d032c7db1d7b47baf745dac0a23f06092b9d00dd
cf51b8202d07ff06cc0f4c4380527a08f6df5bd37a9dfa9119fecba3b73a05f4bab2cf6968348e07
6246a78cabdcb7fe92cce4b7c5b833f0a1c64e5dca1e550c1f9160e431a9e94591408ef14e8a6a96
c0ed190db9c845694fd204c16ea265f00c86af5c56df5a7f92bc3b73da786c8629d5c40d20b93f20
c50c40501fc8ffe8a03da673669db950ffc549dc6b41b3f2e8382acbacaeeeba2ee7cb1c2f03806b
c22d986cfef013915d945da7fd4b4b51ad69689333db54dc7ac3f82d900520f50f6e9db6acd2b7cd
0f7bc00d1c196f2e2fbba57a9fb2a5d38e0a4009c5091edbb0b8efaee7b855f0b775be2383b232db
dcf04f28be735ef3723debfef6971d4fcce7c65052ec6247011de857d1f269652c7254f659dc4e93
9ee532d73595ec7e053815ec7ce28133ed3e53b2926a7ef596962459474a0100fed0287964f67bbc
1056e74a293ef6b298a9c5f048a1413ce7f9be992268b5542276b6b483525993541c0c816eaacdfa
2bc384f1cfb98040cd701108bed733bc88cb3c39dee517492a8c7fd34cbbe3467d9c25bb0cb66e2e
e9d169fc0085cfa058d99c52b7dc987205e8c96efd6041d83a72c4795710b275752f204227712a44
2ef03f4a8bfbe91c3f5d752d376267b1b3d5e118826e22498989d647150d4e64928a4ea8a24e8725
7221fa1bdac5c580c0085a08eeb824a247d11ab4195eee3a0e29231c030ee569dc79fc02eafd6db9
7b4d7685147b2154c6141dc3398c2c89677fe08ece2b3c2b715fc8df20097ff0bf39c206b6adb998
88ff429e65c9118e25f3bb5a77e6dc5bfd5ba235788aa7651559138c79412e5c0d9b7a9d97ffa0d9
bb35d4b3d3705bed42e02ee2c0afd99cbf6e1fba9536330f019d00fccda586378f9ea07f5f848a6b
3c78f25535e4e5fd084bed54c8cf16636f174db1d074e089c44b18485fbe8f282b74615110e4853e
126a58afbf52c67e972f54fcacfdaf30ac71dbb81a3c43c9bffc2ca7ce13ab4acb8c7dffcdc30104
b4b9e9f100bed84b6fdfd2340da4e7d54d9188460f0d5f3dbd5c9f455bb0fd0c154d36a437081f1f
5420684f31464cd5c9e0ed34c6a753930b28f7e5d0b31dd8aff9f2c7fb1ddd131cb2e1c6cba6b8f7
776ac39662a20b3a4cc3db186cb7943408a707e6eb92061b14ce241b9decfae95bea5887b3f083d0
1993655c1a02629d697e60a8a3db40d281b05e3935b2bfa8bb7780054a0cc84fc50d02652483a205
2904c0cc2ebb5f9a006bd899e3633df907922e842a84dbc3f87f6eec2fa324aa1e8a994f6d7f5691
e590e04d36837b769808afcdb52ffbbaa8372bcc4e3d256f503a3a03edfd5bc59e57a18c6445df21
53e04567f9fa62c21e71d469c209799aab7204dcb2e808a88a212c214ec349e47d2677ea1ce5d1a7
bd049e9920807768b192fef3727ca87dcf62ac36fedd20c16347dd390a4e4aff365280f8b517dc45
858c6ab431226de9624014e2e7082a4e0773f17a99dbc97aa7492fe09bfd329efa64911b62fc4973
e9f50031dcd796ce570f26ac9739c4555e7ac3a010b4f09f6f4072c609139f997caed23483b30eda
41ac0005e332f54e404998c54655f1c70beb28b063235f779d095f1bdb67c3e091b978bd97145530
18815cff010bd6d1e24de961f80dd08798e1bce963905db92cb4e34dc66490b73675e371c40c30a5
c744f15df60dad4b20b1e2533ba51068baca5814e0e287cda4fdf7540b736906e0fab4517b13e44e
395b3c93dd00244a384f5a2b5ffb02c58f7cad98baa050c686ccefa5544d728758d4acc5f2f821de
102b4172485ae7ad0d090d20c13358e937ec329e023b1bb97a52b697fa3e51819df2cdf313c5b612
555c7dfa57af43501d1d731ce64aaaeab9ab99b7dcac0e21d7c388c9dbdd55c98d3caf00d41569af
b6c64a84ddf2d50663acbfd143d488115f3b5138f14fb203785403d82c7657c267effdc564aa78ef
8a5e914a56a71ec1c237e0a3523be2489e429b05b2fbe2904fe5f13132342d8d8982bf3687b7f9ac
ea6ba58fdbde5046bcbde501767dbb9eb4dcf5d105c99066ccd25f42d290030cfc70797d0bc84c1f
7d35638a34c2c75950b3d6819090c6a839ecae06b8b52c18fad1ed9a114d33c6c31b1b2808a0e102
d5f81f292dd0aeb484d57b6777f68e75c05e41e3296defe8c0e8ebbaaa692791702707b1787f3443
936fdfd64cefc162cb3ab7e4d691fb3b202314ff7697bf661e34ba58f8a592c23a704b1932d9ce51
09f33a176716bde9bea642769706f04d342316959c4ae67e10257d9487a47595cce579d7018b518f
a77642767522e1f80aec0a06b5383291f28de8efb648d04f96b9c3125abf2441acdb97a4b488aa53
a975f41ad0b6b844d1eaa7c20492d694cfe7f233f7d1e8b0551fd4062ac82a93ae51dec841bc5ad6
7da456d56d3fd9554700cd1b55202c10722256367fb23713382e2c55487aaf0a89ecf6a98906fb77
2f6029684c8927114935023f5166710309d2644a135b5740040afe09c2037e03296de512078099ee
1ff3516e068ab91cf0d67b6345b1386ae889732e18209e80d2e0039fef47695ac7893a213e474227
367a5cedbc8a5ea5e929baef1dd6283e6742d2d344e6cc97bd2f70ba92ee98a0e61bb3fee68f5149
a7620daf552f523b2fd7061d9fb0c19357da797a8eb4100d603b95127bc453bfc9a5fb48069be659
fd5b17af6f8e4002f739d46bff2ed2fccab7d7f2efa43fa61ffb839083f0ca679401423169c90596
d45f2291b87d69715e8d2f2b6a29a6f3759d667615916df95a3941a5f17f67c9337f5ab9a7747f47
f43eef8f70d94e4b9439f1332e09f5222c0f1a1519156e3a1a95be72542e1676dfb718622dcaffa2
9bb1224514bc985bb89fbbf3848c61fd61f7fa1f20894133ac08166257dbe8b4ab3f8a4832919840
8629ae111a8aa794cbc3554a0d43b02d885f38bce2f446c98b5d72879d5e837ef9840f9cb57eb744
168071a04aa1a6453a8083297f0e6b0e35981fd3ff6a50485ad01991dae17f7486acf32a18ba2f1e
3ef52660526aaa7e656be67fb0f422db5521c7bd758e8add9d4cc9a3ea208760856417a5b7d62df8
943fd458876e77819b6f89ed0226b749b265f806b83c7e039994ca77fa7ceb5f96388f454a9e6d9e
d45e2d600640ed7c0ac1f138d43251e36d0a70abb5feee4b0ac176f9be6c70452335c5322dd968ee
b79cbc2b3593a40f6bc6ab8fd6df6c8f91faa7beb2ea18026653
#END



#BEGIN DEVICE
	@LocalIOMaster, 12, 27
	@UserLog, 7, 11
	@IntEthernet, 4, 2
	@DMLogger, 5, 10
	@IntModTCPClient, 9, 14, 1000, 2, 60
	@IntSerial, 10, 15
	@RamFS, 1, 1
	@SDCardFS, 25, 1
	@IntEIPClient, 22, 31, 1000, 2, 60
	@IntEthDMPPClient, 23, 32, 50, 250, 2
	@POM, 24, 33
	@Axis0, 30, 35
	@Axis1, 31, 35
	@Axis2, 32, 35
	@Axis3, 33, 35
	@HsCtrTmr1, 14, 29
	@MyFTPClient, 32769, 38, 4294967295, 21, 30000, 4, amsftp@amshm.com, AMSwaterHM34896@!, ftp.amshm.com
	@MyHTTPClient, 32770, 8
	@SERIO_001_A, 16385, 24
	@SERIO_001_B, 17409, 24
	@SERIO_001_C, 18433, 24
	@SERIO_001_D, 19457, 24
#END

#BEGIN MEM_CONFIG
	X	BIT	decimal	2048	-1
	Y	BIT	decimal	2048	-1
	WX	SWORD	decimal	256	-1
	WY	SWORD	decimal	256	-1
	C	BIT	decimal	2048
	V	UWORD	decimal	4096
	N	SWORD	decimal	4096
	D	SDWORD	decimal	4096
	R	REAL	decimal	4096
	T	TIMER	decimal	256	-1
	CT	COUNTER	decimal	256
	SS	STRING	decimal	128
	SL	STRING	decimal	64
	UDT	DATETIME	decimal	32
	PL	UWORD	decimal	256
	DLX	BIT	octal	01000
	DLY	BIT	octal	01000
	DLC	BIT	octal	01000
	DLV	UWORD	octal	04000
	MI	BIT	decimal	1024
	MC	BIT	decimal	1024
	MIR	SWORD	decimal	2048
	MHR	SWORD	decimal	2048
	RX	REAL	decimal	256	-1
	RY	REAL	decimal	256	-1
	A	BIT	decimal	256	-1
	F	REAL	decimal	32
	B	BIT	decimal	256
	TO	SDWORD	decimal	32
	TT	REAL	decimal	16
	W	REAL	decimal	16
	SC	REAL	decimal	64
	SE	BIT	decimal	256
	MSG	STRING		0
	ERR	STRING		0
	SysName	STRING		0
	SysDesc	STRING		0
	SerialNum	STRING		0
	PartNum	STRING		0
	TaskGalvanostat	TASK		0	-1
	ProgInfo	PROGRAM		0	-1
	ProgErrors	PROGRAM		0	-1
	TaskUltrasonics	TASK		0	-1
	TaskPolarity	TASK		0	-1
	ProgDosingPump	PROGRAM		0	-1
	ProgWarnings	PROGRAM		0	-1
	TaskAcidPumpPID	TASK		0	-1
	AcidPumpCtlPID	PID		0
	RS_0	RAMPSOAK		0
	TaskLoadWebPages	TASK		0
	PropValveCtlPID	PID		0
	TaskPropValvePID	TASK		0	-1
	RS_1	RAMPSOAK		0
	ConductvyCtlPID	PID		0
	TaskConductvyPID	TASK		0	-1
	RS_2	RAMPSOAK		0
	TaskRoutineTest	TASK		0	-1
	TaskUpdPlatePerc	TASK		0	-1
	ProgNotices	PROGRAM		0	-1
	ProgStateMachine	PROGRAM		0	-1
	ProgDraining	PROGRAM		0	-1
	ProgAbortDrain	PROGRAM		0	-1
	ProgAbortRinsing	PROGRAM		0
	ProgRinsing	PROGRAM		0	-1
	TaskResetPlates	TASK		0	-1
#END

// Beginning of Code Block $tFirstScan
$TSK	$tFirstScan

// Rung $tFirstScan#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br>"
"<FONT tsize=5>$tFirstScan</FONT><br><FONT tsize=5></FONT> "
"<br>This is the first ladder task that is ran once when the "
"PLC is placed into RUN mode.  Just to be sure, internal "
"memory variables are initialized and any default "
"configurations can be reloaded.  If a program change "
"requires these to be reloaded, be sure to switch to program "
"mode then back to run mode either by physical or software "
"switch."
#END

NOP

// Rung $tFirstScan#2
// Offset 1
#BEGIN FMT_COMMENT 
"Reset local memory variable ranges/registers to zero when "
"PLC first starts up.  (If a nickname appears in the ""End"" "
"column, may need to increase the initialization range.)  If "
"an I/O was previously on when it shouldn't, it will be "
"reset at the bottom of the scan.  Note, not clearning "
"specific registers to be left as retentive in case they are "
"changed by UI operator (examples are target amperage, "
"polarity or ultrasonic timings)."
#END

STR	ST1
INIT	"3 C0 C63 0 A0 A32 0 B0 B47 0 F0 F23 0 W0 W15 0"
INIT	"3 R0 R7 0 R9 R47 0 D0 D3 0 D7 D23 0"

// Rung $tFirstScan#3
// Offset 32
#BEGIN FMT_COMMENT 
"Initialize specific modbus registers to 0."
#END

STR	ST1
INIT	"3 MC1 MC10 0 MC101 MC123 0"

// Rung $tFirstScan#4
// Offset 40
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C ENABLE/DISABLE "
"%3E%3E%3E%3E</FONT><br> <br>Set various enable/bypass "
"registers to test or enable/disable subsections of code.  "
"Not determined yet if from config file, retentive memory, "
"GUI, or other method.  Be sire to reset once done testing "
"and restart the PLC program mode for first scan to take "
"affect."
#END

STR	ST1
COPY	0x1	"4 0x0 0 C33 1 0x0 1 C26 1 0x0 1 C27 1 0x0 1 C28 1 0x0 1 C29 1 0x0 0 C24 1 0x0 0 C45 1 0x0 0 C47 1 0x0 1 C48 1 0x0 1 C38 1 0x0 0 C39 1 0x0 0 C50 1 0x0 1 C51 1 0x0 1 C52 1 0x0 0 C56 1 0x0 1 C34 1 0x0 1 C41 1 0x0 1 C42 1 0x0 1 C43 1 0x0 1 C59 1"

// Rung $tFirstScan#5
// Offset 65
#BEGIN FMT_COMMENT 
"Load or set default values to original hard-coded run-time "
"values.  Future could load configurations from common "
"sources (UI, file, LEDs, etc).  Not determined yet if from "
"config file, retentive memory, GUI, or other method."
#END

STR	ST1
COPY	0x1	"4 0x0 60 F3 1 0x0 10 F1 1 0x0 30 F2 1 0x0 70 F0 1 0x0 1.7 F10 1 0x0 1000 F4 1 0x0 1000 F9 1 0x0 2000 F7 1 0x0 2000 F8 1 0x0 1000 F5 1 0x0 1000 F6 1 0x0 1 F11 1 0x0 1 F12 1 0x0 1 F13 1 0x0 31 F14 1 0x0 3.5 F15 1 0x0 36000 F16 1 0x0 1000 F17 1 0x0 23400 F18 1 0x0 75.0 F19 1 0x0 30.0 F20 1 0x0 60 F21 1"

// Rung $tFirstScan#6
// Offset 118
#BEGIN FMT_COMMENT 
"Set various ranges for errors, warnings, and interlocks.  "
"Not determined yet if from config file, retentive memory, "
"GUI, or other method."
#END

STR	ST1
COPY	0x1	"4 0x0 3 R0 1 0x0 5 R1 1 0x0 29 R2 1 0x0 35 R3 1 0x0 1.5 R4 1 0x0 2 R5 1 0x0 4 R6 1 0x0 5.5 R7 1 0x0 10 R20 1 0x0 14 R21 1 0x0 30 R22 1 0x0 40 R23 1 0x0 20 R24 1 0x0 15 R25 1 0x0 200 R26 1"

// Rung $tFirstScan#7
// Offset 155
#BEGIN FMT_COMMENT 
"Set various timeout values for errors, warnings, and "
"interlocks.  Not determined yet if from config file, "
"retentive memory, GUI, or other method."
#END

STR	ST1
COPY	0x1	"4 0x0 120000 TO0 1 0x0 120000 TO1 1 0x0 120000 TO2 1 0x0 120000 TO3 1 0x0 120000 TO4 1 0x0 300000 TO5 1 0x0 120000 TO6 1"

// Rung $tFirstScan#8
// Offset 181
#BEGIN FMT_COMMENT 
"Set check rules (warnings, interlocks, errors) to be "
"either enabled or disabled for individual testing.  Be sure "
"to reset once done testing and restart the PLC program "
"mode.  First, INIT all B registers to 0 or 1 (depending "
"upon desired affect), then COPY select B registers to 1 to "
"test individual rules.  Several combinations are possible.  "
"Remember to check the CEnableErrors, CEnableInterlocks, and "
"CEnableWarnings registers above too."
#END

STR	ST1
COPY	0x1	"4 0x0 0 B0 1 0x0 0 B1 1 0x0 0 B2 1 0x0 1 B3 1 0x0 1 B4 1 0x0 0 B5 1 0x0 1 B6 1 0x0 1 B7 1 0x0 0 B8 1 0x0 0 B9 1 0x0 0 B10 1 0x0 0 B11 1 0x0 0 B12 1 0x0 0 B13 1 0x0 0 B14 1 0x0 1 B15 1 0x0 1 B16 1 0x0 0 B17 1 0x0 0 B18 1 0x0 1 B19 1 0x0 1 B20 1 0x0 0 B21 1 0x0 1 B22 1 0x0 1 B23 1 0x0 0 B24 1 0x0 0 B25 1 0x0 0 B26 1 0x0 1 B27 1 0x0 1 B28 1 0x0 1 B29 1 0x0 1 B30 1 0x0 1 B31 1 0x0 1 B32 1"

// Rung $tFirstScan#9
// Offset 219
#BEGIN FMT_COMMENT 
"Load original default values into actual default working "
"variables that do not need any manipulation like "
"milliseconds.  If these change downstream or via GUI, "
"alternate approach is needed between working and saving of "
"the new default values.  Not determined yet if from config "
"file, retentive memory, GUI, or other method.<br> <br>"
"Set debounce values..."
#END

STR	ST1
COPY	0x1	"4 0x0 F4 D7 1 0x0 F9 D12 1 0x0 F5 D8 1 0x0 F6 D9 1 0x0 F7 D10 1 0x0 F8 D11 1 0x0 F5 D16 1 0x0 F6 D17 1"

// Rung $tFirstScan#10
// Offset 240
#BEGIN FMT_COMMENT 
"Set scaling parameters for each device.  Different "
"installs/products could have different ranges depending "
"upon product.  Rather than finding the SCALE command, can "
"enter here."
#END

STR	ST1
COPY	0x1	"4 0x0 0 SC0 1 0x0 16383 SC1 1 0x0 0 SC2 1 0x0 R26 SC3 1 0x0 0 SC4 1 0x0 32767 SC5 1 0x0 0 SC6 1 0x0 100 SC7 1 0x0 0 SC8 1 0x0 16383 SC9 1 0x0 -2 SC10 1 0x0 2 SC11 1 0x0 6553 SC12 1 0x0 32767 SC13 1 0x0 -10 SC14 1 0x0 70 SC15 1 0x0 0 SC16 1 0x0 32767 SC17 1 0x0 -40 SC18 1 0x0 85 SC19 1 0x0 6553 SC20 1 0x0 32767 SC21 1 0x0 0 SC22 1 0x0 25 SC23 1 0x0 6553 SC24 1 0x0 32767 SC25 1 0x0 0 SC26 1 0x0 14 SC27 1 0x0 0 SC28 1 0x0 32767 SC29 1 0x0 0 SC30 1 0x0 15 SC31 1 0x0 6553 SC32 1 0x0 32767 SC33 1 0x0 8 SC34 1 0x0 0 SC35 1 0x0 0 SC36 1 0x0 R26 SC37 1 0x0 3276 SC38 1 0x0 29490 SC39 1 0x0 0 SC40 1 0x0 32767 SC41 1 0x0 0 SC42 1 0x0 32767 SC43 1 0x0 0 SC44 1 0x0 32767 SC45 1 0x0 0 SC46 1 0x0 32767 SC47 1"

// Rung $tFirstScan#11
// Offset 341
#BEGIN FMT_COMMENT 
"Scaling for acid pump PID in regards to pH."
#END

STR	ST1
COPY	0x1	"4 0x0 0 SC48 1 0x0 14 SC49 1 0x0 0 SC50 1 0x0 14 SC51 1 0x0 0 SC52 1 0x0 25 SC53 1 0x0 0 SC54 1 0x0 25 SC55 1 0x0 0 SC56 1 0x0 100 SC57 1 0x0 0 SC58 1 0x0 100 SC59 1"

// Rung $tFirstScan#12
// Offset 370
#BEGIN FMT_COMMENT 
"Set the default path and file name for log files using the "
"SysName of the assigned PLC."
#END

STR	ST1
STRCOPY	SysName	SS1	1
STRINSERT	"""data\"""	SS1	0

// Rung $tFirstScan#13
// Offset 379
#BEGIN FMT_COMMENT 
"Set the default tuning parameters for the acid pump PID control."
#END

STR	ST1
AND	C50
PIDINIT	AcidPumpCtlPID	276	295.432	9.208	0

// Rung $tFirstScan#14
// Offset 388
#BEGIN FMT_COMMENT 
"Set the default tuning parameters for the proportional "
"valve PID control."
#END

STR	ST1
AND	C51
PIDINIT	PropValveCtlPID	100	4.5	3.809	0

// Rung $tFirstScan#15
// Offset 397
#BEGIN FMT_COMMENT 
"Set the default tuning parameters for the conductivity PID control."
#END

STR	ST1
AND	C52
PIDINIT	ConductvyCtlPID	100	2.544	11.91	1.985

// Rung $tFirstScan#16
// Offset 407
#BEGIN FMT_COMMENT 
"Set timed variables back to original default if a previous "
"value was not in retentive memory (i.e. was zero value).  "
"Also, convert original saved default values from seconds to "
"milliseconds for those registers that need milliseconds."
#END

STR	ST1
MATH	D6	"ROUND(F3 * 1000)"
MATH	D4	"ROUND(F1 * 1000)"
MATH	D5	"ROUND(F2 * 1000)"

// Rung $tFirstScan#17
// Offset 435
#BEGIN FMT_COMMENT 
"Set remote on here rather than using software forces.  "
"This is a reserved register for sites requiring an external "
"event to start/stop processing."
#END

STR	ST1
COPY	0x1	"4 0x0 1 C0 1"

// Rung $tFirstScan#18
// Offset 441
STR	ST1
COPY	0x1	"4 0x0 ""First scan complete."" SL0 1"

// End of Code Block $tFirstScan
$TSKEND	$tFirstScan

// Beginning of Code Block $tTopOfScan
$TSK	$tTopOfScan

// Rung $tTopOfScan#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br>"
"<FONT tsize=5>$tTopOfScan</FONT><br><FONT tsize=5></FONT> "
"<br>This is the first ladder task before the main ladder "
"steps for each loop.  By taking any physical inputs and/or "
"Modbus and/or any other device supplying updates and "
"writing them into memory registers for all ladder "
"operations for processing until the bottom of the scan in "
"which all outputs are set."
#END

NOP

// Rung $tTopOfScan#2
// Offset 1
#BEGIN FMT_COMMENT 
"Read in incoming digital bits (X) and debounce signal for "
"stability into working variables (C).<br> "
#END

STR	X2
DEBOUNCE	D13	D14	C9

// Rung $tTopOfScan#3
// Offset 6
STR	X8
DEBOUNCE	D13	D14	C10

// Rung $tTopOfScan#4
// Offset 11
STR	X2
DEBOUNCE	D13	D14	C46

// Rung $tTopOfScan#5
// Offset 16
STR	X4
DEBOUNCE	D13	D14	C11

// Rung $tTopOfScan#6
// Offset 21
STR	X5
DEBOUNCE	D13	D14	C12

// Rung $tTopOfScan#7
// Offset 26
STR	X6
DEBOUNCE	D13	D14	C13

// Rung $tTopOfScan#8
// Offset 31
STR	X7
DEBOUNCE	D13	D14	C14

// Rung $tTopOfScan#9
// Offset 36
STR	X8
DEBOUNCE	D13	D14	C15

// Rung $tTopOfScan#10
// Offset 41
STR	X9
DEBOUNCE	D13	D14	C25

// Rung $tTopOfScan#11
// Offset 46
STR	X10
ANDN	MC8
ANDN	C57
DEBOUNCE	D15	32768	C35

// Rung $tTopOfScan#12
// Offset 53
STR	X11
DEBOUNCE	D15	32768	C36

// Rung $tTopOfScan#13
// Offset 58
#BEGIN FMT_COMMENT 
"Read all scaled analog inputs (WX) into local memory "
"decimal variables (R).  Use unscaled analog inputs (WX) for "
"original raw values from devices."
#END

STR	ST1
MAPIO	"2 WX23 W0 WX4 W1 WX2 W8 WX21 W3 WX1 W4 WX20 W5 WX3 W6 WX22 W7"

// Rung $tTopOfScan#14
// Offset 78
#BEGIN FMT_COMMENT 
"Convert raw (WX) values into scaled values per each "
"individual device specs."
#END

STR	ST1
SCALE	W0	SC0	SC1	SC2	SC3	R18
SCALE	W1	SC4	SC5	SC6	SC7	R14
SCALE	W3	SC12	SC13	SC14	SC15	R16
SCALE	W4	SC16	SC17	SC18	SC19	R17
SCALE	W5	SC20	SC21	SC22	SC23	R9
SCALE	W6	SC24	SC25	SC26	SC27	R13
SCALE	W7	SC28	SC29	SC30	SC31	R27
SCALE	W8	SC32	SC33	SC34	SC35	R28

// Rung $tTopOfScan#15
// Offset 127
#BEGIN FMT_COMMENT 
"If on a system where galvanostat doesn't return a feedback "
"amperage, set the feedback to the target out amperagee."
#END

STRN	C45
COPY	0x1	"4 0x0 R8 R18 1"

// Rung $tTopOfScan#16
// Offset 134
#BEGIN FMT_COMMENT 
"If flow rate returns negative, set back to zero."
#END

STRLT	R9	0.06
COPY	0x1	"4 0x0 0 R9 1"

// Rung $tTopOfScan#17
// Offset 145
#BEGIN FMT_COMMENT 
"If voltage approaches zero, set to zero."
#END

STRLT	R27	0.06
COPY	0x1	"4 0x0 0 R27 1"

// Rung $tTopOfScan#18
// Offset 156
#BEGIN FMT_COMMENT 
"If amperage approaches zero, set to zero."
#END

STRLT	R18	0.06
COPY	0x1	"4 0x0 0 R18 1"

// Rung $tTopOfScan#19
// Offset 167
#BEGIN FMT_COMMENT 
"Use FILTER command against the incoming voltage reading to "
"slow down the drastic changes, especially during polarity "
"switching."
#END

STR	ST1
FILTER	2	R27	R19

// Rung $tTopOfScan#20
// Offset 171
STR	C45
MATH	R19	"R19 * 10"
MATH	R18	"R18 * 10"

// Rung $tTopOfScan#21
// Offset 188
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C DEMO MODE "
"%3E%3E%3E%3E</FONT><br><FONT tsize=5></FONT> <br>If in "
"DemoMode, overwrite any values from above."
#END

STR	C33
COPY	0x1	"4 0x0 5.55 R18 1 0x0 55.5 R14 1 0x0 2.2 R15 1 0x0 25.5 R16 1 0x0 35.5 R17 1 0x0 4.44 R9 1 0x0 2.2 R13 1 0x0 7.77 R19 1 0x0 4000 R28 1"

// Rung $tTopOfScan#22
// Offset 219
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C WEB PAGES "
"%3E%3E%3E%3E</FONT><br> <br>Refresh web pages from SD card "
"to RAM."
#END

STR	C38
ENTASK	TaskLoadWebPages	0x0	0	0x1

// Rung $tTopOfScan#23
// Offset 224
#BEGIN FMT_COMMENT 
"On leading edge of green button press or leading edge of "
"HMI start state, set local bit.<br>"
"Output the button press to modbus (MC3) so that it can be "
"interpreted by the UI as a command to start."
#END

STRPD	C35
ORPD	MC1
COPY	0x1	"4 0x0 1 C1 1 0x0 0 C36 1 0x0 0 MC1 1"

// Rung $tTopOfScan#24
// Offset 235
#BEGIN FMT_COMMENT 
"On leading edge of red button press or trailing edge of "
"HMI entered stop state, set local bit.<br>"
"Output the button press to modbus (MC4) so that it can be "
"interpreted by the UI as a command to stop."
#END

STRPD	C36
ORPD	MC2
ORE	D0	SM_Halted
COPY	0x1	"4 0x0 0 C1 1 0x0 0 C35 1 0x0 0 MC2 1"

// Rung $tTopOfScan#25
// Offset 251
STR	MC8
ENTASK	TaskRoutineTest	0x0	0	0x1

// End of Code Block $tTopOfScan
$TSKEND	$tTopOfScan

// Beginning of Code Block $Main
$PRGRM	$Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br><FONT tsize=5>$Main</FONT><br>"
"<FONT tsize=5></FONT> <br>This is the main ladder loop "
"launched afte the TopOfScan.  The BottomOfScan is launched "
"after this Main loop.  This Main task starts and stops "
"other programs and tasks."
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C ERRORS / WARNINGS / INFO "
"%3E%3E%3E%3E</FONT><br> <br>Start side programs to monitor "
"conditions (errors, warnings and info) that may or may not "
"require a temporary halt of processing.  If the condition "
"returns to normal, processing may proceed, otherwise, local "
"operators may need to resolve the issue and restart.  See "
"the programs for further details."
#END

STR	C28
RUN	ProgInfo

// Rung $Main#3
// Offset 4
STR	C26
RUN	ProgErrors

// Rung $Main#4
// Offset 7
STR	C27
RUN	ProgWarnings

// Rung $Main#5
// Offset 10
STR	C59
RUN	ProgNotices

// Rung $Main#6
// Offset 13
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C GENERATOR "
"%3E%3E%3E%3E</FONT><br> <br>If the system bit is on and "
"there are no errors and there are no interlocks, start the "
"tasks which handle the amperage, ultrasonics, and "
"polarity.  The task should stay active and running as long "
"as these conditions are met.  Also, turn on one of the "
"H-bridge relays."
#END

STRE	D0	SM_Running
ENTASK	TaskGalvanostat	0x0	0	0x1
ENTASK	TaskUltrasonics	0x0	0	0x1
ENTASK	TaskPolarity	0x0	0	0x1

// Rung $Main#7
// Offset 30
#BEGIN FMT_COMMENT 
"<FONT tsize=5></FONT>But, if the system bit is off, or "
"there is an error, or there is an interlock, or the system "
"mode is not correct, turn off the generator task.  Although "
"halting a task should automatically turn off all embedded "
"bits to that task, perform a copy anyway to make sure."
#END

STRNE	D0	SM_Running
HALT	TaskGalvanostat
HALT	TaskUltrasonics
HALT	TaskPolarity
COPY	0x1	"4 0x0 0 C5 1 0x0 0 R8 1 0x0 0 C3 1 0x0 0 C4 1 0x0 0 C30 1 0x0 0 C31 1 0x0 0 C37 1"

// Rung $Main#8
// Offset 50
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C MAIN INLET VALVE "
"%3E%3E%3E%3E</FONT><br> <br>If the system is running, open "
"up the main valve and close when not running."
#END

STRN	MC602
AND	C60
STR	MC602
AND	MC603
ORSTR
COPY	0x1	"4 0x0 1 C16 1"

// Rung $Main#9
// Offset 60
#BEGIN FMT_COMMENT 
" "
#END

STRN	MC8
STRN	MC602
ANDN	C60
STR	MC602
ANDN	MC603
ORSTR
ANDSTR
COPY	0x1	"4 0x0 0 C16 1"

// Rung $Main#10
// Offset 72
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C DRAIN PUMP "
"%3E%3E%3E%3E</FONT><br> <br>If the UI is forcing on/off the "
"drain pump, set elements needed."
#END

STR	MC610
DUPBOOL
AND	MC611
COPY	0x1	"4 0x0 1 C7 1"
POPBOOL
ANDN	MC611
COPY	0x1	"4 0x0 0 C7 1"

// Rung $Main#11
// Offset 87
#BEGIN FMT_COMMENT 
"<FONT tsize=5><FONT tsize=5>%3C%3C%3C%3C ACID PUMP PID "
"%3E%3E%3E%3E</FONT><br> <br></FONT><FONT tsize=3>Start/stop "
"PID task for acid pump controlling ph.</FONT>"
#END

STR	C60
AND	C50
ENTASK	TaskAcidPumpPID	0x0	0	0x1
COPY	0x1	"4 0x0 1 C6 1"

// Rung $Main#12
// Offset 98
#BEGIN FMT_COMMENT 
" "
#END

STRN	C60
HALT	TaskAcidPumpPID
COPY	0x1	"4 0x0 0 R10 1 0x0 0 C6 1"

// Rung $Main#13
// Offset 107
#BEGIN FMT_COMMENT 
"<FONT tsize=5><FONT tsize=5><FONT tsize=5><FONT "
"tsize=5>%3C%3C%3C%3C PROPORTIONAL VALVE PID "
"%3E%3E%3E%3E</FONT><br> <br></FONT><FONT tsize=3>Start/stop "
"PID task for proportional valve controlling flow "
"rate.</FONT></FONT><br></FONT>"
#END

STRN	MC602
AND	C60
AND	C51
STR	MC602
AND	MC603
ORSTR
ENTASK	TaskPropValvePID	0x0	0	0x1
COPY	0x1	"4 0x0 1 C49 1"

// Rung $Main#14
// Offset 122
STRN	MC8
DUPBOOL
ANDN	MC602
ANDN	C60
HALT	TaskPropValvePID
POPBOOL
AND	MC602
ANDN	MC603
COPY	0x1	"4 0x0 0 C49 1"

// Rung $Main#15
// Offset 135
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C SYSTEM MODE "
"%3E%3E%3E%3E</FONT><br> <br>Upon each and every loop, "
"regardelss if system is on or off, determine the current "
"status of the system (i.e. Ready, Running, Alarm, etc) and "
"set registers accordingly for further use.  This isn't "
"defined as a task or program, which may run in different "
"scans, but instead as a subroutine, which will run as part "
"of the current scan, every time, right now.<br> <br>"
"Hierarchy of Status:<br> <br>"
"1)  If the system determines no errors and there are no "
"interlocks:<br>RUNNING, PROCESSING, GENERATING, ON, "
"NORMAL<br> <br>2)  If the system determines an interruption "
"event:<br>PAUSED, WAITING, PENDING, INTERLOCKED, STARTUP<br>"
" <br>3)  If the system determines an error event:<br>"
"ALARM, ERROR, STOPPED, HALTED, ALERT, OFF<br> <br>"
"4)  Else<br>READY, IDLE, STANDBY, OFF, OPERATOR, "
"MAINTENANCE, MANUAL"
#END

STR	ST1
RUN	ProgStateMachine

// Rung $Main#16
// Offset 138
#BEGIN FMT_COMMENT 
"<FONT tsize=5><FONT tsize=5>%3C%3C%3C%3C CONDUCTIVITY PID "
"%3E%3E%3E%3E</FONT><br> <br></FONT><FONT tsize=3>Start/stop "
"PID task for acid pump controlling conductivity.</FONT>"
#END

STR	C60
AND	C52
ENTASK	TaskConductvyPID	0x0	0	0x1
COPY	0x1	"4 0x0 1 C6 1"

// Rung $Main#17
// Offset 149
STRN	C60
HALT	TaskConductvyPID
COPY	0x1	"4 0x0 0 R10 1 0x0 0 C6 1"

// Rung $Main#18
// Offset 158
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C FILE LOG %3E%3E%3E%3E</FONT><br>"
" <br>If the system is running, log data entry at "
"pre-determined time."
#END

STR	ST1
FILELOG	@SDCardFS	SS1	0x22	SS0	"2 D0 4 C0 3 R8 2 R13 1 R16 2 R19 1 TT0 4"	"TimeStamp() "","" D0 "","" D1 "","" D2 "","" D3 "","" C0 "","" C1 "","" C2 "","" R8 "","" R9 "","" R13 "","" R16 "","" R17 "","" R19 "","" TT0 "","" TT1 "","" TT2 "","" TT3 ""$0D$0A"""	0x0	C19	C20

// Rung $Main#19
// Offset 319
STR	ST1
ENTASK	TaskUpdPlatePerc	0x0	0	0x1

// Rung $Main#20
// Offset 324
STR	ST1
ENTASK	TaskResetPlates	0x0	0	0x1

// Rung $Main#21
// Offset 329
STR	C61
RUN	ProgDraining

// End of Code Block $Main
$PGMEND	$Main

// Beginning of Code Block TaskGalvanostat
$TSK	TaskGalvanostat

// Rung TaskGalvanostat#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br> <br>"
"<FONT tsize=5>TaskGalvanostat</FONT><br><FONT "
"tsize=5></FONT> <br>"
"<FONT tsize=3>This independent task is started and stopped "
"via the Main control loop ladder.  The generator supporting "
"devices are started and stopped here.  The generator flow "
"cell has the galvanostat, ultrasonics, and polarity "
"switching.  To disable a specific device, its values could "
"be preconfigured as zero.</FONT>"
#END

NOP

// Rung TaskGalvanostat#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=3></FONT> "
#END

STRGT	F0	0
DUPBOOL
AND	C32
COPY	0x1	"4 0x0 0 C5 1 0x0 F0 R8 1"
POPBOOL
ANDN	C32
COPY	0x1	"4 0x0 1 C5 1 0x0 F0 R8 1"

// Rung TaskGalvanostat#3
// Offset 23
#BEGIN FMT_COMMENT 
"If the target amperage is equal or below zero, make sure "
"the galvanostat is off/disabled and amperage is zero.<br> "
#END

STRLE	F0	0
COPY	0x1	"4 0x0 0 C5 1 0x0 0 R8 1"

// End of Code Block TaskGalvanostat
$TSKEND	TaskGalvanostat

// Beginning of Code Block ProgInfo
$PRGRM	ProgInfo

// Rung ProgInfo#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br><FONT tsize=5>ProgInfo</FONT><br>"
"<FONT tsize=5></FONT> <br>This separate independent program "
"loops thru conditions looking for those that may need to be "
"reported, but not necessary halt or pause the system.  The "
"reverse condition may also be checked waiting and hoping "
"the warning eventually clears, thus allowing the process to "
"continue in the long term.  Or, the warnings may be reset "
"at first and reprocessed over and over.  The warnings "
"aren't read in order, but final assignment is ordered from "
"those that are least important to most important so that "
"all conditions can be checked, but leaving the routine with "
"the most important code recorded."
#END

NOP

// Rung ProgInfo#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Low Web Pages %3E%3E%3E%3E</FONT>"
#END

STR	C38
AND	B26
DUPBOOL
ANDN	SE0
AND	SE2
AND	SE4
DEBOUNCE	D8	D9	A26
POPBOOL
AND	SE0
STRN	SE2
ORN	SE4
ANDSTR
DEBOUNCE	D8	D9	A26

// Rung ProgInfo#3
// Offset 20
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Acid Tank Low "
"%3E%3E%3E%3E</FONT><br> "
#END

STR	C9
AND	B8
DEBOUNCE	D8	D9	A8

// Rung ProgInfo#4
// Offset 26
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Voltage Increasing %3E%3E%3E%3E</FONT>"
#END

STRGE	R19	R20
AND	B10
DEBOUNCE	D8	D9	A10

// Rung ProgInfo#5
// Offset 35
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Temperature Increasing %3E%3E%3E%3E</FONT>"
#END

STRGE	R17	R22
AND	B21
DEBOUNCE	D8	D9	A21

// Rung ProgInfo#6
// Offset 44
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Outer Plates Low %25 %3E%3E%3E</FONT>"
#END

STRLE	TT9	R24
AND	B15
DEBOUNCE	D8	D9	A15

// Rung ProgInfo#7
// Offset 53
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Outer Plates Low %25 %3E%3E%3E</FONT>"
#END

STRLE	TT11	R24
AND	B30
DEBOUNCE	D8	D9	A30

// Rung ProgInfo#8
// Offset 62
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Set Warning Codes ON/OFF "
"%3E%3E%3E%3E</FONT> "
#END

STR	C2
DUPBOOL
AND	A26
COPY	0x1	"4 0x0 A_LoadWebPages D3 1 0x0 1 C23 1"
POPBOOL
DUPBOOL
AND	A8
COPY	0x1	"4 0x0 A_AcidTankLow D3 1 0x0 1 C23 1"
POPBOOL
DUPBOOL
AND	A10
COPY	0x1	"4 0x0 A_VoltInfo D3 1 0x0 1 C23 1"
POPBOOL
DUPBOOL
AND	A21
COPY	0x1	"4 0x0 A_TempInfo D3 1 0x0 1 C23 1"
POPBOOL
DUPBOOL
AND	A30
COPY	0x1	"4 0x0 A_InPlatesInfo D3 1 0x0 1 C23 1"
POPBOOL
DUPBOOL
AND	A15
COPY	0x1	"4 0x0 A_OutPlatesInfo D3 1 0x0 1 C23 1"
POPBOOL
ANDN	A8
ANDN	A10
ANDN	A21
ANDN	A15
ANDN	A30
COPY	0x1	"4 0x0 A_NoAlarm D3 1 0x0 0 C23 1"

// Rung ProgInfo#9
// Offset 142
STRN	C2
COPY	0x1	"4 0x0 A_NoAlarm D3 1 0x0 0 C23 1"

// End of Code Block ProgInfo
$PGMEND	ProgInfo

// Beginning of Code Block ProgErrors
$PRGRM	ProgErrors

// Rung ProgErrors#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br>"
"<FONT tsize=5>ProgErrors</FONT><br><FONT tsize=5></FONT> "
"<br>This separate independent program loops thru conditions "
"looking for those that may halt the entire system.  The "
"reverse condition may not be checked, but cleared by "
"operators and restarted manually.  The errors are read in "
"any order, but ordered from those that are least important "
"to most important so that all conditions can be checked, "
"but leaving the routine with the most important recorded "
"code."
#END

NOP

// Rung ProgErrors#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Acid Tank Empty "
"%3E%3E%3E%3E</FONT><br> "
#END

STR	C25
AND	B9
DEBOUNCE	D7	32768	A9

// Rung ProgErrors#3
// Offset 7
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Reagent Tank Overflow "
"%3E%3E%3E%3E</FONT><br> "
#END

STR	C14
AND	B12
DEBOUNCE	D7	32768	A12

// Rung ProgErrors#4
// Offset 13
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Voltage Too High "
"%3E%3E%3E%3E</FONT><br> "
#END

STRGE	R19	R21
AND	B11
DEBOUNCE	D7	32768	A11

// Rung ProgErrors#5
// Offset 22
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Temperature Too High %3E%3E%3E%3E</FONT>"
#END

STRGE	R17	R23
AND	B5
DEBOUNCE	D7	32768	A5

// Rung ProgErrors#6
// Offset 31
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Startup Timeout %3E%3E%3E</FONT>"
#END

STR	T17.Done
AND	B32
DEBOUNCE	D7	10000	A32

// Rung ProgErrors#7
// Offset 37
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C TIMEOUTS %3E%3E%3E%3E</FONT><br> "
#END

STR	A3
AND	B19
ONDTMR	T7	TO0	A19

// Rung ProgErrors#8
// Offset 42
#BEGIN FMT_COMMENT 
" "
#END

STR	A4
AND	B20
ONDTMR	T8	TO1	A20

// Rung ProgErrors#9
// Offset 47
STR	A6
AND	B22
ONDTMR	T9	TO3	A22

// Rung ProgErrors#10
// Offset 52
STR	A7
AND	B23
ONDTMR	T15	TO2	A23

// Rung ProgErrors#11
// Offset 57
STR	A1
AND	B17
ONDTMR	T10	TO4	A17

// Rung ProgErrors#12
// Offset 62
STR	A2
AND	B18
ONDTMR	T11	TO5	A18

// Rung ProgErrors#13
// Offset 67
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Set Error Codes On/Off "
"%3E%3E%3E%3E</FONT><br><FONT tsize=5></FONT> "
#END

STRE	D0	SM_Idle
ORE	D0	SM_Running
ORPD	C62
DUPBOOL
AND	A12
COPY	0x1	"4 0x0 A_ReagntOverFlow D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A9
COPY	0x1	"4 0x0 A_AcidTankEmpty D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A11
COPY	0x1	"4 0x0 A_VoltAlarm D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A5
COPY	0x1	"4 0x0 A_TempAlarm D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A19
COPY	0x1	"4 0x0 A_CondRangeTO D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A20
COPY	0x1	"4 0x0 A_FlowRangeTO D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A22
COPY	0x1	"4 0x0 A_GenNotFullTO D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A17
COPY	0x1	"4 0x0 A_ORPRangeTO D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A18
COPY	0x1	"4 0x0 A_pHRangeTO D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A23
COPY	0x1	"4 0x0 A_GenEmptyTO D2 1 0x0 1 C21 1"
POPBOOL
AND	A32
COPY	0x1	"4 0x0 A_StartupTimeout D2 1 0x0 1 C21 1"

// Rung ProgErrors#14
// Offset 198
STRND	C62
COPY	0x1	"4 0x0 A_NoAlarm D2 1 0x0 0 C21 1"

// End of Code Block ProgErrors
$PGMEND	ProgErrors

// Beginning of Code Block TaskUltrasonics
$TSK	TaskUltrasonics

// Rung TaskUltrasonics#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br> <br>"
"<FONT tsize=5>TaskUltrasonics</FONT><br><FONT "
"tsize=5></FONT> <br>"
"<FONT tsize=3>This independent task is started and stopped "
"via the Main control loop ladder.  The generator supporting "
"devices are started and stopped here.  The generator flow "
"cell has the galvanostat, ultrasonics, and polarity "
"switching.  To disable a specific device, its values could "
"be preconfigured as zero.</FONT>"
#END

NOP

// Rung TaskUltrasonics#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C ULTRASONICS - INDEPENDENT "
"%3E%3E%3E%3E</FONT><br> <br>If values are above zero, and "
"NOT syncing to polarity, start the interval timer, turn on "
"ultrasonics, then start another timer for duration.  Once "
"all complete, reset and start over.<br> "
#END

STRGT	D5	0
ANDGT	D4	0
ANDN	C24
TMRDOWN	T1	D5

// Rung TaskUltrasonics#3
// Offset 12
STRGT	D5	0
ANDGT	D4	0
ANDN	C24
AND	T1.Done
COPY	0x1	"4 0x0 1 C3 1"
TMRDOWN	T2	D4

// Rung TaskUltrasonics#4
// Offset 29
STRGT	D5	0
ANDGT	D4	0
ANDN	C24
AND	T1.Done
AND	T2.Done
COPY	0x1	"4 0x0 0 C3 1"
RSTT	T1

// Rung TaskUltrasonics#5
// Offset 46
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C ULTRASONICS - SYNCRONIZED "
"%3E%3E%3E%3E</FONT><br> <br>If values are above zero, and "
"syncing to polarity, set values as soon as the polarity "
"switched.  Once that is detected, turn on ultrasonics, "
"start a timer, then reset for next polarity event.<br> "
#END

STRGT	D4	0
AND	C24
ANDPD	C32
COPY	0x1	"4 0x0 1 C37 1 0x0 1 C3 1"

// Rung TaskUltrasonics#6
// Offset 59
STRGT	D4	0
AND	C24
AND	C37
TMRDOWN	T6	D4
AND	T6.Done
COPY	0x1	"4 0x0 0 C37 1 0x0 0 C3 1"

// End of Code Block TaskUltrasonics
$TSKEND	TaskUltrasonics

// Beginning of Code Block TaskPolarity
$TSK	TaskPolarity

// Rung TaskPolarity#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br> <br>"
"<FONT tsize=5>TaskPolarity</FONT><br><FONT tsize=5></FONT> "
"<br><FONT tsize=3>This independent task is started and "
"stopped via the Main control loop ladder.  The generator "
"supporting devices are started and stopped here.  The "
"generator flow cell has the galvanostat, ultrasonics, and "
"polarity switching.  To disable a specific device, its "
"values could be preconfigured as zero.</FONT>"
#END

NOP

// Rung TaskPolarity#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C SINGLE RELAY POLARITY "
"%3E%3E%3E%3E</FONT><br> <br>If polarity duration is above "
"zero (zero is disabled), start polarity duration timer.  If "
"duration is above zero, and when timer finishes, toggle the "
"output bit for polarity reversing of the galvanostat "
"relays.  Also, set variable for setting the beginning of "
"the polarity switching.  This will alert the galvanostat "
"task.  This is for single relay systems."
#END

STRGT	D6	0
ANDN	C32
ANDN	T0.Done
TMR	T0	D6

// Rung TaskPolarity#3
// Offset 9
STRGT	D6	0
ANDN	C32
AND	T0.Done
PONOFF	C4	ST1023
COPY	0x1	"4 0x0 1 C32 1"

// Rung TaskPolarity#4
// Offset 22
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C H-BRIDGE RELAY POLARITY "
"%3E%3E%3E%3E</FONT><br> <br>For H-Bridge relay sets, once "
"main duration timer completes above, turn off galvanostat "
"for a lower power switching of relay coils.  The "
"galvanostat is turned off in its task when the bit "
"CPolaritySwitch is enabled.<br> <br>"
"If not switching, turn on appropriate relays depending upon "
"the polarity value.  This is really only needed on startup "
"as the logic below will handle the actual switch.  However, "
"on first cycle, this rung sets the first relay bank."
#END

STRGT	D6	0
ANDN	C32
DUPBOOL
AND	C4
COPY	0x1	"4 0x0 1 C30 1 0x0 0 C31 1"
POPBOOL
ANDN	C4
COPY	0x1	"4 0x0 0 C30 1 0x0 1 C31 1"

// Rung TaskPolarity#5
// Offset 43
#BEGIN FMT_COMMENT 
" If switching, give time for galvanostat(s) to turn "
"off.<br> "
#END

STRGT	D6	0
AND	C32
TMRDOWN	T3	250

// Rung TaskPolarity#6
// Offset 50
#BEGIN FMT_COMMENT 
"Once timer finishes, turn off relay banks and start "
"another timer to allow time for that to complete.<br> "
#END

STRGT	D6	0
AND	C32
AND	T3.Done
TMRDOWN	T4	250
COPY	0x1	"4 0x0 0 C30 1 0x0 0 C31 1"

// Rung TaskPolarity#7
// Offset 64
#BEGIN FMT_COMMENT 
"Once that timer completes for relays to turn off, switch "
"relays and start another timer for that to complete.<br> "
#END

STRGT	D6	0
AND	C32
AND	T3.Done
AND	T4.Done
DUPBOOL
AND	ST1
TMRDOWN	T5	250
POPBOOL
DUPBOOL
AND	C4
COPY	0x1	"4 0x0 1 C30 1"
POPBOOL
ANDN	C4
COPY	0x1	"4 0x0 1 C31 1"

// Rung TaskPolarity#8
// Offset 90
#BEGIN FMT_COMMENT 
"Once all timers complete, reset the switching variable.  "
"This will tell the galvanostat to turn back on too.<br> "
#END

STRGT	D6	0
AND	C32
AND	T3.Done
AND	T4.Done
AND	T5.Done
COPY	0x1	"4 0x0 0 C32 1"

// End of Code Block TaskPolarity
$TSKEND	TaskPolarity

// Beginning of Code Block ProgDosingPump
$PRGRM	ProgDosingPump

// Rung ProgDosingPump#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><FONT "
"tsize=5></FONT> <br> <br>"
"<FONT tsize=5>ProgDosingPump</FONT><br><FONT "
"tsize=5></FONT> <br>pending"
#END

NOP

// End of Code Block ProgDosingPump
$PGMEND	ProgDosingPump

// Beginning of Code Block ProgWarnings
$PRGRM	ProgWarnings

// Rung ProgWarnings#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br>"
"<FONT tsize=5>ProgWarnings</FONT><FONT tsize=5></FONT><br>"
"This separate independent program loops thru conditions "
"looking for those that may pause other parts of the "
"system.  The reverse condition may also be checked waiting "
"and hoping the condition eventually clears, thus allowing "
"generation to continue.  Or, the interlock variables may be "
"reset assuming interlocks are clear, then reprocess.  The "
"interlocks are not read in particular order, however the "
"final order is from least important to most important so "
"that all conditions can be checked, but leaving the routine "
"with the most important recorded with a final code."
#END

NOP

// Rung ProgWarnings#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Flow In Rate %3E%3E%3E%3E</FONT>"
#END

STRLT	R9	R0
ORGT	R9	R1
AND	B4
DEBOUNCE	D10	D11	A4

// Rung ProgWarnings#3
// Offset 14
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Generator Cell Level "
"%3E%3E%3E%3E</FONT><br>"
#END

STRN	C46
AND	B6
DEBOUNCE	D10	D11	A6

// Rung ProgWarnings#4
// Offset 20
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Generator Cell Level "
"%3E%3E%3E%3E</FONT><br>"
#END

STRN	C10
AND	B7
DEBOUNCE	D10	D11	A7

// Rung ProgWarnings#5
// Offset 26
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Conductivity "
"%3E%3E%3E%3E</FONT><br>"
#END

STRLT	R14	R2
ORGT	R14	R3
AND	B3
DEBOUNCE	D10	D11	A3

// Rung ProgWarnings#6
// Offset 39
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C pH %3E%3E%3E%3E</FONT>"
#END

STRLT	R13	R4
ORGT	R13	R5
AND	B2
DEBOUNCE	D10	D11	A2

// Rung ProgWarnings#7
// Offset 52
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C ORP %3E%3E%3E%3E</FONT><br>"
#END

STRLT	R15	R6
ORGT	R15	R7
AND	B1
DEBOUNCE	D10	D11	A1

// Rung ProgWarnings#8
// Offset 65
#BEGIN FMT_COMMENT 
" <FONT tsize=5>%3C%3C%3C%3C Set Interlock Codes ON/OFF "
"%3E%3E%3E%3E</FONT> <br> "
#END

STRE	D0	SM_Running
ORE	D0	SM_Idle
DUPBOOL
AND	A1
COPY	0x1	"4 0x0 A_ORPRange D1 1 0x0 1 C22 1"
POPBOOL
DUPBOOL
AND	A2
COPY	0x1	"4 0x0 A_pHRange D1 1 0x0 1 C22 1"
POPBOOL
DUPBOOL
AND	A3
COPY	0x1	"4 0x0 A_CondRange D1 1 0x0 1 C22 1"
POPBOOL
DUPBOOL
AND	A6
COPY	0x1	"4 0x0 A_GenNotFull D1 1 0x0 1 C22 1"
POPBOOL
DUPBOOL
AND	A4
COPY	0x1	"4 0x0 A_FlowRange D1 1 0x0 1 C22 1"
POPBOOL
AND	A7
COPY	0x1	"4 0x0 A_GenEmpty D1 1 0x0 1 C22 1"

// Rung ProgWarnings#9
// Offset 139
STRN	A1
ANDN	A2
ANDN	A3
ANDN	A6
ANDN	A7
OUT	C63
COPY	0x1	"4 0x0 A_NoAlarm D1 1 0x0 0 C22 1"

// Rung ProgWarnings#10
// Offset 153
STRNE	D0	SM_Running
ANDNE	D0	SM_Idle
COPY	0x1	"4 0x0 A_NoAlarm D1 1 0x0 0 C22 1"

// Rung ProgWarnings#11
// Offset 171
NOP

// Rung ProgWarnings#12
// Offset 172
NOP

// End of Code Block ProgWarnings
$PGMEND	ProgWarnings

// Beginning of Code Block $t1Second
$TSK	$t1Second

// Rung $t1Second#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br><FONT tsize=5>$t1Second</FONT><br>"
"<FONT tsize=5></FONT> <br>This ladder task runs every "
"second after it completes.  In other words, it doesn't run "
"exactly every second, but exactly one second each time "
"after it finishes, regardless of how short or long it "
"executes.  This should be enough accuracy for total "
"calculations."
#END

NOP

// Rung $t1Second#2
// Offset 1
#BEGIN FMT_COMMENT 
"Calculate Ah and KWh and Asec"
#END

STR	ST1
AND	C2
AND	C5
MATH	TT1	"TT1 + (((R18 * R19) / 3600) / 1000)"
MATH	TT0	"TT0 + (R18 / 3600)"
MATH	TT4	"TT4 + R18"
MATH	TT5	"TT5 + (1 / 3600)"
MATH	TT6	"TT6 + 1"

// Rung $t1Second#3
// Offset 54
#BEGIN FMT_COMMENT 
"Calculate flow volume"
#END

STR	ST1
AND	C2
MATH	TT3	"TT3 + (R9 / 60)"

// Rung $t1Second#4
// Offset 66
#BEGIN FMT_COMMENT 
"Calculate the current tank level and percentage available."
#END

STR	ST1
MATH	R30	"(F11 - R28) * F12"
MATH	TT7	"(R30 / F13) * 100"

// End of Code Block $t1Second
$TSKEND	$t1Second

// Beginning of Code Block TaskAcidPumpPID
$TSK	TaskAcidPumpPID

// Rung TaskAcidPumpPID#1
// Offset 0
STR	ST1
STR	ST2
STR	ST2
RAMPSOAK	RS_0	AcidPumpCtlPID.SP	1	"4 1 F10 0 0"

// Rung TaskAcidPumpPID#2
// Offset 10
STR	ST1
FILTER	1	R13	R29

// Rung TaskAcidPumpPID#3
// Offset 14
STR	ST1
PID	AcidPumpCtlPID	0x62	R29	SC48	SC49	SC50	SC51	""""""	6553	32767	R10	DST511

// End of Code Block TaskAcidPumpPID
$TSKEND	TaskAcidPumpPID

// Beginning of Code Block TaskLoadWebPages
$TSK	TaskLoadWebPages

// Rung TaskLoadWebPages#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>Aqua Metrology Systems SafeGuard "
"H2O</FONT><br> <br><FONT tsize=5>TaskLoadWebPages</FONT><br>"
"<FONT tsize=5></FONT> <br><FONT tsize=3>When the PLC "
"restarts, the RAM file system gets cleared out, which holds "
"the user pages for the web server.  Upon startup, during "
"the top scan, and using a status holding bit, this task is "
"enabled.  By recreating the subdirectory and copying the "
"files from the SD file system back to the RAM file "
"system.</FONT>"
#END

NOP

// Rung TaskLoadWebPages#2
// Offset 1
STR	C38
FILENEWFLDR	@RamFS	"""up"""	0x0	SE0	SE1
TMRDOWN	T13	1000

// Rung TaskLoadWebPages#3
// Offset 12
STR	C38
AND	T13.Done
FILECOPY	@SDCardFS	"""\up\SGH2O_PLC.html"""	@RamFS	"""\up\SGH2O_PLC.html"""	0x0	0x0	SE2	SE3
AND	SE2
FILECOPY	@SDCardFS	"""\up\jquery.min.js"""	@RamFS	"""\up\jquery.min.js"""	0x0	0x0	SE4	SE5
AND	SE4
COPY	0x1	"4 0x0 0 C38 1"

// End of Code Block TaskLoadWebPages
$TSKEND	TaskLoadWebPages

// Beginning of Code Block TaskPropValvePID
$TSK	TaskPropValvePID

// Rung TaskPropValvePID#1
// Offset 0
STR	ST1
STR	ST2
STR	ST2
RAMPSOAK	RS_1	PropValveCtlPID.SP	1	"4 1 F15 0 0"

// Rung TaskPropValvePID#2
// Offset 10
STR	ST1
FILTER	1	R9	R32

// Rung TaskPropValvePID#3
// Offset 14
STR	ST1
PID	PropValveCtlPID	0x60	R32	SC52	SC53	SC54	SC55	""""""	6553	32767	R31	DST511

// End of Code Block TaskPropValvePID
$TSKEND	TaskPropValvePID

// Beginning of Code Block TaskConductvyPID
$TSK	TaskConductvyPID

// Rung TaskConductvyPID#1
// Offset 0
STR	ST1
STR	ST2
STR	ST2
RAMPSOAK	RS_2	ConductvyCtlPID.SP	1	"4 1 F14 0 0"

// Rung TaskConductvyPID#2
// Offset 10
STR	ST1
FILTER	1	R14	R33

// Rung TaskConductvyPID#3
// Offset 14
STR	ST1
PID	ConductvyCtlPID	0x60	R33	SC56	SC57	SC58	SC59	""""""	6553	32767	R10	DST511

// End of Code Block TaskConductvyPID
$TSKEND	TaskConductvyPID

// Beginning of Code Block TaskRoutineTest
$TSK	TaskRoutineTest

// Rung TaskRoutineTest#1
// Offset 0
STRPD	MC401
COPY	0x1	"4 0x0 1 MC402 1 0x0 MHR201 R37 1 0x0 0 MC404 1"

// Rung TaskRoutineTest#2
// Offset 10
STRN	MC403
ANDN	MC404
DUPBOOL
ANDE	R37	4
RUN	ProgRinsing
POPBOOL
ANDE	R37	1
RUN	ProgDraining

// Rung TaskRoutineTest#3
// Offset 26
STR	MC403
ANDN	MC404
DUPBOOL
ANDE	R37	4
RUN	ProgAbortRinsing
POPBOOL
ANDE	R37	1
RUN	ProgAbortDrain

// Rung TaskRoutineTest#4
// Offset 42
#BEGIN FMT_COMMENT 
"<B><I>Handshake Step 4 (Optional)</I>*</B><br>"
"<I>The GUI may send a request to stop the current routine. "
"This action is immediate but optional.</I><br>"
"<!-- notionvc: 8f5b29c4-3e89-4d80-9e0b-ba815f8c4503 "
"--><B></B><br><B>Handshake Step 5</B><br>"
"<I>The PLC sends the End signal. This action is immediate "
"for the PLC. The GUI waits for the PLC to signal the end of "
"the routine, either automatically or upon receiving an "
"abort request. This action requires waiting.</I>"
#END

STR	MC403
ANDN	MC405
COPY	0x1	"4 0x0 1 MC404 1"

// Rung TaskRoutineTest#5
// Offset 49
#BEGIN FMT_COMMENT 
"<B>Handshake Step 6</B><br>"
"<I>The GUI acknowledges the end of the routine. This action "
"is immediate. The PLC reads the acknowledgement via EndACK "
"and sets EndCMD to 0.</I>"
#END

STR	MC404
AND	MC405
COPY	0x1	"4 0x0 0 MC404 1"

// Rung TaskRoutineTest#6
// Offset 56
#BEGIN FMT_COMMENT 
"<B>Step 7</B><br>"
"<I>The GUI sees that the PLC sets EndCMD to 0 and sets "
"EndAck to 0. The PLC waits for the GUI to set StartCMD to 0 "
"and then sets StartACK to 0.</I>"
#END

STRN	MC401
COPY	0x1	"4 0x0 0 MC402 1"

// End of Code Block TaskRoutineTest
$TSKEND	TaskRoutineTest

// Beginning of Code Block TaskUpdPlatePerc
$TSK	TaskUpdPlatePerc

// Rung TaskUpdPlatePerc#1
// Offset 0
#BEGIN FMT_COMMENT 
"Consumption ratio per second"
#END

STRPD	ST4
MATH	R38	"(1.78 * F0) / 3600.0"

// Rung TaskUpdPlatePerc#2
// Offset 14
#BEGIN FMT_COMMENT 
"Total mass consumed of outter plates"
#END

STRPD	ST4
ANDE	SM_Running	D0
MATH	TT8	"MIN(TT8 + R38, F18)"

// Rung TaskUpdPlatePerc#3
// Offset 31
#BEGIN FMT_COMMENT 
"Outter plates %25 left"
#END

STRPD	ST4
MATH	TT9	"(100 * (F18 - TT8)) / F18"

// Rung TaskUpdPlatePerc#4
// Offset 45
#BEGIN FMT_COMMENT 
"Total mass consumed of inner plates. Consumption ratio is "
"2 times as large"
#END

STRPD	ST4
ANDE	SM_Running	D0
MATH	TT10	"MIN(TT10 + (2 * R38), F18)"

// Rung TaskUpdPlatePerc#5
// Offset 64
#BEGIN FMT_COMMENT 
"Inner plates %25 left"
#END

STRPD	ST4
MATH	TT11	"(100 * (F18 - TT10)) / F18"

// End of Code Block TaskUpdPlatePerc
$TSKEND	TaskUpdPlatePerc

// Beginning of Code Block ProgNotices
$PRGRM	ProgNotices

// Rung ProgNotices#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Reagent Tank Full Condition %3E%3E%3E%3E</FONT>"
#END

STRGE	TT7	F19
STRE	D0	SM_Starting
ANDGE	TT7	F21
ORSTR
AND	B27
DEBOUNCE	D16	32768	A27

// Rung ProgNotices#2
// Offset 19
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Reagent Tank Empty Condition "
"%3E%3E%3E</FONT><br>Ideally this should be a negated "
"debounce but it doesn't exist."
#END

STRLE	TT7	F20
AND	B27
COPY	0x1	"4 0x0 0 A27 1"

// Rung ProgNotices#3
// Offset 29
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Inner Plates Fully Depleted %3E%3E</FONT>"
#END

STRLE	TT11	0.05
DEBOUNCE	D16	10000	A31

// Rung ProgNotices#4
// Offset 38
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Outer Plates Fully Depleted %3E%3E%3E</FONT>"
#END

STRLE	TT9	0.05
DEBOUNCE	D16	10000	A16

// Rung ProgNotices#5
// Offset 47
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Set Alarm Code And Alarm Active "
"Bit %3E%3E</FONT>"
#END

STR	C2
DUPBOOL
AND	A27
COPY	0x1	"4 0x0 N_ReagTankFull D18 1 0x0 1 C58 1"
POPBOOL
DUPBOOL
AND	A31
COPY	0x1	"4 0x0 N_InPlates D18 1 0x0 1 C58 1"
POPBOOL
DUPBOOL
AND	A16
COPY	0x1	"4 0x0 N_OutPlates D18 1 0x0 1 C58 1"
POPBOOL
ANDN	A27
ANDN	A16
ANDN	A31
COPY	0x1	"4 0x0 A_NoAlarm D18 1 0x0 0 C58 1"

// Rung ProgNotices#6
// Offset 92
STRN	C2
COPY	0x1	"4 0x0 A_NoAlarm D18 1 0x0 0 C58 1"

// End of Code Block ProgNotices
$PGMEND	ProgNotices

// Beginning of Code Block ProgStateMachine
$PRGRM	ProgStateMachine

// Rung ProgStateMachine#1
// Offset 0
#BEGIN FMT_COMMENT 
"System is On if it is remotely enabled and locally enabled"
#END

STR	C0
AND	C1
ANDN	MC8
OUT	C2

// Rung ProgStateMachine#2
// Offset 4
STRE	D0	SM_Stopped
AND	C2
COPY	0x1	"4 0x0 SM_Starting D0 1"

// Rung ProgStateMachine#3
// Offset 17
STRE	D0	SM_Starting
DUPBOOL
AND	ST1
TMRDOWN	T17	180000
POPBOOL
DUPBOOL
AND	A32
COPY	0x1	"4 0x0 SM_Halted D0 1"
POPBOOL
ANDN	A32
DUPBOOL
ANDE	D18	A_NoAlarm
AND	C63
TMRDOWN	T14	10000
AND	T14.Done
COPY	0x1	"4 0x0 SM_Running D0 1"
POPBOOL
ANDNE	D18	A_NoAlarm
COPY	0x1	"4 0x0 SM_Standby D0 1"

// Rung ProgStateMachine#4
// Offset 69
STRE	D0	SM_Running
DUPBOOL
ANDE	D2	A_NoAlarm
DUPBOOL
ANDE	D18	A_NoAlarm
ANDNE	D1	A_NoAlarm
COPY	0x1	"4 0x0 SM_Idle D0 1"
POPBOOL
ANDNE	D18	A_NoAlarm
COPY	0x1	"4 0x0 SM_Standby D0 1"
POPBOOL
ANDNE	D2	A_NoAlarm
COPY	0x1	"4 0x0 SM_Halted D0 1"

// Rung ProgStateMachine#5
// Offset 124
STRE	D0	SM_Idle
DUPBOOL
ANDE	D2	A_NoAlarm
DUPBOOL
ANDNE	D18	A_NoAlarm
COPY	0x1	"4 0x0 SM_Standby D0 1"
POPBOOL
ANDE	D18	A_NoAlarm
ANDE	D1	A_NoAlarm
COPY	0x1	"4 0x0 SM_Running D0 1"
POPBOOL
ANDNE	D2	A_NoAlarm
COPY	0x1	"4 0x0 SM_Halted D0 1"

// Rung ProgStateMachine#6
// Offset 179
STRE	D0	SM_Standby
DUPBOOL
ANDN	MC404
COPY	0x1	"4 0x0 1 C61 1"
POPBOOL
AND	MC404
COPY	0x1	"4 0x0 0 C61 1"
ANDE	D18	A_NoAlarm
COPY	0x1	"4 0x0 SM_Starting D0 1 0x0 0 MC404 1"

// Rung ProgStateMachine#7
// Offset 211
STRE	D0	SM_Stopping
DUPBOOL
ANDN	MC404
COPY	0x1	"4 0x0 1 C61 1"
POPBOOL
AND	MC404
DUPBOOL
AND	C0
COPY	0x1	"4 0x0 0 MC404 1 0x0 0 C61 1 0x0 SM_Stopped D0 1"
POPBOOL
ANDN	C0
COPY	0x1	"4 0x0 0 MC404 1 0x0 0 C61 1 0x0 SM_RemoteDisable D0 1"

// Rung ProgStateMachine#8
// Offset 247
STRE	D0	SM_RemoteDisable
AND	C0
DUPBOOL
ANDE	D2	A_NoAlarm
COPY	0x1	"4 0x0 SM_Stopped D0 1"
POPBOOL
ANDNE	D2	A_NoAlarm
COPY	0x1	"4 0x0 SM_Halted D0 1"

// Rung ProgStateMachine#9
// Offset 279
STRE	D0	SM_Halted
DUPBOOL
ANDN	MC404
COPY	0x1	"4 0x0 1 C61 1"
POPBOOL
AND	MC404
COPY	0x1	"4 0x0 0 C61 1"
AND	MC9
COPY	0x1	"4 0x0 SM_Stopped D0 1 0x0 0 MC404 1 0x0 0 MC9 1"

// Rung ProgStateMachine#10
// Offset 308
STRN	C2
DUPBOOL
ANDNE	D0	SM_Stopped
ANDNE	D0	SM_Halted
ANDNE	D0	SM_RemoteDisable
COPY	0x1	"4 0x0 SM_Stopping D0 1"
POPBOOL
STRE	D0	SM_Stopped
ORE	D0	SM_Halted
ANDSTR
ANDN	C0
COPY	0x1	"4 0x0 SM_RemoteDisable D0 1"

// Rung ProgStateMachine#11
// Offset 352
STRE	D0	SM_Halted
OUT	C62

// Rung ProgStateMachine#12
// Offset 358
STRE	D0	SM_Starting
ORE	D0	SM_Running
ORE	D0	SM_Idle
OUT	C60

// Rung ProgStateMachine#13
// Offset 374
STR	ST1
COPY	0x1	"4 0x0 D0 MHR101 1"

// End of Code Block ProgStateMachine
$PGMEND	ProgStateMachine

// Beginning of Code Block ProgDraining
$PRGRM	ProgDraining

// Rung ProgDraining#1
// Offset 0
#BEGIN FMT_COMMENT 
"<B>Step 5</B><br>"
"<I>The PLC sends the End signal. This action is immediate "
"for the PLC. The GUI waits for the PLC to signal the end of "
"the routine, either automatically or upon receiving an "
"abort request. This action requires waiting.</I>"
#END

STR	ST1
COPY	0x1	"4 0x0 1 MHR202 1"

// Rung ProgDraining#2
// Offset 7
STR	C10
COPY	0x1	"4 0x0 1 C7 1"

// Rung ProgDraining#3
// Offset 13
STRN	C10
COPY	0x1	"4 0x0 0 C7 1"

// Rung ProgDraining#4
// Offset 19
STRN	C10
ANDN	C7
COPY	0x1	"4 0x0 1 MC404 1"

// Rung ProgDraining#5
// Offset 26
STR	MC404
EXIT

// End of Code Block ProgDraining
$PGMEND	ProgDraining

// Beginning of Code Block ProgAbortDrain
$PRGRM	ProgAbortDrain

// Rung ProgAbortDrain#1
// Offset 0
STR	ST1
COPY	0x1	"4 0x0 0 C7 1"

// Rung ProgAbortDrain#2
// Offset 6
STR	C7
COPY	0x1	"4 0x0 1 MC404 1"

// Rung ProgAbortDrain#3
// Offset 12
STR	MC404
EXIT

// End of Code Block ProgAbortDrain
$PGMEND	ProgAbortDrain

// Beginning of Code Block ProgAbortRinsing
$PRGRM	ProgAbortRinsing

// Rung ProgAbortRinsing#1
// Offset 0
STR	ST1
COPY	0x1	"4 0x0 1 MC404 1"

// Rung ProgAbortRinsing#2
// Offset 6
STR	MC404
EXIT

// End of Code Block ProgAbortRinsing
$PGMEND	ProgAbortRinsing

// Beginning of Code Block ProgRinsing
$PRGRM	ProgRinsing

// Rung ProgRinsing#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><FONT "
"tsize=5></FONT> <br> <br>"
"<FONT tsize=5>TaskRinsing</FONT><br><FONT tsize=5></FONT> "
"<br>pending"
#END

STR	ST1
COPY	0x1	"4 0x0 1 MHR202 1"

// Rung ProgRinsing#2
// Offset 7
STRN	MC404
COPY	0x1	"4 0x0 1 C16 1 0x0 1 C49 1"
ENTASK	TaskPropValvePID	0x0	0	0x1

// Rung ProgRinsing#3
// Offset 18
STR	X2
AND	C16
AND	C49
COPY	0x1	"4 0x0 1 C3 1"

// Rung ProgRinsing#4
// Offset 26
STR	C3
TMRDOWN	T16	10000

// Rung ProgRinsing#5
// Offset 29
STR	T16.Done
COPY	0x1	"4 0x0 0 C16 1 0x0 0 C49 1 0x0 0 C3 1"
HALT	TaskPropValvePID

// Rung ProgRinsing#6
// Offset 38
STR	T16.Done
ANDN	C16
COPY	0x1	"4 0x0 1 MC404 1"

// End of Code Block ProgRinsing
$PGMEND	ProgRinsing

// Beginning of Code Block TaskResetPlates
$TSK	TaskResetPlates

// Rung TaskResetPlates#1
// Offset 0
#BEGIN FMT_COMMENT 
"Reset Media Event"
#END

STR	C29
ANDPD	MC6
MOVE	0	TT10
MOVE	0	TT8
COPY	0x1	"4 0x0 0 TT0 1 0x0 0 TT4 1 0x0 0 TT1 1 0x0 0 TT6 1 0x0 0 TT5 1"
COPY	0x1	"4 0x0 0 MC6 1"

// Rung TaskResetPlates#2
// Offset 26
#BEGIN FMT_COMMENT 
"Reset Media Event"
#END

STR	C29
ANDPD	MC7
MOVE	0	TT10
COPY	0x1	"4 0x0 0 TT0 1 0x0 0 TT4 1 0x0 0 TT1 1 0x0 0 TT6 1 0x0 0 TT5 1"
COPY	0x1	"4 0x0 0 MC7 1"

// End of Code Block TaskResetPlates
$TSKEND	TaskResetPlates

// Beginning of Code Block $tBottomOfScan
$TSK	$tBottomOfScan

// Rung $tBottomOfScan#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br>"
"<FONT tsize=5>$tBottomOfScan</FONT><br><FONT "
"tsize=5></FONT> <br>"
"This is the last ladder task after the main ladder.  By "
"taking the necessary working memory variables and writing "
"them to the physical outputs and/or Modbus and/or any other "
"device requiring updates."
#END

NOP

// Rung $tBottomOfScan#2
// Offset 1
#BEGIN FMT_COMMENT 
"Write local memory bit variables (C) into digital outputs (Y)."
#END

STR	ST1
MAPIO	"2 C2 Y0 C21 Y1 C22 Y2 C23 Y3 C6 Y8 C7 Y7 C8 Y6 C17 Y11 C18 Y12"

// Rung $tBottomOfScan#3
// Offset 23
#BEGIN FMT_COMMENT 
"Set the inlet valve on/off only if enabled."
#END

STR	ST1
DUPBOOL
AND	C48
MAPIO	"2 C16 Y10"
POPBOOL
ANDN	C48
COPY	0x1	"4 0x0 0 Y10 1"

// Rung $tBottomOfScan#4
// Offset 38
#BEGIN FMT_COMMENT 
"Set green button LED"
#END

STR	ST1
AND	C2
OUT	Y13

// Rung $tBottomOfScan#5
// Offset 41
#BEGIN FMT_COMMENT 
"Set red button LED"
#END

STR	ST1
ANDN	C2
OUT	Y14

// Rung $tBottomOfScan#6
// Offset 44
#BEGIN FMT_COMMENT 
"Set galvanostat output if enabled"
#END

STR	ST1
AND	C41
SCALE	R8	SC36	SC37	SC38	SC39	WY0
MAPIO	"2 C5 Y28"

// Rung $tBottomOfScan#7
// Offset 57
#BEGIN FMT_COMMENT 
"Set galvanostat output enable for 10V models."
#END

STR	ST1
AND	C41
DUPBOOL
AND	C5
COPY	0x1	"4 0x0 0 WY5 1"
POPBOOL
ANDN	C5
COPY	0x1	"4 0x0 32767 WY5 1"

// Rung $tBottomOfScan#8
// Offset 75
#BEGIN FMT_COMMENT 
"Set ultrasonic output if enabled"
#END

STR	ST1
AND	C43
MAPIO	"2 C3 Y24"

// Rung $tBottomOfScan#9
// Offset 82
#BEGIN FMT_COMMENT 
"Set polarity output if enabled"
#END

STR	ST1
AND	C42
MAPIO	"2 C4 Y5 C30 Y16 C30 Y17 C31 Y20 C31 Y21"

// Rung $tBottomOfScan#10
// Offset 97
#BEGIN FMT_COMMENT 
"Set acid pump rate from PID result via pH."
#END

STR	ST1
DUPBOOL
AND	C34
AND	C50
COPY	0x1	"4 0x0 R10 WY1 1"
POPBOOL
ANDN	C34
COPY	0x1	"4 0x0 0 WY1 1"

// Rung $tBottomOfScan#11
// Offset 115
#BEGIN FMT_COMMENT 
"Set proportional valve rate from PID result via flow rate."
#END

STR	ST1
DUPBOOL
AND	C49
AND	C51
COPY	0x1	"4 0x0 R31 WY4 1"
POPBOOL
ANDN	C49
COPY	0x1	"4 0x0 0 WY4 1"

// Rung $tBottomOfScan#12
// Offset 133
#BEGIN FMT_COMMENT 
"Set acid pump rate from PID result via conductivity."
#END

STR	ST1
DUPBOOL
AND	C34
AND	C52
COPY	0x1	"4 0x0 R10 WY1 1"
POPBOOL
ANDN	C34
COPY	0x1	"4 0x0 0 WY1 1"

// Rung $tBottomOfScan#13
// Offset 151
#BEGIN FMT_COMMENT 
"Set modbus alarm bits for UI"
#END

STR	C29
DUPBOOL
ANDNE	D18	A_NoAlarm
MAPIO	"2 A27 MC127 A31 MC131 A16 MC116"
POPBOOL
ANDE	D18	A_NoAlarm
COPY	0x0	"4 0x0 0 MC127 1 0x0 0 MC131 1 0x0 0 MC116 1"

// Rung $tBottomOfScan#14
// Offset 181
#BEGIN FMT_COMMENT 
"Set modbus alarm bits for UI"
#END

STR	C29
DUPBOOL
ANDNE	D1	A_NoAlarm
MAPIO	"2 A1 MC101 A2 MC102 A3 MC103 A4 MC104 A6 MC106 A7 MC107"
POPBOOL
ANDE	D1	A_NoAlarm
COPY	0x1	"4 0x0 0 MC101 1 0x0 0 MC102 1 0x0 0 MC103 1 0x0 0 MC104 1 0x0 0 MC106 1 0x0 0 MC107 1"

// Rung $tBottomOfScan#15
// Offset 219
#BEGIN FMT_COMMENT 
"Set modbus alarm bits for UI"
#END

STR	C29
DUPBOOL
ANDNE	D3	A_NoAlarm
MAPIO	"2 A8 MC108 A10 MC110 A15 MC115 A21 MC121 A30 MC130"
POPBOOL
ANDE	D3	A_NoAlarm
COPY	0x1	"4 0x0 0 MC108 1 0x0 0 MC110 1 0x0 0 MC115 1 0x0 0 MC121 1 0x0 0 MC130 1"

// Rung $tBottomOfScan#16
// Offset 254
#BEGIN FMT_COMMENT 
"Set modbus alarm bits for UI"
#END

STR	C29
DUPBOOL
ANDNE	D2	A_NoAlarm
MAPIO	"2 A5 MC105 A9 MC109 A11 MC111 A12 MC112 A16 MC116 A17 MC117 A18 MC118 A19 MC119 A20 MC120 A22 MC122 A23 MC123 A32 MC132"
POPBOOL
ANDE	D2	A_NoAlarm
COPY	0x1	"4 0x0 0 MC105 1 0x0 0 MC109 1 0x0 0 MC111 1 0x0 0 MC112 1 0x0 0 MC116 1 0x0 0 MC117 1 0x0 0 MC118 1 0x0 0 MC119 1 0x0 0 MC120 1 0x0 0 MC122 1 0x0 0 MC123 1 0x0 0 MC132 1"

// Rung $tBottomOfScan#17
// Offset 310
#BEGIN FMT_COMMENT 
"Set modbus sensor bits for UI"
#END

STR	C29
MAPIO	"2 C53 MC212 C54 MC213 C9 MC214 C46 MC215 C10 MC216"

// Rung $tBottomOfScan#18
// Offset 324
#BEGIN FMT_COMMENT 
"Set modbus sensor gauge values for UI"
#END

STR	C29
MATH	MHR1	"ROUND(R19 * 100)"
MATH	MHR2	"ROUND(R18 * 100)"
MATH	MHR3	"ROUND(R13 * 100)"
MATH	MHR4	"ROUND(R9 * 100)"
MATH	MHR6	"ROUND(R16 * 100)"
MATH	MHR7	"ROUND(R17 * 100)"
MATH	MHR8	"ROUND(TT7 * 100)"
MATH	MHR9	"ROUND(R14 * 100)"
MATH	MHR10	"ROUND(TT9 * 100)"
MATH	MHR11	"ROUND(TT11 * 100)"

// End of Code Block $tBottomOfScan
$TSKEND	$tBottomOfScan

#BEGIN ELEMENT_DOC
"X0","FLAGS = REST_READONLY","XRemoteEnable","Input / Bit","Remote enable"
"X2","FLAGS =","XGenLevelHiOn","Input / Bit","generator flow cell level sensor hi"
"X4","FLAGS =","XReagntLoLoOn","Input / Bit","reagent tank level sensor lo-lo"
"X5","FLAGS =","XReagntLoOn","Input / Bit","reagent tank level sensor lo"
"X6","FLAGS =","XReagntHiOn","Input / Bit","reagent tank level sensor hi"
"X7","FLAGS =","XReagntHiHiOn","Input / Bit","reagent tank level sensor hi-hi"
"X8","FLAGS =","XGenLevelLoOn","Input / Bit","vent overflow level sensor hi"
"X10","FLAGS =","XGreenButton","Input / Bit","push button to start machine or reflect started"
"X11","FLAGS =","XRedButton","Input / Bit","push button to stop machine or reflect stopped"
"Y0","FLAGS =","YSystemOn","Output / Bit","status signal for system running"
"Y1","FLAGS =","YErrorOn","Output / Bit","status signal for errors exist"
"Y2","FLAGS =","YWarnOn","Output / Bit","status signal for warnings exist"
"Y3","FLAGS =","YInfoOn","Output / Bit","status signal for info exist"
"Y4","FLAGS =","YAcidPumpOn","Output / Bit","acid pump on/off"
"Y5","FLAGS =","YPolarityOn","Output / Bit","polarity on/off"
"Y6","FLAGS =","YReagntPumpOn","Output / Bit","reagent pump on/off"
"Y7","FLAGS =","YDrainPumpOn","Output / Bit","drain pump on/off"
"Y10","FLAGS =","YInletValveOn","Output / Bit","inlet valve on/off"
"Y11","FLAGS =","YGenValveOn","Output / Bit","generator cell drain valve on/off"
"Y13","FLAGS =","YGreenButtonOn","Output / Bit","panel button LED to reflect running"
"Y14","FLAGS =","YRedButtonOn","Output / Bit","panel button LED to reflect stopped"
"Y16","FLAGS =","YPolarity1OnR1","Output / Bit","h-bridge polarity position 1 on/off relay 1"
"Y17","FLAGS =","YPolarity1OnR3","Output / Bit","h-bridge polarity position 1 on/off relay 3"
"Y20","FLAGS =","YPolarity2OnR2","Output / Bit","h-bridge polarity position 2 on/off relay 2"
"Y21","FLAGS =","YPolarity2OnR4","Output / Bit","h-bridge polarity position 2 on/off relay 4"
"Y24","FLAGS =","YUltrasonicsOn","Output / Bit","ultrasonics on/off"
"Y28","FLAGS =","YGalvanostatOn","Output / Bit","galvanostat on/off"
"WX1","FLAGS =","WXTempOutlet","Input / SWord","raw temperature outlet value (see module/scale for ranges)"
"WX2","FLAGS =","WXTankLevel","Input / SWord","raw level sensor value (see module/scale for ranges)"
"WX3","FLAGS =","WXpH","Input / SWord","raw pH sensor value (see module/scale for ranges)"
"WX4","FLAGS =","WXConductivity","Input / SWord","raw conductivity sensor value (see module/scale for ranges)"
"WX20","FLAGS =","WXFlowInRate","Input / SWord","raw flow rate inlet value (see module/scale for ranges)"
"WX21","FLAGS =","WXTempInlet","Input / SWord","raw temperature of inlet value (see module/scale for ranges)"
"WX22","FLAGS =","WXVoltFeedback","Input / SWord","raw voltage feedback from galvanostat (see module/scale for ranges)"
"WX23","FLAGS =","WXAmpFeedback","Input / SWord","raw galvanostat amperage feedback value (see module/scale for ranges)"
"WY0","FLAGS =","WYAmperageOut","Output / SWord","scaled galvanostat out (see module/scale for ranges)"
"WY1","FLAGS =","WYAcidPumpRate","Output / SWord","scaled acid pump rate (see module/scale for ranges)"
"WY4","FLAGS =","WYPropValve","Output / SWord","scaled proportional valve out (see module/scale for ranges)"
"WY5","FLAGS =","WYGalvanostatOn","Output / SWord","galvanostat on/off for models requiring full 10V signal"
"C0","FLAGS =","CRemoteOn","Working / Bit","remote signal ok to start"
"C1","FLAGS =","CLocalOn","Working / Bit","local signal ok to start"
"C2","FLAGS =","CSystemOn","Working / Bit","system is on"
"C3","FLAGS =","CUltrasonicsOn","Working / Bit","ultrasonics start/stop"
"C4","FLAGS =","CPolarityOn","Working / Bit","polarity start/stop"
"C5","FLAGS =","CGalvanostatOn","Working / Bit","galvanostat start/stop"
"C6","FLAGS =","CAcidPumpOn","Working / Bit","acid pump start/stop"
"C7","FLAGS =","CDrainPumpOn","Working / Bit","drain pump start/stop"
"C8","FLAGS =","CReagntPumpOn","Working / Bit","reagent pump start/stop"
"C9","FLAGS =","CAcidLevelLoOn","Working / Bit","acid tank level sensor lo"
"C10","FLAGS =","CGenLevelLo","Working / Bit","generator cell level sensor lo"
"C11","FLAGS =","CReagntLoLoOn","Working / Bit","reagent tank level sensor lo-lo"
"C12","FLAGS =","CReagntLoOn","Working / Bit","reagent tank level sensor lo"
"C13","FLAGS =","CReagntHiOn","Working / Bit","reagent tank level sensor hi"
"C14","FLAGS =","CReagntHiHiOn","Working / Bit","reagent tank level sensor hi-hi"
"C15","FLAGS =","CVentLevelOn","Working / Bit","vent overflow level sensor hi"
"C16","FLAGS =","CInletValveOn","Working / Bit","inlet valve"
"C17","FLAGS =","CGenValveOn","Working / Bit","generator cell drain valve"
"C18","FLAGS =","CReagntValveOn","Working / Bit","reagent tank drain valve"
"C19","FLAGS =","CFileLogSuccess","Working / Bit","file log success"
"C20","FLAGS =","CFileLogError","Working / Bit","file log error"
"C21","FLAGS =","CErrorOn","Working / Bit","error events exist"
"C22","FLAGS =","CWarnOn","Working / Bit","warning events exist"
"C23","FLAGS =","CInfoOn","Working / Bit","info events exist"
"C24","FLAGS =","CPolaritySyncUS","Config / Bit","ultrasonics synced with polarity switch"
"C25","FLAGS =","CAcidLevelLoLoOn","Working / Bit","acid tank level sensor lo-lo"
"C26","FLAGS =","CEnableErrors","Config / Bit","run with/without error checking"
"C27","FLAGS = REST_READONLY","CEnableWarnings","Config / Bit","run with/without warnings checking"
"C28","FLAGS = REST_READONLY","CEnableInfo","Config / Bit","run with/without info checking"
"C29","FLAGS =","CEnableModbus","Working / Bit","run with/without Modbus calls"
"C30","FLAGS =","CPolarity1On","Working / Bit","h-bridge polarity position 1"
"C31","FLAGS =","CPolarity2On","Working / Bit","h-bridge polarity position 2"
"C32","FLAGS =","CPolaritySwitch","Working / Bit","boolean during polarity h bridge switching"
"C33","FLAGS =","CDemoMode","Config / Bit","turn demo valves on/off"
"C34","FLAGS =","CEnableAcidPump","Config / Bit","run with/without acid pump"
"C35","FLAGS =","CGreenPressed","Working / Bit","stores if green button pressed last"
"C36","FLAGS =","CRedPressed","Working / Bit","stores if red button pressed last"
"C37","FLAGS =","CPolSyncStart","Working / Bit","true for the duration of ultrasonics to sync with polarity"
"C38","FLAGS =","CLoadWebPages","on/off bit","true to refreshing web user pages from SD card to RAM"
"C39","FLAGS =","CEnableRandom","Config / Bit","run with/without random sensor values"
"C40","FLAGS =","CHmiOn","Working / Bit","hmi signal ok to start"
"C41","FLAGS =","CEnableGalvan","Config / Bit","run with/without galvanostat"
"C42","FLAGS =","CEnablePolarity","Config / Bit","run with/without polarity"
"C43","FLAGS =","CEnableUltraSon","Config / Bit","run with/without ultrasonics"
"C44","FLAGS =","CPrcsngStartStop","Working / Bit","whether a start or a stop command are being processed"
"C45","FLAGS =","CGalvHasAmpFB","Config / Bit","whether galvanostat gives an amperage feedback"
"C46","FLAGS =","CGenLevelHi","Working / Bit","generator cell level sensor hi"
"C47","FLAGS =","CEnableUSFan","Config / Bit","run with/without ultrasonic fan"
"C48","FLAGS =","CEnableInletVal","Config / Bit","run with/without inlet valve"
"C49","FLAGS =","CPropValveOn","Working / Bit","proportional valve"
"C50","FLAGS =","CEnableAcidPID","Config / Bit","run with/without acid pump PID"
"C51","FLAGS =","CEnablePropPID","Config / Bit","run with/without proportional valve PID"
"C52","FLAGS =","CEnableCondPID","Config / Bit","run with/without conductivity PID"
"C53","FLAGS =","CLeakSensor","Working / Bit","leak sensor on/off"
"C54","FLAGS =","CAcidLevelHi","Working / Bit","acid tank level hi"
"C56","FLAGS =","CEnableCondPPID","Config / Bit","run with/without conductivity pulse PID"
"C57","FLAGS =","CStopDrain","",""
"C58","FLAGS =","CNoticeOn","","Bit for whether or not there is an active notice"
"C59","FLAGS =","CEnableNotices","",""
"C60","FLAGS =","CFlowingStates","","The system is on and water is flowing but not necessarily generating"
"C61","FLAGS = REST_READONLY","C61_Drain","",""
"C62","FLAGS = REST_READONLY","CHaltedState","",""
"D0","FLAGS =","DSystemMode","Default / SDWord","latest mode (see SystemModes)"
"D1","FLAGS =","DWarnCode","Default / SDWord","latest warning (see WarningCodes)"
"D2","FLAGS =","DErrorCode","Default / SDWord","latest error (see ErrorCodes)"
"D3","FLAGS =","DInfoCode","Default / SDWord","latest info (see InfoCodes)"
"D4","FLAGS =","DUltraDuration","Default / SDWord","ultrasonic duration off in milliseconds (o = disabled/off)"
"D5","FLAGS =","DUltraInterval","Default / SDWord","ultrasonic interval on in milliseconds (o = disabled/off)"
"D6","FLAGS =","DPolarityCycle","Default / SDWord","polarity cycle time in milliseconds (0 = disabled/off)"
"D7","FLAGS =","DErrorDebounOn","Default / SDWord","error debounce on stability in milliseconds"
"D8","FLAGS =","DInfoDebounOn","Default / SDWord","info debounce on stability in milliseconds"
"D9","FLAGS = REST_READONLY","DInfoDebounOff","Default / SDWord","info debounce off stability in milliseconds"
"D10","FLAGS = REST_READONLY","DWarnDebounOn","Default / SDWord","warning debounce on stability in milliseconds"
"D11","FLAGS = REST_READONLY","DWarnDebounOff","Default / SDWord","warning debounce off stability in milliseconds"
"D12","FLAGS =","DErrorDebounOff","Default / SDWord","error debounce off stability in milliseconds"
"D13","FLAGS =","DInputDebounOn","Default / SDWord","digital input debounce on stability in milliseconds"
"D14","FLAGS =","DInputDebounOff","Default / SDWord","digital input debounce off stability in milliseconds"
"D15","FLAGS =","DButtonDebounOn","Default / SDWord","button input debounce on stability in milliseconds"
"D16","FLAGS =","DDebounNoticeOn","","notice debounce on in miliseconds"
"D17","FLAGS =","DDebounNoticeOff","","notice debounce on in miliseconds"
"D18","FLAGS =","DNoticeCode","","Code for the notice"
"R0","FLAGS =","RFlowRateMin","Limit / Real","flow rate minimum"
"R1","FLAGS =","RFlowRateMax","Limit / Real","flow rate maximum"
"R2","FLAGS =","RConductMin","Limit / Real","conductivity minimum"
"R3","FLAGS =","RConductMax","Limit / Real","conductivity maximum"
"R4","FLAGS =","RpHMin","Limit / Real","pH minimum"
"R5","FLAGS =","RpHMax","Limit / Real","pH maximum"
"R6","FLAGS =","RORPMin","Limit / Real","ORP minimum"
"R7","FLAGS =","RORPMax","Limit / Real","ORP maximum"
"R8","FLAGS =","RAmperageOut","Scaled / Real","scaled galvanostat amperage in amps (see module/scale for ranges)"
"R9","FLAGS =","RFlowInRate","Scaled / Real","scaled flow incoming rate in L/min (see module/scale for ranges)"
"R10","FLAGS =","RAcidPumpRate","Scaled / Real","scaled acid pump rate in mL/min (see module/scale for ranges)"
"R11","FLAGS =","RDrainPumpRate","Scaled / Real","scaled drain pump rate in XXX (see module/scale for ranges)"
"R12","FLAGS =","RReagntPumpRate","Scaled / Real","scaled reagent pump rate in mL/min (see module/scale for ranges)"
"R13","FLAGS =","RpH","Scaled / Real","scaled ph sensor value in pH (see module/scale for ranges)"
"R14","FLAGS =","RConductivity","Scaled / Real","scaled conductivity sensor value in mS (see module/scale for ranges)"
"R15","FLAGS =","RORP","Scaled / Real","scaled orp sensor value in mV (see module/scale for ranges)"
"R16","FLAGS =","RTempInlet","Scaled / Real","scaled temperature in value in C (see module/scale for ranges)"
"R17","FLAGS =","RTempOutlet","Scaled / Real","scaled temperature out value in C (see module/scale for ranges)"
"R18","FLAGS =","RAmpFeedback","Scaled / Real","scaled amperage feedback value in amps (see module/scale for ranges)"
"R19","FLAGS =","RVoltFeedback","Scaled / Real","scaled voltage feedback value in volts (see module/scale for ranges)"
"R20","FLAGS =","RVoltInfo","Limit / Real","voltage Info level in volts"
"R21","FLAGS =","RVoltAlarm","Limit / Real","voltage alarm level in volts"
"R22","FLAGS =","RTempInfo","Limit / Real","temperature info level in C"
"R23","FLAGS =","RTempAlarm","Limit / Real","temperature alarm level in C"
"R24","FLAGS =","RMediaInfo","Limit / Real","media info level in %"
"R25","FLAGS =","RMediaAlarm","Limit / Real","media alarm level in %"
"R26","FLAGS =","RMaxAmerage","Limit / Real","maxium amperage devices can supply in amps"
"R27","FLAGS =","RTempVolt","Temp / Real","temporary holding variable between calculations and functions"
"R28","FLAGS =","RTankLevel","Scaled / Real","scaled tank level in meters (see module/scale for ranges)"
"R29","FLAGS =","RpHFiltered","Temp / Real","scaled and filtered value for pH for acid pump PID"
"R30","FLAGS =","RTankCurrVol","Temp / Real","reagent tank current volume in meters3"
"R31","FLAGS =","RPropValve","Scaled / Real","tbd"
"R32","FLAGS =","RFlowFiltered","Temp / Real","scaled and filtered value for flow rate for prop valve PID"
"R33","FLAGS =","RCondFiltered","Temp / Real","scaled and filtered value for conductivity for acid pump PID"
"R34","FLAGS =","RAcidDutyCycle","Percent / Real","percentage for acid pump duty cycle"
"R35","FLAGS =","RAcidDutyOn","Temp / Real","time acid pump is on in msec"
"R36","FLAGS =","RAcidDutyOff","Temp / Real","time acid pump is off in msec"
"R37","FLAGS =","StoredRoutineID","",""
"R38","FLAGS =","RMediaMConsRate","","Plates mas consumption rate"
"T0","FLAGS =","TPolDuration","TImer Struct","timer for switching polarity"
"T0.Done","FLAGS =","","TImer Struct",""
"T1","FLAGS =","TUltraInterval","TImer Struct","timer for ultrasonics interval (off time)"
"T1.Done","FLAGS =","TUltraInterval.D","TImer Struct",""
"T2","FLAGS =","TUltraDuration","TImer Struct","timer for ultrasonics duration (on time)"
"T2.Done","FLAGS =","TUltraDuration.D","TImer Struct",""
"T3","FLAGS =","TPolPause3","TImer Struct","timer for pause between h bridge switching"
"T3.Done","FLAGS =","","TImer Struct",""
"T4","FLAGS =","TPolPause4","TImer Struct","timer for pause between h bridge switching"
"T4.Done","FLAGS =","","TImer Struct",""
"T5","FLAGS =","TPolPause5","TImer Struct","timer for pause between h bridge switching"
"T5.Done","FLAGS =","","TImer Struct",""
"T6","FLAGS =","TUltraDuation","TImer Struct","timer for ultrasonics sync duration (on time)"
"T6.Done","FLAGS =","TUltraDuation.Do","TImer Struct","timer done for ultrasonics sync duration (on time)"
"T7","FLAGS =","TCondRangeTO","TImer Struct","timer for conductivity timeout"
"T8","FLAGS =","TFlowRangeTO","TImer Struct","timer for flow rate timeout"
"T9","FLAGS =","TGenNotFullTO","TImer Struct","timer for generator not filled timeout"
"T10","FLAGS =","TORPRangeTO","TImer Struct","timer for orp range timeout"
"T11","FLAGS =","TpHRangeTO","TImer Struct","timer for ph range timeout"
"T12","FLAGS =","TMediaAlarm","TImer Struct","timer for media timeout"
"T13","FLAGS =","TLoadWebPagesUP","Timer Struct","timer for creating web pages directory"
"T13.Done","FLAGS =","TLoadWebPagesUP.","Timer Struct","timer for creating web pages directory"
"T15","FLAGS = REST_READONLY","TGenEmptyTO","TimerStruct","timer for generator empty timeout"
"T17","FLAGS = REST_READONLY","TStartupTimeout","",""
"SS1","FLAGS =","SSFileName","File / String","PLC specific file name prefix"
"SL0","FLAGS =","SL_Message0","Message / String","latest message string"
"MC1","FLAGS =","MC1_UIStartCMD","Modbus / Bit","modbus UI start bit"
"MC2","FLAGS =","MC2_UIStopCMD","Modbus / Bit","modbus UI stop bit"
"MC6","FLAGS =","MC6_RstAllPltCMD","Modbus / Bit","Reset All plates CMD"
"MC7","FLAGS = REST_READONLY","MC7_RstInPltsCMD","","Reset Inner plates CMD"
"MC8","FLAGS =","MC8_RestricStart","","Address to lock the start of the process from the UI"
"MC9","FLAGS =","MC9_HaltACK","","Bit that the GUI sets to 1 to acknowledge errors. Used to go from HALTED to STOPPED"
"MC101","FLAGS =","MC101_AORP","Modbus / Bit","modbus alarm: AORPRange"
"MC102","FLAGS =","MC102_ApH","Modbus / Bit","modbus alarm: ApHRange"
"MC103","FLAGS =","MC103_ACond","Modbus / Bit","modbus alarm: ACondRange"
"MC104","FLAGS =","MC104_AFlow","Modbus / Bit","modbus alarm: AFlowRange"
"MC105","FLAGS =","MC105_ATemp","Modbus / Bit","modbus alarm: ATempRange"
"MC106","FLAGS =","MC106_GenNotFull","Modbus / Bit","modbus alarm: AGenNotFull"
"MC107","FLAGS =","MC107_GenEmpty","",""
"MC108","FLAGS =","MC108_AcidTankLo","",""
"MC109","FLAGS =","MC109_AcidEmpty","",""
"MC110","FLAGS = REST_READONLY","MC110_VoltInfo","",""
"MC111","FLAGS =","MC111_VoltAlarm","",""
"MC112","FLAGS =","MC112_ReagntOF","",""
"MC115","FLAGS = REST_READONLY","MC115_OutPlatesI","",""
"MC116","FLAGS = REST_READONLY","MC116_OutPlatesN","",""
"MC117","FLAGS =","MC117_ORPRangeTO","",""
"MC118","FLAGS =","MC118_pHRangeTO","",""
"MC119","FLAGS =","MC119_CondRangTO","",""
"MC120","FLAGS =","MC120_FlowRangTO","",""
"MC121","FLAGS = REST_READONLY","MC121_TempInfo","",""
"MC122","FLAGS =","MC122_GenNotFuTO","Modbus / Bit","modbus alarm: AGenNotFullTO"
"MC123","FLAGS =","MC123_GenEmptyTO","",""
"MC127","FLAGS = REST_READONLY","MC127_ReTankFull","",""
"MC130","FLAGS = REST_READONLY","MC130_InPlatesI","",""
"MC131","FLAGS = REST_READONLY","MC131_InPlatesN","",""
"MC132","FLAGS = REST_READONLY","MC132_StartTO","",""
"MC212","FLAGS =","MC212_LeakSensor","Modbus / Bit","modbus leak sensor"
"MC213","FLAGS =","MC213_Acid_Lvl_H","Modbus / Bit","modbus acid tank level hi"
"MC214","FLAGS =","MC214_Acid_Lvl_L","Modbus / Bit","modbus acid tank level lo"
"MC215","FLAGS =","MC215_Gen_Lvl_H","Modbus / Bit","modbus generator flow cell level hi"
"MC216","FLAGS =","MC216_Gen_Lvl_L","Modbus / Bit","modbus generator flow cell level lo"
"MC401","FLAGS =","StartRoutineCMD","",""
"MC402","FLAGS =","StartRoutineACKS","",""
"MC403","FLAGS =","AbortRoutineCMD","",""
"MC404","FLAGS =","EndRoutineCMD","",""
"MC405","FLAGS =","EndRoutineACK","",""
"MC602","FLAGS =","MC_InletForce","Modbus / Bit","modbus actuator is being forced from GUI"
"MC603","FLAGS =","MC_InletValue","Modbus / Bit","modbus status value for actuator"
"MC610","FLAGS =","MC_DrainForce","Modbus / Bit","modbus actuator is being forced from GUI"
"MC611","FLAGS =","MC_DrainValue","Modbus / Bit","modbus status value for actuator"
"MHR1","FLAGS =","MHR1_Volt","Modbus / SWord","modbus voltage value"
"MHR2","FLAGS =","MHR2_Amp","Modbus / SWord","modbus amperage value"
"MHR3","FLAGS =","MHR3_pH","Modbus / SWord","modbus pH value"
"MHR4","FLAGS =","MHR4_Flow","Modbus / SWord","modbus flow rate"
"MHR5","FLAGS =","MHR5_InPlatePerc","Modbus / SWord","modbus inner plates percentage value"
"MHR6","FLAGS =","MHR6_TempIn","Modbus / SWord","modbus temperature in"
"MHR7","FLAGS =","MHR7_TempOut","Modbus / SWord","modbus temperature out"
"MHR8","FLAGS =","MHR8_ReagntPerc","Modbus / SWord","modbus reagent percentage value"
"MHR9","FLAGS =","MHR9_Conduct","Modbus / SWord","modbus conductivity"
"MHR10","FLAGS = REST_READONLY","MHR10_OutPlatePe","","Outer plates percentage"
"MHR11","FLAGS = REST_READONLY","MHR11_InPlatePer","","Outer plates percentage"
"MHR101","FLAGS = REST_READONLY","MHR101_Status","","Status of the StateMachine"
"MHR201","FLAGS =","RoutineID","Modbus / SWord","ID of the routine being triggered (Flush, etc.)"
"MHR202","FLAGS =","RoutineStepNum","","Current step of the routine running"
"A0","FLAGS =","ANoAlarm","Alarm / Bit","No Alarm"
"A1","FLAGS =","AORPRange","Alarm / Bit","ORP Range - ORP is out of range"
"A2","FLAGS =","ApHRange","Alarm / Bit","pH Range - PH is out of range"
"A3","FLAGS =","ACondRange","Alarm / Bit","Conductivity Range - Conductivity is out of range"
"A4","FLAGS =","AFlowRange","Alarm / Bit","Flow Range - Flow rate is out of range"
"A5","FLAGS =","ATempAlarm","Alarm / Bit","Temperature Alarm - Temperature exceeds alarm level"
"A6","FLAGS =","AGenNotFull","Alarm / Bit","Generator Level - Generator flow cell is not filled"
"A7","FLAGS =","AGenEmpty","Alarm / Bit","Generator Level - Generator flow cell is empty"
"A8","FLAGS =","AAcidTankLow","Alarm / Bit","Acid Level - Acid tank is running low"
"A9","FLAGS =","AAcidTankEmpty","Alarm / Bit","Acid Level - Acid tank is empty"
"A10","FLAGS =","AVoltInfo","Alarm / Bit","Voltage Info - Voltage exceeds info level"
"A11","FLAGS =","AVoltAlarm","Alarm / Bit","Voltage Alarm - Voltage exceeds alarm level"
"A12","FLAGS =","AReagntOverFlow","Alarm / Bit","Reagent Level - Reagent tank reached overflow"
"A13","FLAGS =","AReagntEmpty","Alarm / Bit","Reagent Level - Reagent tank is empty"
"A14","FLAGS =","AErrorPLC","Alarm / Bit","PLC Error - PLC is experiencing errors"
"A15","FLAGS =","AOutPlatesInfo","Alarm / Bit","Media Info - Media near end-of-life"
"A16","FLAGS =","AOutPlatesNotice","Alarm / Bit","Media Alarm - Media at end-of-life"
"A17","FLAGS =","AORPRangeTO","Alarm / Bit","ORP Range - ORP is out of range and timed out"
"A18","FLAGS =","ApHRangeTO","Alarm / Bit","pH Range - PH is out of range and timed out"
"A19","FLAGS =","ACondRangeTO","Alarm / Bit","Conductivity Range - Conductivity is out of range and timed out"
"A20","FLAGS =","AFlowRangeTO","Alarm / Bit","Flow Range - Flow rate is out of range and timed out"
"A21","FLAGS =","ATempInfo","Alarm / Bit","Temperature Info - Temperature exceeds info level"
"A22","FLAGS =","AGenNotFullTO","Alarm / Bit","Generator Level - Generator flow cell has not filled and timed out"
"A23","FLAGS =","AGenEmptyTO","Alarm / Bit","Generator Level - Generator flow cell is empty and timed out"
"A24","FLAGS =","AModbusWrite","Alarm / Bit","Modbus Write - an error from writing Modbus"
"A25","FLAGS =","AModbusRead","Alarm / Bit","Modbus Read - an error from reading Modbus"
"A26","FLAGS =","ALoadWebPages","Alarm / Bit","Load Web Pages - an error occurred while refreshing web pages"
"A27","FLAGS =","AReagentTankFull","Notice","Notice - the reagent tank is full"
"A30","FLAGS = REST_READONLY","AInPlatesInfo","",""
"A31","FLAGS = REST_READONLY","AInPlatesNotice","",""
"A32","FLAGS = REST_READONLY","AStartupTimeoutE","",""
"F0","FLAGS =","FAmperageOut","Original / Real","amperage out to galv in amps"
"F1","FLAGS =","FUltraDuration","Original / Real","ultrasonic duration off in seconds"
"F2","FLAGS =","FUltraInterval","Original / Real","ultrasonic interval on in seconds"
"F3","FLAGS =","FPolarityCycle","Original / Real","polarity cycle time in seconds"
"F4","FLAGS =","FErrorDebounOn","Original / Real","error debounce on in milliseconds"
"F5","FLAGS =","FInfoDebounOn","Original / Real","info debounce on in milliseconds"
"F6","FLAGS =","FInfoDebounOff","Original / Real","info debounce off in milliseconds"
"F7","FLAGS =","FWarnDebounOn","Original / Real","warning debounce on in milliseconds"
"F8","FLAGS =","FWarnDebounOff","Original / Real","warning debounce off in milliseconds"
"F9","FLAGS =","FErrorDebounOff","Original / Real","error debounce off in milliseconds"
"F10","FLAGS =","FpHTarget","Original / Real","target value for pH level in acid pump PID"
"F11","FLAGS =","FTankHeight","Original / Real","reagent tank height in meters"
"F12","FLAGS =","FTankCrossSect","Original / Real","reagent tank cross sectional area in meters2"
"F13","FLAGS =","FTankCapacity","Original / Real","reagent tank capacity in meters3"
"F14","FLAGS =","FCondTarget","Original / Real","target value for conductivity level"
"F15","FLAGS =","FFlowTarget","Original / Real","target flow value for proportional valve in lpm"
"F16","FLAGS =","FAmpSecFactor","Original / Real","factor used in calculating media percent"
"F17","FLAGS =","FAcidDutyDur","Original / Real","duratino time for acid pump duty cycle in msec"
"F18","FLAGS =","FTotalPlatesMass","","Total mass of the plates"
"F19","FLAGS =","FReagTankMaxPerc","","Percentage for which we consider the reagent tank to be full"
"F20","FLAGS =","FReagTankMinPerc","","Percentage for which we consider the reagent tank to be empty"
"F21","FLAGS = REST_READONLY","FReagTankHysPerc","","Percentage that acts as a limit when the device is restarted, to decide whether or not we generate"
"B0","FLAGS =","BNoAlarm","Bypass / Bit","enable/disable associated alarm: ANoAlarm"
"B1","FLAGS =","BORPRange","Bypass / Bit","enable/disable associated alarm: AORPRange"
"B2","FLAGS =","BpHRange","Bypass / Bit","enable/disable associated alarm: ApHRange"
"B3","FLAGS =","BCondRange","Bypass / Bit","enable/disable associated alarm: ACondRange"
"B4","FLAGS =","BFlowRange","Bypass / Bit","enable/disable associated alarm: AFlowRange"
"B5","FLAGS =","BTempAlarm","Bypass / Bit","enable/disable associated alarm: ATempAlarm"
"B6","FLAGS =","BGenNotFull","Bypass / Bit","enable/disable associated alarm: AGenNotFull"
"B7","FLAGS =","BGenEmpty","Bypass / Bit","enable/disable associated alarm: AGenEmpty"
"B8","FLAGS =","BAcidTankLow","Bypass / Bit","enable/disable associated alarm: AAcidTankLow"
"B9","FLAGS =","BAcidTankEmpty","Bypass / Bit","enable/disable associated alarm: AAcidTankEmpty"
"B10","FLAGS =","BVoltInfo","Bypass / Bit","enable/disable associated alarm: AVoltInfo"
"B11","FLAGS =","BVoltAlarm","Bypass / Bit","enable/disable associated alarm: AVoltAlarm"
"B12","FLAGS =","BReagntOverFlow","Bypass / Bit","enable/disable associated alarm: AReagntOverFlow"
"B13","FLAGS =","BReagntEmpty","Bypass / Bit","enable/disable associated alarm: AReagntEmpty"
"B14","FLAGS =","BErrorPLC","Bypass / Bit","enable/disable associated alarm: AErrorPLC"
"B15","FLAGS =","BOutPlatesInfo","Bypass / Bit","enable/disable associated alarm: AMediaInfo"
"B16","FLAGS =","BOutPlatesNotice","Bypass / Bit","enable/disable associated alarm: AMediaAlarm"
"B17","FLAGS =","BORPRangeTO","Bypass / Bit","enable/disable associated alarm: AORPRangeTO"
"B18","FLAGS =","BpHRangeTO","Bypass / Bit","enable/disable associated alarm: ApHRangeTO"
"B19","FLAGS =","BCondRangeTO","Bypass / Bit","enable/disable associated alarm: ACondRangeTO"
"B20","FLAGS =","BFlowRangeTO","Bypass / Bit","enable/disable associated alarm: AFlowRangeTO"
"B21","FLAGS =","BTempInfo","Bypass / Bit","enable/disable associated alarm: ATempInfo"
"B22","FLAGS =","BGenNotFullTO","Bypass / Bit","enable/disable associated alarm: AGenNotFullTO"
"B23","FLAGS =","BGenEmptyTO","Bypass / Bit","enable/disable associated alarm: AGenEmptyTO"
"B24","FLAGS =","BModbusWrite","Bypass / Bit","enable/disable associated alarm: AModbusWrite"
"B25","FLAGS =","BModbusRead","Bypass / Bit","enable/disable associated alarm: AModbusRead"
"B26","FLAGS =","BLoadWebPages","Bypass / Bit","enable/disable associated alarm: ALoadWebPages"
"B27","FLAGS =","BReagTankFull","","enable/disable for tank is full"
"B28","FLAGS =","BReagTankEmpty","",""
"B29","FLAGS = REST_READONLY","BReagTankOverHys","",""
"B30","FLAGS = REST_READONLY","BInPlatesInfo","",""
"B31","FLAGS = REST_READONLY","BInPlatesNotice","",""
"B32","FLAGS = REST_READONLY","BStartupTimeoutE","",""
"TO0","FLAGS =","TOCondRange","Timeout / SDWord","conductivity timeout in seconds"
"TO1","FLAGS =","TOFlowRange","Timeout / SDWord","flow rate timeout in seconds"
"TO2","FLAGS =","TOGenEmpty","Timeout / SDWord","generator empty timeout in seconds"
"TO3","FLAGS =","TOGenNotFull","Timeout / SDWord","generator not filled timeout in seconds"
"TO4","FLAGS =","TOORPRange","Timeout / SDWord","orp range timeout in seconds"
"TO5","FLAGS =","TOpHRange","Timeout / SDWord","pH range timeout in seconds"
"TO6","FLAGS =","TOMediaAlarm","Timeout / SDWord","media timeout in seconds"
"TT0","FLAGS =","TTAmpHours","Totals / Real","accumulated Ah since last plate reset"
"TT1","FLAGS =","TTKWattHours","Totals / Real","accumulated KWh since last plate reset"
"TT3","FLAGS =","TTFlowVolume","Totals / Real","total flow volume since last plate reset"
"TT4","FLAGS =","TTAmpSeconds","Totals / Real","holding variable for amp seconds for percent subtraction"
"TT5","FLAGS =","TTGenRunTmeHrs","Totals / Real","accumulated run time in hours of generator"
"TT6","FLAGS =","TTGenRunTimeSec","Totals / Real","accumulated run time in seconds of generator"
"TT7","FLAGS =","TTReagntPercent","Totals / Real","reagent tank current volume in percentage"
"TT8","FLAGS = REST_READONLY","TTMassConsuOut","","Total media mass consumed of the outter plates"
"TT9","FLAGS = REST_READONLY","TTMediaPerOut","","percentage of outer plate media remaining since last plate reset"
"TT10","FLAGS = REST_READONLY","TTMasConsuIn","","Total media mass consumed of the inner plates"
"TT11","FLAGS = REST_READONLY","TTMediaPercIn","","Percentage left of the inner plates"
"W0","FLAGS =","WAmpFeedback","Raw/ Real","raw galvanostat amperage feedback value (see module/scale for ranges)"
"W1","FLAGS =","WConductivity","Raw/ Real","raw conductivity sensor value (see module/scale for ranges)"
"W2","FLAGS =","WORP","Raw/ Real","raw orp value (see module/scale for ranges)"
"W3","FLAGS =","WTempInlet","Raw/ Real","raw temperature inlet value (see module/scale for ranges)"
"W4","FLAGS =","WTempOutlet","Raw/ Real","raw temperature outlet value (see module/scale for ranges)"
"W5","FLAGS =","WFlowInRate","Raw/ Real","raw incoming rate value (see module/scale for ranges)"
"W6","FLAGS =","WpH","Raw/ Real","raw pH sensor value (see module/scale for ranges)"
"W7","FLAGS =","WVoltFeedback","Raw/ Real","raw galvanostat voltage feedback value (see module/scale for ranges)"
"W8","FLAGS =","WTankLevel","Raw/ Real","raw level sensor value (see module/scale for ranges)"
"SC0","FLAGS =","SCAmpFbInMin","Scale / Real","scales for amperage feedbacks"
"SC1","FLAGS =","SCAmpFbInMax","Scale / Real","scales for amperage feedbacks"
"SC2","FLAGS =","SCAmpFbOutMin","Scale / Real","scales for amperage feedbacks"
"SC3","FLAGS =","SCAmpFbOutMax","Scale / Real","scales for amperage feedbacks"
"SC4","FLAGS =","SCCondInMin","Scale / Real","scales for conductivity"
"SC5","FLAGS =","SCCondInMax","Scale / Real","scales for conductivity"
"SC6","FLAGS =","SCCondOutMin","Scale / Real","scales for conductivity"
"SC7","FLAGS =","SCCondOutMax","Scale / Real","scales for conductivity"
"SC8","FLAGS =","SCOrpInMin","Scale / Real","scales for orp"
"SC9","FLAGS =","SCOrpInMax","Scale / Real","scales for orp"
"SC10","FLAGS =","SCOrpOutMin","Scale / Real","scales for orp"
"SC11","FLAGS =","SCOrpOutMax","Scale / Real","scales for orp"
"SC12","FLAGS =","SCTempInInMin","Scale / Real","scales for temp in"
"SC13","FLAGS =","SCTempInInMax","Scale / Real","scales for temp in"
"SC14","FLAGS =","SCTempInOutMin","Scale / Real","scales for temp in"
"SC15","FLAGS =","SCTempInOutMax","Scale / Real","scales for temp in"
"SC16","FLAGS =","SCTempOutInMin","Scale / Real","scales for temp out"
"SC17","FLAGS =","SCTempOutInMax","Scale / Real","scales for temp out"
"SC18","FLAGS =","SCTempOutOutMin","Scale / Real","scales for temp out"
"SC19","FLAGS =","SCTempOutOutMax","Scale / Real","scales for temp out"
"SC20","FLAGS =","SCFlowInMin","Scale / Real","scales for flow in rate"
"SC21","FLAGS =","SCFlowInMax","Scale / Real","scales for flow in rate"
"SC22","FLAGS =","SCFlowOutMin","Scale / Real","scales for flow in rate"
"SC23","FLAGS =","SCFlowOutMax","Scale / Real","scales for flow in rate"
"SC24","FLAGS =","SCpHInMin","Scale / Real","scales for pH"
"SC25","FLAGS =","SCpHInMax","Scale / Real","scales for pH"
"SC26","FLAGS =","SCpHOutMin","Scale / Real","scales for pH"
"SC27","FLAGS =","SCpHOutMax","Scale / Real","scales for pH"
"SC28","FLAGS =","SCVoltFbInMin","Scale / Real","scales for voltage feedback"
"SC29","FLAGS =","SCVoltFbInMax","Scale / Real","scales for voltage feedback"
"SC30","FLAGS =","SCVoltFbOutMin","Scale / Real","scales for voltage feedback"
"SC31","FLAGS =","SCVoltFbOutMax","Scale / Real","scales for voltage feedback"
"SC32","FLAGS =","SCTankLvInMin","Scale / Real","scales for tank level"
"SC33","FLAGS =","SCTankLvInMax","Scale / Real","scales for tank level"
"SC34","FLAGS =","SCTankLvOutMin","Scale / Real","scales for tank level"
"SC35","FLAGS =","SCTankLvOutMax","Scale / Real","scales for tank level"
"SC36","FLAGS =","SCAmpOutInMin","Scale / Real","scales for amperage out"
"SC37","FLAGS =","SCAmpOutInMax","Scale / Real","scales for amperage out"
"SC38","FLAGS =","SCAmpOutOutMin","Scale / Real","scales for amperage out"
"SC39","FLAGS =","SCAmpOutOutMax","Scale / Real","scales for amperage out"
"SC40","FLAGS =","SCDrainRtInMin","Scale / Real","scales for drain pump rate"
"SC41","FLAGS =","SCDrainRtInMax","Scale / Real","scales for drain pump rate"
"SC42","FLAGS =","SCDrainRtOutMin","Scale / Real","scales for drain pump rate"
"SC43","FLAGS =","SCDrainRtOutMax","Scale / Real","scales for drain pump rate"
"SC44","FLAGS =","SCReagntRtInMin","Scale / Real","scales for ragent pump rate"
"SC45","FLAGS =","SCReagntRtInMax","Scale / Real","scales for ragent pump rate"
"SC46","FLAGS =","SCReagntRtOutMin","Scale / Real","scales for ragent pump rate"
"SC47","FLAGS =","SCReagntRtOutMax","Scale / Real","scales for ragent pump rate"
"SC48","FLAGS =","SCpHRawMin","Scale / Real","scales for PID acid pump pH"
"SC49","FLAGS =","SCpHRawMax","Scale / Real","scales for PID acid pump pH"
"SC50","FLAGS =","SCpHEngMin","Scale / Real","scales for PID acid pump pH"
"SC51","FLAGS =","SCpHEngMax","Scale / Real","scales for PID acid pump pH"
"SC52","FLAGS =","SCFlowRawMin","Scale / Real","scales for PID proportional valve flow rate in lpm"
"SC53","FLAGS =","SCFlowRawMax","Scale / Real","scales for PID proportional valve flow rate in lpm"
"SC54","FLAGS =","SCFlowEngMin","Scale / Real","scales for PID proportional valve flow rate in lpm"
"SC55","FLAGS =","SCFlowEngMax","Scale / Real","scales for PID proportional valve flow rate in lpm"
"SC56","FLAGS =","SCCondRawMin","Scale / Real","scales for PID conductivity acid flow rate in mS"
"SC57","FLAGS =","SCCondRawMax","Scale / Real","scales for PID conductivity acid flow rate in mS"
"SC58","FLAGS =","SCCondEngMin","Scale / Real","scales for PID conductivity acid flow rate in mS"
"SC59","FLAGS =","SCCondEngMax","Scale / Real","scales for PID conductivity acid flow rate in mS"
"SE0","FLAGS =","SEWebDirSuc","File / Bit","success of web directory creation"
"SE1","FLAGS =","SEWebDirErr","File / Bit","error of web directory creation"
"SE2","FLAGS =","SEWebFile1Suc","File / Bit","success of web copy file 1"
"SE3","FLAGS =","SEWebFile1Err","File / Bit","error of web copy file 1"
"SE4","FLAGS =","SEWebFile2Suc","File / Bit","success of web copy file 2"
"SE5","FLAGS =","SEWebFile2Err","File / Bit","error of web copy file 2"
"ProgInfo","FLAGS =","PInfo","Program Struct","program monitors conditions that may affect future operations"
"ProgErrors","FLAGS =","PErrors","Program Struct","program monitors conditions that may halt processing and require assistance"
"TaskUltrasonics","FLAGS =","TUltrasonics","Task Struct","task starts/stops ultrasonics for the generator flow cell"
"TaskPolarity","FLAGS =","TPolarity","Task Struct","task starts/stops polarity for the generator flow cell"
"ProgWarnings","FLAGS =","PWarnings","Program Struct","program monitors conditions that may pause generation but also may recover"
"TaskGalvanostat","FLAGS =","TGalvanostat","Task Struct","task starts/stops galvanostat for the generator flow cell"
"TaskAcidPumpPID","FLAGS =","TAcidPumpPID","Task Struct","task adjusts acid pump rate to meet target pH level using PID"
"AcidPumpCtlPID","FLAGS =","PIDAcidPumpCtl","PID","routine for acid pump"
"AcidPumpCtlPID.SP","FLAGS =","PIDAcidPumpCtl.S","PID","routine for acid pump set point"
"RS_0","FLAGS =","RSAcidPumpPID","RampSoak Struct","ramp soak structure for acid pump PID"
"TaskLoadWebPages","FLAGS =","TLoadWebPages","Task Struct","task refreshes web user pages from SD card to RAM"
"PropValveCtlPID","FLAGS =","PIDPropValveCtl","PID","routine for flow control with proportional valve"
"PropValveCtlPID.SP","FLAGS =","PIDPropValveCtl.","PID","routine for flow control with proportional valve"
"TaskPropValvePID","FLAGS =","TPropValvePID","Task Strut","task adjusts proportional valve to meet flow rate target level using PID"
"RS_1","FLAGS =","RSPropValvePID","RampSoak Struct","ramp soak structure for proportional valve PID"
"ConductvyCtlPID","FLAGS =","PIDConductvyCtl","PID","routine for conductivity to acid pump"
"ConductvyCtlPID.SP","FLAGS =","","PID","routine for conductivity to acid pump"
"TaskConductvyPID","FLAGS =","TConductvyPID","Task Struct","task adjusts acid pump rate to meet target conductivity level using PID"
"RS_2","FLAGS =","RSConductvyPID","RampSoak Struct","ramp soak structure for conductivity acid PID"
"SK1","FLAGS =","SM_Idle","4","system mode: idle"
"SK2","FLAGS =","SM_Running","3","system mode: running"
"SK3","FLAGS =","SM_Stopped","1","system mode: stopped"
"SK4","FLAGS =","SM_Halted","10","system mode: halted"
"SK5","FLAGS =","A_VoltAlarm","220","alarm code: AVoltAlarm"
"SK6","FLAGS =","A_CondRange","30","alarm code: ACondRange"
"SK7","FLAGS =","A_NoAlarm","0","alarm code: ANoAlarm"
"SK8","FLAGS =","A_ReagntOverFlow","190","alarm code: AReagntOverFlow"
"SK9","FLAGS =","A_GenEmpty","105",""
"SK10","FLAGS =","A_TempAlarm","200","alarm code: ATempAlarm"
"SK11","FLAGS =","A_FlowRange","60","alarm code: AFlowRange"
"SK12","FLAGS =","A_pHRange","160","alarm code: ApHRange"
"SK13","FLAGS =","A_ORPRange","140","alarm code: AORPRange"
"SK14","FLAGS =","A_GenNotFull","100","alarm code: AGenNoFull"
"SK15","FLAGS =","A_VoltInfo","230","alarm code: AVoltInfo"
"SK16","FLAGS =","A_AcidTankEmpty","10","alarm code:AAcidTankEmpty"
"SK17","FLAGS =","A_AcidTankLow","20","alarm code: AAcidTankLow"
"SK18","FLAGS =","A_GenEmptyTO","115",""
"SK20","FLAGS =","A_InPlatesInfo","270",""
"SK21","FLAGS =","A_OutPlatesInfo","130","alarm code: AMediaInfo"
"SK22","FLAGS =","A_OutPlatesAlarm","120","alarm code: AMediaAlarm"
"SK23","FLAGS =","A_ORPRangeTO","150","alarm code: AORPRangeTO"
"SK24","FLAGS =","A_pHRangeTO","170","alarm code: ApHRangeTO"
"SK25","FLAGS =","A_CondRangeTO","40","alarm code: ACondRangeTO"
"SK26","FLAGS =","A_FlowRangeTO","70","alarm code: AFlowRangeTO"
"SK27","FLAGS =","A_TempInfo","210","alarm code: ATempInfo"
"SK28","FLAGS =","A_GenNotFullTO","110","alarm code: AGenNotFullTO"
"SK29","FLAGS =","N_InPlates","275",""
"SK30","FLAGS =","N_OutPlates","280",""
"SK31","FLAGS =","A_LoadWebPages","122","alarm code: ALoadWebPages"
"SK32","FLAGS =","N_ReagTankFull","240",""
"SK33","FLAGS =","N_ReagTankEmpty","250",""
"SK34","FLAGS =","SM_Standby","5","system mode: standby"
"SK35","FLAGS =","SM_Starting","2",""
"SK36","FLAGS =","SM_Stopping","6",""
"SK37","FLAGS =","SM_RemoteDisable","7",""
"SK38","FLAGS =","A_StartupTimeout","290",""
"US0","FLAGS =","_TRinsing","Task Struct","TRinsing","TaskRinsing","t"
#END

