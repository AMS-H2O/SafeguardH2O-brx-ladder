// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database w/Flags;
// System Configuration; Memory Configuration/Devices with Built-In Types and User Add-Ons;
// use Element names (no NickNames); rung/address annotations;
// <TAB> parameter delimiter; 
// Write/overwrite file C:\Users\marcp\OneDrive\Documents\[02]Work\[01]AMS\[05]SafeguardH2O\SetupDmD_v2_9_4\SafeguardH2O-brx-ladder\Program_EXPORT_DMD.txt

PLC BX-DM1E-M-D

// Do not modify SYS_CONFIG block!

#BEGIN SYS_CONFIG
069c8425556c9e84521efb1d04ee2b47a926fbf22556c0f8fc1ef31ea1a6e64eeb0215921eb71ca3
572f6d45ead7a59ed47f37f9477c0453bd97f56911a83b76966559119db120ff4ddd2d6905a86d75
eaef837547936bc89633c8bbefbb9ab42b3cf2fceb9e2863e472af0f2f3853a985f318f833f7f1f4
808b03caccfc6ba1241d6a629e6519ce8d95a1e3604b49fb8c683f6295d1353d0f27cd170c2c939b
af60e155b1c67cf6a73f5c12fa1c9bc6fa44fdaf81286b0999b6241096386f7b68b74b6ac7d51792
f2f89ce99adf03d497a90767fb28c5a80b07793388bef3f1e7ee5c6a7c3a6a40684be7be2bd16d79
1a216416d9cdec476689031a3425b827e00d316e00eb3dbd0cdb103cce9e9ccda8262e999dc3da13
2d824f9a9ab5bce88b758df910707354f0c0a9f3301d53fbdbcd830c0dce8bbc6570980f27296cb6
1d341744c723fae2d65a05bac350dc9b63a12fd2d4bda89c3dae4c0a0fd85f640407b332e6c9dc89
5c6b0ad0fd259580d8d4c2b2a91eb9e89de9d5ede9dfb99cd1b34ee1ceb900cf92b357764a5238f5
39179b2a331c6ebba5b66f7e4fcad3dd18c5fcf261b3c21427ba29e44b2682d2a2a82a0ee68191f7
10036568115ef7626b8cba9cedf5863bcd09858e94c9cf902ed033588e0ff32f6ba2c68b82c69b8e
9c264e3fa8b451ff63f21bad00d0ea4e870c90b714b2e7c1937cbb890c7905ae0f1630577981e74d
fbe4b9272a257c3ada35f917baebbc3fd67191bbc2ad7c04ee30ce6531e0f5321a2d8f9d5ac936e1
4d38cb7d726c5f3c1925878f01dc2fd54d4dd51436dcf67f61b0f10e647bb733c4cfa5fa9821a8f2
a3e851f92540d3a22aa8d6e81a082603cd8a25782acda0046a72a912b971d44e15c37b50643fc6cc
75360d6ca9698a655be2089fedccd088ba436c9b468845b32fa63cbad31dcd1af1b73fe369355d23
73614dfe5e45c03ceb7a8509b9c7c7d74500609250edc5e4357cada18899814672de2a918f64b284
1659a7b9fdcf1b8401a3bb2d44a7edd3aa9c1e4b3da5aebbbc285a35830f7025ac660c5beaf6b6bd
431b06fd230f6c9a100786636036f76435b61a6e82853aa60522d1c85fcc5b55d110020a8dfbe136
f62f6ed6af46b78fb7338b6b18ad0d3ca9ec873ef281da8462b11866abc766fe57c0ab169d1de37c
e8b5463c70f199cfa39d61130b6265c128c1e60f2f97b0f3c1f9196e6c2da72cd0ce691820ce0aea
0b2769628d7d421478b85bbd5dd1061591adfeddddba10fe0d19d78e94830276f2b2255c2602cd0a
77925d0dfb1fec8fcce1f4bb1ab78b78dcee7b20e33144e8442f78865b769d8ee3ca90178f3cfe6e
fb2a733c1893b069de2a93fa3a5de0ac1031386ecbbbd2fce5c8fcfcdb102cca99b2a22cfe7b7cab
d224bbecb0c1127f6e4fbafa77c9b03f84d372dda9012c3b44c5d8f3dc425bd4326b0db7a14c797f
be7901984adc690eae925f9eba19016a115b661d1a26551e3727a09f411ce5cd74769ff57cb2e80a
2118b1b726a0e8a0776ad1985c907fe1ce12b3bb227650e7d823de7223565b02fcb1dbd1089d5272
aed93f9b9c4899fae1e1f9470e923e90d14ee0ff743490c9217ec6cd2273aeae1bf24ee6a8ed7643
abe9ce2419528bbca6c6b407738473e198aabd9ed4f0eac2b3c797e5a693608d46a6198c767aa980
f0ccff2daa36da55941fb7d91bc6b9406c060cc31815319a707105f4b1b480b08b1452b18c4702eb
b1073735c7b59ad0039771e1f2d7d0d933a1bd9e3189f0d9e5dc9a28951f7ce8a212d4d3b3af1d2d
fcda8a3f8c46cdc0088bdbf12e4c9ace24650bc83f101eafe36f80e0bd264ab282d1da23a2ca10c7
e6d0cb8b90307608c662aab84258697d5c5cabea2f88056183d2db670d73bd6fe148227c7124de7c
fb558cfa9508318b54bcd678fbee76a972b03eac7fc0f0fddf6eb830341ff01ec591ded37d9c62c2
e8aac8391ca5bb8c4dc4714bef21b5299ad0ada8c72fb5421f5b5ff4f5de67773d92161a8c11a258
a7d15913ab428edd689fe82c945c27e5bf134c4165e4e282c3741e9e8a90e1f39bb64d651edc6875
44ae15b134fb5a0a53ce1f8658aa253b2d40b8bbf26debf10b1c6a567bd97c3b327b3561d3e83e46
555372d7178ed255a86be81eb1b28de1bf5f37eaf9a7c770649e5ec717cd841f878636b20a44c9d5
cf479c7f1d81a52aeafb2c3b9ef05e7ee7276bcd618542acfc560f700b4bad6fbfa2fae3ed7f0d55
a6027addf162cb2294abdb54ef611a92ee25968e957011ec46bd3163e8873944b2261428517b3fc1
a6d0df3c7476c8736b6b8ed24a6e27fed3bf2320a8eb19daca7104f73ba20bcb73f6d5e1c512de2d
ba114ccc83cd430e571eada796aaa29185e64b559ae0819dca3a1b2fb4a1b7d071e8def00d01e03e
0f7c8143ebf6f6efe94ca76e0264c5d7c3bd9fadb76c8baa2c7e62c38f58385f76dbc3fbbc246751
c716fbb1f42a008cea60777df246dc04111f2566b597886dfd000e05fce67b6473b178ee71499540
e91fe32c0db7bdd5c57f82cbe461a3acc5467a9560508a1afeec8310825d75d8b5b89cf8a68ea9c6
4b2d1793dd9f4c668fcab70c9987c4dabc4be012de61c15dfc26035ce50b3b1061f0ec74f42740f2
55ab786061e6777b82075706d01efe7bf69dba79cde051f622caa496d37b3eb492aad43857e83e3e
1a7463421873b1ffd47b0d669f97d29f78a56d9484b554e9061c533d943e70441f70453f4ecdf7cf
6dabf65d2788cdb1f264c199298c231f19e36fe90f8e84c690018d5192613a0d64e9f822cb25f44d
8f702d4b000fbc091a6c1f8206f65f4992f87ec6681d837ac5b9da00c2a96e7eff28144be53cf4c9
2a65d575edee731bc6b9627e2f4430aa2e79c18176b25d15ed8f151e4e5dfe80e06f4e4fb4e9df4e
1546570d75e4a18cb2ab2e6ab80395968cf45f0a395205be42b6fe65c3976d2060dd631ac16e07cd
63ca5ddd155471a3a174b40ecc5f1ba8373dfd6085123f41f9ebe9caefee3bf2bbea7e8c170a8bf4
2422b4ffb794ae42dcb5beaa2419d1fb8312d36b57119c0c0dc4f6614307116d0837716d8e318f9e
552c8b8b1abf6cad156d0f5ed0e98d41a996eb65f866a376fdccf7b95cea10c76c852a77c7bd6d0e
adda224b05e1f654911cdef01e65f72462934b2e7cfe85ab2f1ddecbdfb320330f0cd0bf92eae8f4
270f1448b0fa1789e6037e3f6e58e13dbe6eb3aca7badf0ae07b566baeebd83a818c2f9514e7f07f
bf222d158493827c566fa4f9ba005eee94c4afc472068fac257c99e8c794f5b4a14f1c0d70849281
43c52078985af368edd39cff7cacece5e2e2b229526ad35b4068909dce1e816202f4b6ea48fbc24b
57fc674b4fc14f0f3928cfce060e2b0141f52ba4d7501b889a31a2c00490046d7a885926af508e7c
f36d70182cbc8f97484b1b24aadc9d2a40407c566ade008ffc7932fda7e9c2f60af635fa1b339e6f
3becd0ddd439848c8742a58cce392b0356d9dda32a7c9e49512bf88ee9fb4059b449df7e6ca0a38a
2961ed93c603282745a2c9376c2237b563f8f3fd5fe22cb0a964ff901ad41308f0085f9259108263
3cb9217b7e30d3ef60d9c3cdecc6a997acc5dbc511d02367656087a652164fcac28726dad3203370
bbee8ba1c708224d73a48df0d9b84f8bc2ba97347cf086d3b1338952843f9b6a715c7745d986039b
d95ef61b27a81104623f009d534c20abfbc78d43999a5357d9d1176024b561c1073d61dc74642ac9
407b9579c9d7dc19fee7a5dccee6b3d0958832d105e5fd5d1ec113b84a83042f4eb97d30e8a96045
a7c322c8e3ec8e513aa65f110486b02b985d7a07cb583a5bf1ee66b48ee271989c2b3b2592f70a77
0fec8eba9b226d7ea43c631ef8df4cfea9b69fa076d665aa4b6362d205d4e8e58c6a0d0a63f25b4c
a40e91bfe3b5722146268c939b4b319addee369bb3147e08492d730f9999ddbf8541168c76d3c419
0b3a26887ed41b35693f287bb44dbd39ca1d279f1814a3cc2eeae4e2059050471af03bf99d7b01c0
04235ed24193ece4cffb07fbe2fbed93285c930ad4669117dcb7038c273bcd3b3affd8a529b98bd8
c7eed105a569ef07e887d821a7df3798610a180353afc9bbb4eb5e3c686d6b4ac376db418e069459
f3a0c3d134ecc7c758799599f3d6f9409f95b0e5b4bf91124821a75534a26267d0d3a122e2106003
d8573af1decf1f62985f2578b6212761b1d8c279f2e5f07f51b0b75df94a5062ee3c8377fa382a3e
0108552e80c0763e8bb77f7752f8b157b43b48cf04e61a4a9d3cce035856403f44376249cf427681
c1b1d17f0aa0be663120df98afb71c8013810982cce2379d965b3c103a27f52a2831b0d5ecfc57f8
d660935ccf2e2a9353651df69cb4cdf6c35fffa9499e86fc93e58a98233acdf19066a2edf5769392
66f40dc1f7b991e8e7d206aa499cfce2c215793bc8b21a7ca6d807a92b9d10fc908dac633d932d83
911ede8082b8c6e9757c7fe4768e6d0ec7c007a81a82d0b291ce1464d85cf74931824e53a04b11e6
8feccd156bcd79251782a1c6b9cc112c8a8a263e40d84229c540385eee570bb2f1aaed4e2d05e2c7
21be4526834c14e2cf7ef42db7ac8a325a12776aff2f0e698d8916a21561587cd05f91cb2c19a70f
86edcf5675bba2b626959ea052446380638f7847d43121f956a3f029e4f5bc36fe41756aea4ee358
19f2765662cd765f5bdb21409d85c57a26ad0a4f6daf9deca408ee22dfc2d030a99572d9c8882a6b
a1610c6268aa99f22ee21f027007702f734728ead471a1f6410289279817c79b2d2216ab6a940a21
3066be5a8add8dd38e85e98aaf9989dd5a1d18e0c004265c98f1fb7141068205959bb4ec7fc9e7bb
41a0316d5d5cbd755dc659c1b528b94df7811be7a7e5c63bd77e6dbdbadc0b5ceba8a33e5e90f23c
effa5e4a2794bec757fd5e3a14a5fa12061244fd2ae61b0604d4778d0f1c623add8705cb090ed534
9fa2cedced0134841c8d82603b025c658dd2402b41c2d6f9bb8fa30ed673ccaa86dd6c0cd3042185
309f09c6bfefb8a22f4921e10eb777f4f72c987e7d5b92aae61decdaceabee0c017da6726e8516f6
5300829470cc75a1f00fdfdb702ae090bee75cf66d7345c8439587d2e5cc1ae09615addb3753158a
21539a179a8a9cee56ea79aa6a14f6758eed9450b78bd15639845c214fddaf2b1a33b9341d065b0f
423113476e90f59ecbcbaf21fd1a46af5a150e2a8a7aff9b0c0b55bc2bd9ce0460fa5b79cec096f9
97f6c6b1413b2b557a8d9556d3efc72fd861341dc2f606b1158424b240c07cadab19350d46ebe3f9
077c81d90b10f2e813b55d4d0bce8d6ab0b7ba99de7230022be2611c98fa82e61c2e2e793f6d15cb
e70e0c920a84959735ccefb67c765c4aeeae8ef35aef7f2e3a9266333470c003183b1b708262f12e
82b107e7671f42387aeb62672b5a233e71890730086d11e0cda2c842c1d36d3810b76d486d9793cd
6d4a6161bf4ee609eb22f4f407165681f627228df997ba0da9cde7d72cf42db596535673011ccb78
df213c20d1d3a14ddc7b3d6d45e2949a2c0b6c722b9d847f3d8a118ca0061cec4e203f1977ed1ec4
43ae6aafdab8d5157a76ec0c46d50564d10c9b0ce22e7226085999a13fb098954fcb8abe0771aa5b
3b6ba6ff85e4ddcbece89a80bdeca8194ddb6208715836f4169c6b60410c6a884c69e2c991d25230
36017b039d5ba786a4bd796aa43bfc6fd030e44fd602718b6265fffe718a7d9d3c1148ddbc6cd730
214d09a765e0c78a937b813ee16ebed061fa051ff1df5d7862c90691b4973312bc23573010ddead7
442e2abb83d4b101b6e1c5b13478a699c68bd46bfecd98e39d43a1cd900c7a092a18668c8fc89ae8
b4a7fd3a72dbd23604ed41fca07a6d0d8e241daee946d752bc6c4f00c4ac6a5a34858cab6969d529
4af3c352dff76a1ac37f14ae3211a9617314553b7567ff2f0e4eb24118ad3091254953e6c7d2c5df
372f217de58940e591f9acbbce6b7d3a3818363568c6c897b43d403046e70dbddfe09800ee50ea74
58347503fa15b62ca79ac3563879640cc5d80bdc9971fd192171f7ea1e2233d2656852bcac33140a
50e0e341af7c93f4155e29d7ca9e40d344abac9e2e2a031d5e048e19f183db0e4011667fd0941fb3
94a3e6750ad284740da133cb77ce84264ba089b4f0c9056217000ee238767edd0fd34455302a249a
166f7446b6edae19063a13655629a10d6cd2bce844154a279c1d883e1cc87692ffd4d17a3ceaf251
6e13d1abbbe12ee20b42d2c9aa36bd40eb234cfebd33140366c63a753e3c286344faa5c569362f07
592247ed2f211342bfc0fe899861596eb1fec2dec77e4251a52fec3577c05f47feaec57115364ce8
f19691bfbfa13198e66d374eed6c7472254f97282bbde72d42d0a98fec21d908420dccdb3d087a01
4e437c6ceb2afa140cd297cb3a0444b569aa43efb587a98a30ebf0c4a10e548531d89743a7ef6f04
12109d0afaaa9ecf3ae48e4120765a012fd00948dbff390371c1b7d68d2a4d3e3c1d544e3e00ee2b
d433443bea4bca3926415c1c2848ce7c467241c9189ed78f09821e9b7080c5f51a440df69c331a29
79dd877b04c1896e5c3ea66c666308610f025d9a8ed3f93c7e01b2875f39d72af2b3d9d36a356c26
ad2f17f7ff7e8687984ef893c7d9ed677395f43359995cf7e8f9bd8ec49432d2e59e79905b37b5e5
01e7adadb1774f017817bcd6903835625c9ac6a5dbfba1fbeb6d47a04fbd44ea70eb01982973eab5
80d817db57e1e6f5f4fd19d714e2e207579295a25e8e645b00e02d494edaed11c1774b12e793845d
288b247e322245b09839ce8298aa8b59da1a8abe3f4bba4edcf7f81fddda47fcdc1e0d284ea3c58a
c1e8888d7f67f646e3109576f21aa31726d1bbdf9dc7d9e69c9146acec4d4c1b70dfa9822eb2836d
52ee249b1cd93c811d42e9a5464f84960c08a0f2ebf477fd034c27be63c37a11b93a5feeacb29974
38e5e8099cab83273380d31b90be513f4883847c57adf29b3d5f02326c65c51d98df67cca79f8c8c
f1a9533ba51c8154b9ae5a369613a1dc30985c175280f54b9b7c962981fee26a4d02886cfedf88c6
dffcdb84701ca02b1b0865c672f488372fb0d32cee36e5f20c1666e8f0c8ed58c1618a5a3ff6d2cb
e9519d290e60ae927ea8013fc1144bfd2c58c0843f1918ad990afd04de2dbdcf72eafeb8047f54a7
e42e4bd96c36bf5372ff03a1e1a84d29b440600b67f11fd82bdde1d2fe21deef33fd8080c1025371
84824d7a0c7950592600655f8cc270eabfffb3a13bd8c877cf58d328780e81a25f42486507eecc7b
95fc5143e17a72c217280651bc61121c6a6a02ae0ba2ab7aeb0cb69f748d5a39ae4caa3922117fa5
38b4df89f9db7999165d29bcac2a9b4798d6ae33e44ee85f4c6ab4cc929029856f97d4dc7fefad7e
228f93d650bf8f80a67ae2d928a386bce760cf6f6c8e7b67a1c7fb064bf9667c1e83bab59721bc61
73ed049c91bb43ba70b3f0ff3ceec6b44a63e76fc621462da542771f0b86b948060e73d5d48832bb
defa1b3017600b422e70580b79048f4c1d7af2e176a2e9b0a32ddc588d1555f92dfc324df236d62a
7c51a5b10574f9d5f36eb87dd21ed94cb03a13e0ea63e6c32e0087cf66c4d03a956978b19c05839c
79b0fceca37443541c811acfda2105ec4379f560d7fd0f4e5484967710125206925b77a093bf3cd7
7e9124d0424caf2de128e11b41f7f7ed11d5d42f8f67e860c67f44912cb99c49b3d2210a106e0b71
b3c77cb1a0a5d392930719c6230e196f32b6fcb579b5a2670c0453125b04e94c0bc9029f3f0e8e67
604cf39402cfe24fce8157424a2ba1f3705b7aecee50defbbda154eb6d4ed5d990cee84ae560f22f
22598e6b892950c2b984a950c05e3d8f5182ef0e2ed6c2492a2a98e5fbf6bdbc426c94c5d84ac700
acea5bf695824a0e2415794cf41dfd805b4502259ed409e89eca0a083feee52fe8a0b03dd2167146
977f384d73053cfc71ccadb4026b8f00347780856259abf59630c36ff0075ffac1209907b00ad292
556dd540bc39731ce46520ee0b6024ceb95475d241dcfd6486ce78c5ebac0ec9c9939cfe9bcd96f8
924c83f6374755a083e1c9918bdedb0d0f695da43ed29ef535356afba9b1f2d82e36f2141ef23b99
ce9d46a76679793c7cb4e6b45204981efb6da608a5e25286b2959fa0bfb259d560c540be5641d105
c7f1ca39a8c79de87aa8a17f85309035dbc35c3272978097cde374639cb5c34c03857eba0a110524
3443fe22d975ad32994f07e6cb5a60e741e71e89c4361bd9a9e5af30c5fd92e0b127c6212b431c65
0789680f6fcce751fe5c925e7c13652003d2a306298a8fb3bd21bc4071193a8b33221cc3e33836d7
80c44ee989585941b4f751e87473aadfd3abf10d6cc85c3578f7a4f4e302339497c8ddedac583982
aed6e41303ee7ac22b93e8401041138c10cd6704a680ff750340901b72af17f67730c143717fbdb8
0805554dbc0264f7d3636e88b1185b69f12d34fab3b1e38101e023f9e70c41b0a9f18a188bb4a3a3
e89cd4f38dfaf069755c51887a1bef2fb7944b596c0fa16413454e7b47a161afa00e5d7a771a044b
cbd67f2ade1eb786f07f67a4d00b2888b41bbb5a572ebaa7a87298a721504655e756e43b0f4c3f6c
a52fd9e0a6bede21d5c2dc141f67fc6e3d0ce285890e031407cb3cb9f6b074f379b1bed9983f1eb9
95b87c709207e326bcd764255fdf8145bb2e92389638677f44c3d250931f9816a23625f3d1c3ea2d
592c5cf18a3fc7ca24b4137109934706148b9770f28199d3ec8686bf5141e77922eb1d30d8f9639d
ef5cf9db4546de7ea2cd68d57eb5c52617ceb8600e54b414369d909df27ff558c19acb56a0596d1b
01b822259c3ccbd40d2e424fcec014c173de108a42619c7ddffb6185b6f2f6438aee3c4409ab60f9
3930d6088d9ed155defca85e5bb496f2bbcf4dc6256775c61bf5935c27418e2246d82da7de40f5cf
5549bc8d606b2a72ebb39a102b8578e9e2c67f1cac084c23d3fcce7ab5af2325c0126e883f0fb266
fd10bcb95f8e49f2fcf52479fae94d7bb757940cdf9fe3cb21b5e3a767db7f5c2d05c4012ba8e98c
a43de043bdb76a6d5ef155dd44b16c3b245d0055df2ce10590085ff17ad82c0b8ac95fcd78b08c19
7bf84de14ab111f79c0d5eef8719acd40676e4a85c5e3b7118414be8b7cfd5ba5c4608edc7af58f2
85e7802f61bc98f684f3e697e347be7933c01124061cec7a3a705319e8f1ce3be46810794e449d62
ac97fdcef4e65b11b1b5b19c7d8fe4558b508e22be87a705c6ee0a2b4682ed3d214e714faf790aae
e9e0c146eb13ffeca1a1cfa05af616560517250b6010b29d6b7f34756761e975318013bc68a9d513
0a7af638614e69badf10036dff6834ade387ed844df30ebfc4e8bf6490caeb7edb534179d816c453
36e22df6ea1ba27d7e8b5c1fee875ef422fe27b90e475e2cf3594d8d8e889131353e038a3b0b4510
56d719336762ecfa000159bdcac107220860496db9752cda706ee3fe6e2cbfb040ccc5c1b774f0a3
c189df36887e7be5ec0f6a3d2c2c7a14855012ba040990a4466d5126adf18f7a7fa7a794b41c5dbe
6944a395916c12083869c7dbcb4a32c97ce2fd5f95d153547c54570616d59b2dcc9bbb0dc4c388ff
2fd3636af0537dde77860b586a2d47879c9fa843ca2b03daa28806e444192e7e86ccf7a58e6572ed
b54f86abdbaa0155021afeca2bba4cf1889faa2920f65ac2ac99c1283b18c9297059c56bbd37ed33
1bcafecac99e5d44b650b6ba09848e2d4e3154530af46cf32a057faee60398fd10672b18083416ef
15c948a66c0a04f86d561b7eb82e6a28735b4e8f4b6d540ce9a368ba9674962f12ed6274fd00e66a
c118ea69d18365e9fbbc71a7e99c90acce9eea8ac30e8baf849290e9f4c613b635504a1535ba47cb
93dc95d4f0359badf589be83eddacdbfb56ed8f6afe7ebfcb8b642b57ebfc2bf95d159aebb3c2552
a34fedd2ba3605a04c6ac7dff90d84d65435cf92a49c223c6e5cbf2353fbd5e67b35869d82fbfe9b
8ac6e0510036e21955950653a16a9482dbfe6e6ff85a702b0193cc062e52241c5aa70f425a33edf5
1bdeb113e993ee87936bbaa1230c7d2feb66c5c63208acb1dc8729aec778ef03751947f4ba275ae5
41e7ab13d332fcbe4b8568d743926e40760b6b4e5318831aa3473f2c3f4c76db28bdfe8dd575b92a
68e39e2d04c1d5cde2319397d6951a4fc921dacaa92dd145e685fd194dc3db758fc3e6051bc8c3fb
48825333cc65f2f728854d8f92b5499e90b3a6a9a5a9d286a62902cee892aaca630ba4de9176431e
270d9ef9a80024e70423074f3830dd41dd4b46a39c35fd8f10b4aadeeb675408178336f48e2d24fc
3a9512ada6361b28777fe9f6b1ff0c9134e384005e48fa7537e1ce3b21e23fc24538b32009c20bf8
aa3ccd1cf61d1af9863c3f95c3b2d7b28924a36f43d6ecf4e66ca52d665dc3c83a104f96a40693a2
82499adceed616c2d9d75ac30c489e67e99d7b01c932366121f0751f569c3bdc39d8ab190b6a9144
288368e43bd2cb3d27d33551be9a0bf50ed944ba0480c2bf252876cb46c057e32a8433f9f622d122
68e291dcbafc51c0b67d4d84688eed5fd1b6cc17094252f7b67dca4502d0ccf99f89798e9165d452
0b200097892f18b3d77a17336a63d0332d461b020e56a4bedaef
#END



#BEGIN DEVICE
	@LocalIOMaster, 12, 27
	@UserLog, 7, 11
	@IntEthernet, 4, 2
	@DMLogger, 5, 10
	@IntModTCPClient, 9, 14, 1000, 2, 60
	@IntSerial, 10, 15
	@RamFS, 1, 1
	@SDCardFS, 25, 1
	@IntEIPClient, 22, 31, 1000, 2, 60
	@IntEthDMPPClient, 23, 32, 50, 250, 2
	@POM, 24, 33
	@Axis0, 30, 35
	@Axis1, 31, 35
	@Axis2, 32, 35
	@Axis3, 33, 35
	@HsCtrTmr1, 14, 29
	@MyFTPClient, 32769, 38, 4294967295, 21, 30000, 4, amsftp@amshm.com, AMSwaterHM34896@!, ftp.amshm.com
	@MyHTTPClient, 32770, 8
	@SERIO_001_A, 16385, 24
	@SERIO_001_B, 17409, 24
	@SERIO_001_C, 18433, 24
	@SERIO_001_D, 19457, 24
#END

#BEGIN MEM_CONFIG
	X	BIT	decimal	2048	-1
	Y	BIT	decimal	2048	-1
	WX	SWORD	decimal	256	-1
	WY	SWORD	decimal	256	-1
	C	BIT	decimal	2048
	V	UWORD	decimal	4096
	N	SWORD	decimal	4096
	D	SDWORD	decimal	4096
	R	REAL	decimal	4096
	T	TIMER	decimal	256	-1
	CT	COUNTER	decimal	256
	SS	STRING	decimal	128
	SL	STRING	decimal	64
	UDT	DATETIME	decimal	32
	PL	UWORD	decimal	256
	DLX	BIT	octal	01000
	DLY	BIT	octal	01000
	DLC	BIT	octal	01000
	DLV	UWORD	octal	04000
	MI	BIT	decimal	1024
	MC	BIT	decimal	1024
	MIR	SWORD	decimal	2048
	MHR	SWORD	decimal	2048
	RX	REAL	decimal	256	-1
	RY	REAL	decimal	256	-1
	A	BIT	decimal	256	-1
	F	REAL	decimal	32
	B	BIT	decimal	256
	TO	SDWORD	decimal	32
	TT	REAL	decimal	16
	W	REAL	decimal	16
	SC	REAL	decimal	64
	SE	BIT	decimal	256
	MSG	STRING		0
	ERR	STRING		0
	SysName	STRING		0
	SysDesc	STRING		0
	SerialNum	STRING		0
	PartNum	STRING		0
	TaskGalvanostat	TASK		0	-1
	ProgInfo	PROGRAM		0	-1
	ProgErrors	PROGRAM		0	-1
	TaskUltrasonics	TASK		0	-1
	TaskPolarity	TASK		0	-1
	ProgDosingPump	PROGRAM		0	-1
	ProgWarnings	PROGRAM		0	-1
	TaskAcidPumpPID	TASK		0	-1
	AcidPumpCtlPID	PID		0
	RS_0	RAMPSOAK		0
	TaskLoadWebPages	TASK		0
	PropValveCtlPID	PID		0
	TaskPropValvePID	TASK		0	-1
	RS_1	RAMPSOAK		0
	ConductvyCtlPID	PID		0
	TaskConductvyPID	TASK		0	-1
	RS_2	RAMPSOAK		0
	TaskRoutineTest	TASK		0	-1
	TaskUpdPlatePerc	TASK		0	-1
	ProgNotices	PROGRAM		0	-1
	ProgStateMachine	PROGRAM		0	-1
	ProgDraining	PROGRAM		0	-1
	ProgAbortDrain	PROGRAM		0	-1
	ProgAbortRinsing	PROGRAM		0
	ProgRinsing	PROGRAM		0	-1
	TaskResetPlates	TASK		0	-1
#END

// Beginning of Code Block $tFirstScan
$TSK	$tFirstScan

// Rung $tFirstScan#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br>"
"<FONT tsize=5>$tFirstScan</FONT><br><FONT tsize=5></FONT> "
"<br>This is the first ladder task that is ran once when the "
"PLC is placed into RUN mode.  Just to be sure, internal "
"memory variables are initialized and any default "
"configurations can be reloaded.  If a program change "
"requires these to be reloaded, be sure to switch to program "
"mode then back to run mode either by physical or software "
"switch."
#END

NOP

// Rung $tFirstScan#2
// Offset 1
#BEGIN FMT_COMMENT 
"Reset local memory variable ranges/registers to zero when "
"PLC first starts up.  (If a nickname appears in the ""End"" "
"column, may need to increase the initialization range.)  If "
"an I/O was previously on when it shouldn't, it will be "
"reset at the bottom of the scan.  Note, not clearning "
"specific registers to be left as retentive in case they are "
"changed by UI operator (examples are target amperage, "
"polarity or ultrasonic timings)."
#END

STR	ST1
INIT	"3 C0 C63 0 A0 A32 0 B0 B47 0 F0 F23 0 W0 W15 0"
INIT	"3 R0 R7 0 R9 R47 0 D0 D3 0 D7 D23 0"

// Rung $tFirstScan#3
// Offset 32
#BEGIN FMT_COMMENT 
"Initialize specific modbus registers to 0."
#END

STR	ST1
INIT	"3 MC1 MC10 0 MC101 MC123 0"

// Rung $tFirstScan#4
// Offset 40
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C ENABLE/DISABLE "
"%3E%3E%3E%3E</FONT><br> <br>Set various enable/bypass "
"registers to test or enable/disable subsections of code.  "
"Not determined yet if from config file, retentive memory, "
"GUI, or other method.  Be sire to reset once done testing "
"and restart the PLC program mode for first scan to take "
"affect."
#END

STR	ST1
COPY	0x1	"4 0x0 0 C33 1 0x0 1 C26 1 0x0 1 C27 1 0x0 1 C28 1 0x0 1 C29 1 0x0 0 C24 1 0x0 0 C45 1 0x0 0 C47 1 0x0 1 C48 1 0x0 1 C38 1 0x0 0 C39 1 0x0 0 C50 1 0x0 1 C51 1 0x0 1 C52 1 0x0 0 C56 1 0x0 1 C34 1 0x0 1 C41 1 0x0 1 C42 1 0x0 1 C43 1 0x0 1 C59 1"

// Rung $tFirstScan#5
// Offset 65
#BEGIN FMT_COMMENT 
"Load or set default values to original hard-coded run-time "
"values.  Future could load configurations from common "
"sources (UI, file, LEDs, etc).  Not determined yet if from "
"config file, retentive memory, GUI, or other method."
#END

STR	ST1
COPY	0x1	"4 0x0 60 F3 1 0x0 10 F1 1 0x0 30 F2 1 0x0 70 F0 1 0x0 1.7 F10 1 0x0 1000 F4 1 0x0 1000 F9 1 0x0 2000 F7 1 0x0 2000 F8 1 0x0 1000 F5 1 0x0 1000 F6 1 0x0 1 F11 1 0x0 1 F12 1 0x0 1 F13 1 0x0 31 F14 1 0x0 3.5 F15 1 0x0 36000 F16 1 0x0 1000 F17 1 0x0 23400 F18 1 0x0 75.0 F19 1 0x0 30.0 F20 1 0x0 60 F21 1"

// Rung $tFirstScan#6
// Offset 118
#BEGIN FMT_COMMENT 
"Set various ranges for errors, warnings, and interlocks.  "
"Not determined yet if from config file, retentive memory, "
"GUI, or other method."
#END

STR	ST1
COPY	0x1	"4 0x0 3 R0 1 0x0 5 R1 1 0x0 29 R2 1 0x0 35 R3 1 0x0 1.5 R4 1 0x0 2 R5 1 0x0 4 R6 1 0x0 5.5 R7 1 0x0 10 R20 1 0x0 14 R21 1 0x0 30 R22 1 0x0 40 R23 1 0x0 20 R24 1 0x0 15 R25 1 0x0 200 R26 1"

// Rung $tFirstScan#7
// Offset 155
#BEGIN FMT_COMMENT 
"Set various timeout values for errors, warnings, and "
"interlocks.  Not determined yet if from config file, "
"retentive memory, GUI, or other method."
#END

STR	ST1
COPY	0x1	"4 0x0 120000 TO0 1 0x0 120000 TO1 1 0x0 120000 TO2 1 0x0 120000 TO3 1 0x0 120000 TO4 1 0x0 300000 TO5 1 0x0 120000 TO6 1"

// Rung $tFirstScan#8
// Offset 181
#BEGIN FMT_COMMENT 
"Set check rules (warnings, interlocks, errors) to be "
"either enabled or disabled for individual testing.  Be sure "
"to reset once done testing and restart the PLC program "
"mode.  First, INIT all B registers to 0 or 1 (depending "
"upon desired affect), then COPY select B registers to 1 to "
"test individual rules.  Several combinations are possible.  "
"Remember to check the CEnableErrors, CEnableInterlocks, and "
"CEnableWarnings registers above too."
#END

STR	ST1
COPY	0x1	"4 0x0 0 B0 1 0x0 0 B1 1 0x0 0 B2 1 0x0 1 B3 1 0x0 1 B4 1 0x0 0 B5 1 0x0 1 B6 1 0x0 1 B7 1 0x0 0 B8 1 0x0 0 B9 1 0x0 0 B10 1 0x0 0 B11 1 0x0 0 B12 1 0x0 0 B13 1 0x0 0 B14 1 0x0 1 B15 1 0x0 1 B16 1 0x0 0 B17 1 0x0 0 B18 1 0x0 1 B19 1 0x0 1 B20 1 0x0 0 B21 1 0x0 1 B22 1 0x0 1 B23 1 0x0 0 B24 1 0x0 0 B25 1 0x0 0 B26 1 0x0 1 B27 1 0x0 1 B28 1 0x0 1 B29 1 0x0 1 B30 1 0x0 1 B31 1 0x0 1 B32 1"

// Rung $tFirstScan#9
// Offset 219
#BEGIN FMT_COMMENT 
"Load original default values into actual default working "
"variables that do not need any manipulation like "
"milliseconds.  If these change downstream or via GUI, "
"alternate approach is needed between working and saving of "
"the new default values.  Not determined yet if from config "
"file, retentive memory, GUI, or other method.<br> <br>"
"Set debounce values..."
#END

STR	ST1
COPY	0x1	"4 0x0 F4 D7 1 0x0 F9 D12 1 0x0 F5 D8 1 0x0 F6 D9 1 0x0 F7 D10 1 0x0 F8 D11 1 0x0 F5 D16 1 0x0 F6 D17 1"

// Rung $tFirstScan#10
// Offset 240
#BEGIN FMT_COMMENT 
"Set scaling parameters for each device.  Different "
"installs/products could have different ranges depending "
"upon product.  Rather than finding the SCALE command, can "
"enter here."
#END

STR	ST1
COPY	0x1	"4 0x0 0 SC0 1 0x0 16383 SC1 1 0x0 0 SC2 1 0x0 R26 SC3 1 0x0 0 SC4 1 0x0 32767 SC5 1 0x0 0 SC6 1 0x0 100 SC7 1 0x0 0 SC8 1 0x0 16383 SC9 1 0x0 -2 SC10 1 0x0 2 SC11 1 0x0 6553 SC12 1 0x0 32767 SC13 1 0x0 -10 SC14 1 0x0 70 SC15 1 0x0 0 SC16 1 0x0 32767 SC17 1 0x0 -40 SC18 1 0x0 85 SC19 1 0x0 6553 SC20 1 0x0 32767 SC21 1 0x0 0 SC22 1 0x0 25 SC23 1 0x0 6553 SC24 1 0x0 32767 SC25 1 0x0 0 SC26 1 0x0 14 SC27 1 0x0 0 SC28 1 0x0 32767 SC29 1 0x0 0 SC30 1 0x0 15 SC31 1 0x0 6553 SC32 1 0x0 32767 SC33 1 0x0 8 SC34 1 0x0 0 SC35 1 0x0 0 SC36 1 0x0 R26 SC37 1 0x0 3276 SC38 1 0x0 29490 SC39 1 0x0 0 SC40 1 0x0 32767 SC41 1 0x0 0 SC42 1 0x0 32767 SC43 1 0x0 0 SC44 1 0x0 32767 SC45 1 0x0 0 SC46 1 0x0 32767 SC47 1"

// Rung $tFirstScan#11
// Offset 341
#BEGIN FMT_COMMENT 
"Scaling for acid pump PID in regards to pH."
#END

STR	ST1
COPY	0x1	"4 0x0 0 SC48 1 0x0 14 SC49 1 0x0 0 SC50 1 0x0 14 SC51 1 0x0 0 SC52 1 0x0 25 SC53 1 0x0 0 SC54 1 0x0 25 SC55 1 0x0 0 SC56 1 0x0 100 SC57 1 0x0 0 SC58 1 0x0 100 SC59 1"

// Rung $tFirstScan#12
// Offset 370
#BEGIN FMT_COMMENT 
"Set the default path and file name for log files using the "
"SysName of the assigned PLC."
#END

STR	ST1
STRCOPY	SysName	SS1	1
STRINSERT	"""data\"""	SS1	0

// Rung $tFirstScan#13
// Offset 379
#BEGIN FMT_COMMENT 
"Set the default tuning parameters for the acid pump PID control."
#END

STR	ST1
AND	C50
PIDINIT	AcidPumpCtlPID	276	295.432	9.208	0

// Rung $tFirstScan#14
// Offset 388
#BEGIN FMT_COMMENT 
"Set the default tuning parameters for the proportional "
"valve PID control."
#END

STR	ST1
AND	C51
PIDINIT	PropValveCtlPID	100	4.5	3.809	0

// Rung $tFirstScan#15
// Offset 397
#BEGIN FMT_COMMENT 
"Set the default tuning parameters for the conductivity PID control."
#END

STR	ST1
AND	C52
PIDINIT	ConductvyCtlPID	100	2.544	11.91	1.985

// Rung $tFirstScan#16
// Offset 407
#BEGIN FMT_COMMENT 
"Set timed variables back to original default if a previous "
"value was not in retentive memory (i.e. was zero value).  "
"Also, convert original saved default values from seconds to "
"milliseconds for those registers that need milliseconds."
#END

STR	ST1
MATH	D6	"ROUND(F3 * 1000)"
MATH	D4	"ROUND(F1 * 1000)"
MATH	D5	"ROUND(F2 * 1000)"

// Rung $tFirstScan#17
// Offset 435
#BEGIN FMT_COMMENT 
"Set remote enable here rather than using software forces.  "
"This is a reserved register for sites requiring an external "
"enable input to start/stop processing.<br>"
"This should be replaced with real IOs in the final version."
#END

STR	ST1
COPY	0x1	"4 0x0 1 C0 1"

// Rung $tFirstScan#18
// Offset 441
STR	ST1
COPY	0x1	"4 0x0 ""First scan complete."" SL0 1"

// End of Code Block $tFirstScan
$TSKEND	$tFirstScan

// Beginning of Code Block $tTopOfScan
$TSK	$tTopOfScan

// Rung $tTopOfScan#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br>"
"<FONT tsize=5>$tTopOfScan</FONT><br><FONT tsize=5></FONT> "
"<br>This is the first ladder task before the main ladder "
"steps for each loop.  By taking any physical inputs and/or "
"Modbus and/or any other device supplying updates and "
"writing them into memory registers for all ladder "
"operations for processing until the bottom of the scan in "
"which all outputs are set."
#END

NOP

// Rung $tTopOfScan#2
// Offset 1
#BEGIN FMT_COMMENT 
"Read in incoming digital bits (X) and debounce signal for "
"stability into working variables (C).<br> "
#END

STR	X2
DEBOUNCE	D13	D14	C9

// Rung $tTopOfScan#3
// Offset 6
STR	X8
DEBOUNCE	D13	D14	C10

// Rung $tTopOfScan#4
// Offset 11
STR	X2
DEBOUNCE	D13	D14	C46

// Rung $tTopOfScan#5
// Offset 16
STR	X3
DEBOUNCE	D13	D14	C62

// Rung $tTopOfScan#6
// Offset 21
STR	X4
DEBOUNCE	D13	D14	C11

// Rung $tTopOfScan#7
// Offset 26
STR	X5
DEBOUNCE	D13	D14	C12

// Rung $tTopOfScan#8
// Offset 31
STR	X6
DEBOUNCE	D13	D14	C13

// Rung $tTopOfScan#9
// Offset 36
STR	X7
DEBOUNCE	D13	D14	C14

// Rung $tTopOfScan#10
// Offset 41
STR	X8
DEBOUNCE	D13	D14	C15

// Rung $tTopOfScan#11
// Offset 46
STR	X9
DEBOUNCE	D13	D14	C25

// Rung $tTopOfScan#12
// Offset 51
STR	X10
ANDN	MC8
ANDN	C57
DEBOUNCE	D15	32768	C35

// Rung $tTopOfScan#13
// Offset 58
STR	X11
DEBOUNCE	D15	32768	C36

// Rung $tTopOfScan#14
// Offset 63
#BEGIN FMT_COMMENT 
"Read all scaled analog inputs (WX) into local memory "
"decimal variables (R).  Use unscaled analog inputs (WX) for "
"original raw values from devices."
#END

STR	ST1
MAPIO	"2 WX23 W0 WX4 W1 WX2 W8 WX21 W3 WX1 W4 WX20 W5 WX3 W6 WX22 W7"

// Rung $tTopOfScan#15
// Offset 83
#BEGIN FMT_COMMENT 
"Convert raw (WX) values into scaled values per each "
"individual device specs."
#END

STR	ST1
SCALE	W0	SC0	SC1	SC2	SC3	R18
SCALE	W1	SC4	SC5	SC6	SC7	R14
SCALE	W3	SC12	SC13	SC14	SC15	R16
SCALE	W4	SC16	SC17	SC18	SC19	R17
SCALE	W5	SC20	SC21	SC22	SC23	R9
SCALE	W6	SC24	SC25	SC26	SC27	R13
SCALE	W7	SC28	SC29	SC30	SC31	R27
SCALE	W8	SC32	SC33	SC34	SC35	R28

// Rung $tTopOfScan#16
// Offset 132
#BEGIN FMT_COMMENT 
"If on a system where galvanostat doesn't return a feedback "
"amperage, set the feedback to the target out amperagee."
#END

STRN	C45
COPY	0x1	"4 0x0 R8 R18 1"

// Rung $tTopOfScan#17
// Offset 139
#BEGIN FMT_COMMENT 
"If flow rate returns negative, set back to zero."
#END

STRLT	R9	0.06
COPY	0x1	"4 0x0 0 R9 1"

// Rung $tTopOfScan#18
// Offset 150
#BEGIN FMT_COMMENT 
"If voltage approaches zero, set to zero."
#END

STRLT	R27	0.06
COPY	0x1	"4 0x0 0 R27 1"

// Rung $tTopOfScan#19
// Offset 161
#BEGIN FMT_COMMENT 
"If amperage approaches zero, set to zero."
#END

STRLT	R18	0.06
COPY	0x1	"4 0x0 0 R18 1"

// Rung $tTopOfScan#20
// Offset 172
#BEGIN FMT_COMMENT 
"Use FILTER command against the incoming voltage reading to "
"slow down the drastic changes, especially during polarity "
"switching."
#END

STR	ST1
FILTER	2	R27	R19

// Rung $tTopOfScan#21
// Offset 176
STR	C45
MATH	R19	"R19 * 10"
MATH	R18	"R18 * 10"

// Rung $tTopOfScan#22
// Offset 193
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C DEMO MODE "
"%3E%3E%3E%3E</FONT><br><FONT tsize=5></FONT> <br>If in "
"DemoMode, overwrite any values from above."
#END

STR	C33
COPY	0x1	"4 0x0 5.55 R18 1 0x0 55.5 R14 1 0x0 2.2 R15 1 0x0 25.5 R16 1 0x0 35.5 R17 1 0x0 4.44 R9 1 0x0 2.2 R13 1 0x0 7.77 R19 1 0x0 4000 R28 1"

// Rung $tTopOfScan#23
// Offset 224
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C WEB PAGES "
"%3E%3E%3E%3E</FONT><br> <br>Refresh web pages from SD card "
"to RAM."
#END

STR	C38
ENTASK	TaskLoadWebPages	0x0	0	0x1

// Rung $tTopOfScan#24
// Offset 229
#BEGIN FMT_COMMENT 
"On leading edge of green button press or leading edge of "
"HMI start state, set local bit.<br>"
"Output the button press to modbus (MC3) so that it can be "
"interpreted by the UI as a command to start."
#END

STRPD	C35
ORPD	MC1
ORPD	C62
COPY	0x1	"4 0x0 1 C1 1 0x0 0 C36 1 0x0 0 MC1 1"

// Rung $tTopOfScan#25
// Offset 242
#BEGIN FMT_COMMENT 
"On leading edge of red button press or trailing edge of "
"HMI entered stop state, set local bit.<br>"
"Output the button press to modbus (MC4) so that it can be "
"interpreted by the UI as a command to stop."
#END

STRPD	C36
ORPD	MC2
ORND	C62
ORE	D0	SM_Halted
COPY	0x1	"4 0x0 0 C1 1 0x0 0 C35 1 0x0 0 MC2 1"

// Rung $tTopOfScan#26
// Offset 260
NOP

// Rung $tTopOfScan#27
// Offset 261
STR	MC8
ENTASK	TaskRoutineTest	0x0	0	0x1

// End of Code Block $tTopOfScan
$TSKEND	$tTopOfScan

// Beginning of Code Block $Main
$PRGRM	$Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br><FONT tsize=5>$Main</FONT><br>"
"<FONT tsize=5></FONT> <br>This is the main ladder loop "
"launched afte the TopOfScan.  The BottomOfScan is launched "
"after this Main loop.  This Main task starts and stops "
"other programs and tasks."
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C ERRORS / WARNINGS / INFO "
"%3E%3E%3E%3E</FONT><br> <br>Start side programs to monitor "
"conditions (errors, warnings and info) that may or may not "
"require a temporary halt of processing.  If the condition "
"returns to normal, processing may proceed, otherwise, local "
"operators may need to resolve the issue and restart.  See "
"the programs for further details."
#END

STR	C28
RUN	ProgInfo

// Rung $Main#3
// Offset 4
STR	C26
RUN	ProgErrors

// Rung $Main#4
// Offset 7
STR	C27
RUN	ProgWarnings

// Rung $Main#5
// Offset 10
STR	C59
RUN	ProgNotices

// Rung $Main#6
// Offset 13
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C GENERATOR "
"%3E%3E%3E%3E</FONT><br> <br>If the system bit is on and "
"there are no errors and there are no interlocks, start the "
"tasks which handle the amperage, ultrasonics, and "
"polarity.  The task should stay active and running as long "
"as these conditions are met.  Also, turn on one of the "
"H-bridge relays."
#END

STRE	D0	SM_Running
ENTASK	TaskGalvanostat	0x0	0	0x1
ENTASK	TaskUltrasonics	0x0	0	0x1
ENTASK	TaskPolarity	0x0	0	0x1

// Rung $Main#7
// Offset 30
#BEGIN FMT_COMMENT 
"<FONT tsize=5></FONT>But, if the system bit is off, or "
"there is an error, or there is an interlock, or the system "
"mode is not correct, turn off the generator task.  Although "
"halting a task should automatically turn off all embedded "
"bits to that task, perform a copy anyway to make sure."
#END

STRNE	D0	SM_Running
HALT	TaskGalvanostat
HALT	TaskUltrasonics
HALT	TaskPolarity
COPY	0x1	"4 0x0 0 C5 1 0x0 0 R8 1 0x0 0 C3 1 0x0 0 C4 1 0x0 0 C30 1 0x0 0 C31 1 0x0 0 C37 1"

// Rung $Main#8
// Offset 50
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C MAIN INLET VALVE "
"%3E%3E%3E%3E</FONT><br> <br>If the system is running, open "
"up the main valve and close when not running."
#END

STRN	MC602
AND	C60
STR	MC602
AND	MC603
ORSTR
COPY	0x1	"4 0x0 1 C16 1"

// Rung $Main#9
// Offset 60
#BEGIN FMT_COMMENT 
" "
#END

STRN	MC8
STRN	MC602
ANDN	C60
STR	MC602
ANDN	MC603
ORSTR
ANDSTR
COPY	0x1	"4 0x0 0 C16 1"

// Rung $Main#10
// Offset 72
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C DRAIN PUMP "
"%3E%3E%3E%3E</FONT><br> <br>If the UI is forcing on/off the "
"drain pump, set elements needed."
#END

STR	MC610
DUPBOOL
AND	MC611
COPY	0x1	"4 0x0 1 C7 1"
POPBOOL
ANDN	MC611
COPY	0x1	"4 0x0 0 C7 1"

// Rung $Main#11
// Offset 87
#BEGIN FMT_COMMENT 
"<FONT tsize=5><FONT tsize=5>%3C%3C%3C%3C ACID PUMP PID "
"%3E%3E%3E%3E</FONT><br> <br></FONT><FONT tsize=3>Start/stop "
"PID task for acid pump controlling ph.</FONT>"
#END

STR	C60
AND	C50
ENTASK	TaskAcidPumpPID	0x0	0	0x1
COPY	0x1	"4 0x0 1 C6 1"

// Rung $Main#12
// Offset 98
#BEGIN FMT_COMMENT 
" "
#END

STRN	C60
HALT	TaskAcidPumpPID
COPY	0x1	"4 0x0 0 R10 1 0x0 0 C6 1"

// Rung $Main#13
// Offset 107
#BEGIN FMT_COMMENT 
"<FONT tsize=5><FONT tsize=5><FONT tsize=5><FONT "
"tsize=5>%3C%3C%3C%3C PROPORTIONAL VALVE PID "
"%3E%3E%3E%3E</FONT><br> <br></FONT><FONT tsize=3>Start/stop "
"PID task for proportional valve controlling flow "
"rate.</FONT></FONT><br></FONT>"
#END

STRN	MC602
AND	C60
AND	C51
STR	MC602
AND	MC603
ORSTR
ENTASK	TaskPropValvePID	0x0	0	0x1
COPY	0x1	"4 0x0 1 C49 1"

// Rung $Main#14
// Offset 122
STRN	MC8
DUPBOOL
ANDN	MC602
ANDN	C60
HALT	TaskPropValvePID
POPBOOL
AND	MC602
ANDN	MC603
COPY	0x1	"4 0x0 0 C49 1"

// Rung $Main#15
// Offset 135
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C SYSTEM MODE "
"%3E%3E%3E%3E</FONT><br> <br>Upon each and every loop, "
"regardelss if system is on or off, determine the current "
"status of the system (i.e. Ready, Running, Alarm, etc) and "
"set registers accordingly for further use.  This isn't "
"defined as a task or program, which may run in different "
"scans, but instead as a subroutine, which will run as part "
"of the current scan, every time, right now.<br> <br>"
"Hierarchy of Status:<br> <br>"
"1)  If the system determines no errors and there are no "
"interlocks:<br>RUNNING, PROCESSING, GENERATING, ON, "
"NORMAL<br> <br>2)  If the system determines an interruption "
"event:<br>PAUSED, WAITING, PENDING, INTERLOCKED, STARTUP<br>"
" <br>3)  If the system determines an error event:<br>"
"ALARM, ERROR, STOPPED, HALTED, ALERT, OFF<br> <br>"
"4)  Else<br>READY, IDLE, STANDBY, OFF, OPERATOR, "
"MAINTENANCE, MANUAL"
#END

STR	ST1
RUN	ProgStateMachine

// Rung $Main#16
// Offset 138
#BEGIN FMT_COMMENT 
"<FONT tsize=5><FONT tsize=5>%3C%3C%3C%3C CONDUCTIVITY PID "
"%3E%3E%3E%3E</FONT><br> <br></FONT><FONT tsize=3>Start/stop "
"PID task for acid pump controlling conductivity.</FONT>"
#END

STR	C60
AND	C52
ENTASK	TaskConductvyPID	0x0	0	0x1
COPY	0x1	"4 0x0 1 C6 1"

// Rung $Main#17
// Offset 149
STRN	C60
HALT	TaskConductvyPID
COPY	0x1	"4 0x0 0 R10 1 0x0 0 C6 1"

// Rung $Main#18
// Offset 158
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C FILE LOG %3E%3E%3E%3E</FONT><br>"
" <br>If the system is running, log data entry at "
"pre-determined time."
#END

STR	ST1
FILELOG	@SDCardFS	SS1	0x22	SS0	"2 D0 4 C0 3 R8 2 R13 1 R16 2 R19 1 TT0 4"	"TimeStamp() "","" D0 "","" D1 "","" D2 "","" D3 "","" C0 "","" C1 "","" C2 "","" R8 "","" R9 "","" R13 "","" R16 "","" R17 "","" R19 "","" TT0 "","" TT1 "","" TT2 "","" TT3 ""$0D$0A"""	0x0	C19	C20

// Rung $Main#19
// Offset 319
STR	ST1
ENTASK	TaskUpdPlatePerc	0x0	0	0x1

// Rung $Main#20
// Offset 324
STR	ST1
ENTASK	TaskResetPlates	0x0	0	0x1

// Rung $Main#21
// Offset 329
STR	C61
RUN	ProgDraining

// End of Code Block $Main
$PGMEND	$Main

// Beginning of Code Block TaskGalvanostat
$TSK	TaskGalvanostat

// Rung TaskGalvanostat#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br> <br>"
"<FONT tsize=5>TaskGalvanostat</FONT><br><FONT "
"tsize=5></FONT> <br>"
"<FONT tsize=3>This independent task is started and stopped "
"via the Main control loop ladder.  The generator supporting "
"devices are started and stopped here.  The generator flow "
"cell has the galvanostat, ultrasonics, and polarity "
"switching.  To disable a specific device, its values could "
"be preconfigured as zero.</FONT>"
#END

NOP

// Rung TaskGalvanostat#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=3></FONT> "
#END

STRGT	F0	0
DUPBOOL
AND	C32
COPY	0x1	"4 0x0 0 C5 1 0x0 F0 R8 1"
POPBOOL
ANDN	C32
COPY	0x1	"4 0x0 1 C5 1 0x0 F0 R8 1"

// Rung TaskGalvanostat#3
// Offset 23
#BEGIN FMT_COMMENT 
"If the target amperage is equal or below zero, make sure "
"the galvanostat is off/disabled and amperage is zero.<br> "
#END

STRLE	F0	0
COPY	0x1	"4 0x0 0 C5 1 0x0 0 R8 1"

// End of Code Block TaskGalvanostat
$TSKEND	TaskGalvanostat

// Beginning of Code Block ProgInfo
$PRGRM	ProgInfo

// Rung ProgInfo#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br><FONT tsize=5>ProgInfo</FONT><br>"
"<FONT tsize=5></FONT> <br>This separate independent program "
"loops thru conditions looking for those that may need to be "
"reported, but not necessary halt or pause the system.  The "
"reverse condition may also be checked waiting and hoping "
"the warning eventually clears, thus allowing the process to "
"continue in the long term.  Or, the warnings may be reset "
"at first and reprocessed over and over.  The warnings "
"aren't read in order, but final assignment is ordered from "
"those that are least important to most important so that "
"all conditions can be checked, but leaving the routine with "
"the most important code recorded."
#END

NOP

// Rung ProgInfo#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Low Web Pages %3E%3E%3E%3E</FONT>"
#END

STR	ST1
AND	C38
AND	B26
DUPBOOL
ANDN	SE0
AND	SE2
AND	SE4
DEBOUNCE	D8	D9	A26
POPBOOL
AND	SE0
STRN	SE2
ORN	SE4
ANDSTR
DEBOUNCE	D8	D9	A26

// Rung ProgInfo#3
// Offset 21
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Acid Tank Low "
"%3E%3E%3E%3E</FONT><br> "
#END

STR	ST1
AND	C9
AND	B8
DEBOUNCE	D8	D9	A8

// Rung ProgInfo#4
// Offset 28
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Voltage Increasing %3E%3E%3E%3E</FONT>"
#END

STR	ST1
ANDGE	R19	R20
AND	B10
DEBOUNCE	D8	D9	A10

// Rung ProgInfo#5
// Offset 38
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Temperature Increasing %3E%3E%3E%3E</FONT>"
#END

STR	ST1
ANDGE	R17	R22
AND	B21
DEBOUNCE	D8	D9	A21

// Rung ProgInfo#6
// Offset 48
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Outer Plates Low %25 %3E%3E%3E</FONT>"
#END

STRLE	TT9	R24
AND	B15
DEBOUNCE	D8	D9	A15

// Rung ProgInfo#7
// Offset 57
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Outer Plates Low %25 %3E%3E%3E</FONT>"
#END

STRLE	TT11	R24
AND	B30
DEBOUNCE	D8	D9	A30

// Rung ProgInfo#8
// Offset 66
NOP

// Rung ProgInfo#9
// Offset 67
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Set Warning Codes ON/OFF "
"%3E%3E%3E%3E</FONT> "
#END

STR	C2
DUPBOOL
AND	A26
AND	B26
COPY	0x1	"4 0x0 A_LoadWebPages D3 1 0x0 1 C23 1"
POPBOOL
DUPBOOL
AND	A8
AND	B8
COPY	0x1	"4 0x0 A_AcidTankLow D3 1 0x0 1 C23 1"
POPBOOL
DUPBOOL
AND	A10
AND	B10
COPY	0x1	"4 0x0 A_VoltInfo D3 1 0x0 1 C23 1"
POPBOOL
DUPBOOL
AND	A21
AND	B21
COPY	0x1	"4 0x0 A_TempInfo D3 1 0x0 1 C23 1"
POPBOOL
DUPBOOL
AND	A30
AND	B15
COPY	0x1	"4 0x0 A_InPlatesInfo D3 1 0x0 1 C23 1"
POPBOOL
DUPBOOL
AND	A15
AND	B30
COPY	0x1	"4 0x0 A_OutPlatesInfo D3 1 0x0 1 C23 1"
POPBOOL
ANDN	A8
ANDN	A10
ANDN	A21
ANDN	A15
ANDN	A30
COPY	0x1	"4 0x0 A_NoAlarm D3 1 0x0 0 C23 1"

// End of Code Block ProgInfo
$PGMEND	ProgInfo

// Beginning of Code Block ProgErrors
$PRGRM	ProgErrors

// Rung ProgErrors#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br>"
"<FONT tsize=5>ProgErrors</FONT><br><FONT tsize=5></FONT> "
"<br>This separate independent program loops thru conditions "
"looking for those that may halt the entire system.  The "
"reverse condition may not be checked, but cleared by "
"operators and restarted manually.  The errors are read in "
"any order, but ordered from those that are least important "
"to most important so that all conditions can be checked, "
"but leaving the routine with the most important recorded "
"code."
#END

NOP

// Rung ProgErrors#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Acid Tank Empty "
"%3E%3E%3E%3E</FONT><br> "
#END

STR	C25
AND	B9
DEBOUNCE	D7	32768	A9

// Rung ProgErrors#3
// Offset 7
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Reagent Tank Overflow "
"%3E%3E%3E%3E</FONT><br> "
#END

STR	C14
AND	B12
DEBOUNCE	D7	32768	A12

// Rung ProgErrors#4
// Offset 13
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Voltage Too High "
"%3E%3E%3E%3E</FONT><br> "
#END

STRGE	R19	R21
AND	B11
DEBOUNCE	D7	32768	A11

// Rung ProgErrors#5
// Offset 22
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Temperature Too High %3E%3E%3E%3E</FONT>"
#END

STRGE	R17	R23
AND	B5
DEBOUNCE	D7	32768	A5

// Rung ProgErrors#6
// Offset 31
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Startup Timeout %3E%3E%3E</FONT>"
#END

STR	T17.Done
AND	B32
DEBOUNCE	D7	10000	A32

// Rung ProgErrors#7
// Offset 37
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C TIMEOUTS %3E%3E%3E%3E</FONT><br> "
#END

STR	A3
AND	B19
ONDTMR	T7	TO0	A19

// Rung ProgErrors#8
// Offset 42
#BEGIN FMT_COMMENT 
" "
#END

STR	A4
AND	B20
ONDTMR	T8	TO1	A20

// Rung ProgErrors#9
// Offset 47
STR	A6
AND	B22
ONDTMR	T9	TO3	A22

// Rung ProgErrors#10
// Offset 52
STR	A7
AND	B23
ONDTMR	T15	TO2	A23

// Rung ProgErrors#11
// Offset 57
STR	A1
AND	B17
ONDTMR	T10	TO4	A17

// Rung ProgErrors#12
// Offset 62
STR	A2
AND	B18
ONDTMR	T11	TO5	A18

// Rung ProgErrors#13
// Offset 67
STR	A16
AND	B16
ONDTMR	T12	TO6	A16

// Rung ProgErrors#14
// Offset 72
NOP

// Rung ProgErrors#15
// Offset 73
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Set Error Codes On/Off "
"%3E%3E%3E%3E</FONT><br><FONT tsize=5></FONT> "
#END

STR	ST1
DUPBOOL
AND	A12
AND	B12
COPY	0x1	"4 0x0 A_ReagntOverFlow D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A9
AND	B9
COPY	0x1	"4 0x0 A_AcidTankEmpty D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A11
AND	B11
COPY	0x1	"4 0x0 A_VoltAlarm D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A5
AND	B5
COPY	0x1	"4 0x0 A_TempAlarm D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A19
AND	B19
COPY	0x1	"4 0x0 A_CondRangeTO D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A20
AND	B20
COPY	0x1	"4 0x0 A_FlowRangeTO D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A22
AND	B22
COPY	0x1	"4 0x0 A_GenNotFullTO D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A17
AND	B17
COPY	0x1	"4 0x0 A_ORPRangeTO D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A18
AND	B18
COPY	0x1	"4 0x0 A_pHRangeTO D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A16
AND	B16
COPY	0x1	"4 0x0 A_OutPlatesAlarm D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A23
AND	B23
COPY	0x1	"4 0x0 A_GenEmptyTO D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A32
AND	B32
COPY	0x1	"4 0x0 A_StartupTimeout D2 1 0x0 1 C21 1"
POPBOOL
ANDN	A12
ANDN	A9
ANDN	A11
ANDN	A5
ANDN	A19
ANDN	A20
ANDN	A22
ANDN	A17
ANDN	A18
ANDN	A16
ANDN	A23
ANDN	A32
COPY	0x1	"4 0x0 A_NoAlarm D2 1 0x0 0 C21 1"

// End of Code Block ProgErrors
$PGMEND	ProgErrors

// Beginning of Code Block TaskUltrasonics
$TSK	TaskUltrasonics

// Rung TaskUltrasonics#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br> <br>"
"<FONT tsize=5>TaskUltrasonics</FONT><br><FONT "
"tsize=5></FONT> <br>"
"<FONT tsize=3>This independent task is started and stopped "
"via the Main control loop ladder.  The generator supporting "
"devices are started and stopped here.  The generator flow "
"cell has the galvanostat, ultrasonics, and polarity "
"switching.  To disable a specific device, its values could "
"be preconfigured as zero.</FONT>"
#END

NOP

// Rung TaskUltrasonics#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C ULTRASONICS - INDEPENDENT "
"%3E%3E%3E%3E</FONT><br> <br>If values are above zero, and "
"NOT syncing to polarity, start the interval timer, turn on "
"ultrasonics, then start another timer for duration.  Once "
"all complete, reset and start over.<br> "
#END

STRGT	D5	0
ANDGT	D4	0
ANDN	C24
TMRDOWN	T1	D5

// Rung TaskUltrasonics#3
// Offset 12
STRGT	D5	0
ANDGT	D4	0
ANDN	C24
AND	T1.Done
COPY	0x1	"4 0x0 1 C3 1"
TMRDOWN	T2	D4

// Rung TaskUltrasonics#4
// Offset 29
STRGT	D5	0
ANDGT	D4	0
ANDN	C24
AND	T1.Done
AND	T2.Done
COPY	0x1	"4 0x0 0 C3 1"
RSTT	T1

// Rung TaskUltrasonics#5
// Offset 46
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C ULTRASONICS - SYNCRONIZED "
"%3E%3E%3E%3E</FONT><br> <br>If values are above zero, and "
"syncing to polarity, set values as soon as the polarity "
"switched.  Once that is detected, turn on ultrasonics, "
"start a timer, then reset for next polarity event.<br> "
#END

STRGT	D4	0
AND	C24
ANDPD	C32
COPY	0x1	"4 0x0 1 C37 1 0x0 1 C3 1"

// Rung TaskUltrasonics#6
// Offset 59
STRGT	D4	0
AND	C24
AND	C37
TMRDOWN	T6	D4
AND	T6.Done
COPY	0x1	"4 0x0 0 C37 1 0x0 0 C3 1"

// End of Code Block TaskUltrasonics
$TSKEND	TaskUltrasonics

// Beginning of Code Block TaskPolarity
$TSK	TaskPolarity

// Rung TaskPolarity#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br> <br>"
"<FONT tsize=5>TaskPolarity</FONT><br><FONT tsize=5></FONT> "
"<br><FONT tsize=3>This independent task is started and "
"stopped via the Main control loop ladder.  The generator "
"supporting devices are started and stopped here.  The "
"generator flow cell has the galvanostat, ultrasonics, and "
"polarity switching.  To disable a specific device, its "
"values could be preconfigured as zero.</FONT>"
#END

NOP

// Rung TaskPolarity#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C SINGLE RELAY POLARITY "
"%3E%3E%3E%3E</FONT><br> <br>If polarity duration is above "
"zero (zero is disabled), start polarity duration timer.  If "
"duration is above zero, and when timer finishes, toggle the "
"output bit for polarity reversing of the galvanostat "
"relays.  Also, set variable for setting the beginning of "
"the polarity switching.  This will alert the galvanostat "
"task.  This is for single relay systems."
#END

STRGT	D6	0
ANDN	C32
ANDN	T0.Done
TMR	T0	D6

// Rung TaskPolarity#3
// Offset 9
STRGT	D6	0
ANDN	C32
AND	T0.Done
PONOFF	C4	ST1023
COPY	0x1	"4 0x0 1 C32 1"

// Rung TaskPolarity#4
// Offset 22
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C H-BRIDGE RELAY POLARITY "
"%3E%3E%3E%3E</FONT><br> <br>For H-Bridge relay sets, once "
"main duration timer completes above, turn off galvanostat "
"for a lower power switching of relay coils.  The "
"galvanostat is turned off in its task when the bit "
"CPolaritySwitch is enabled.<br> <br>"
"If not switching, turn on appropriate relays depending upon "
"the polarity value.  This is really only needed on startup "
"as the logic below will handle the actual switch.  However, "
"on first cycle, this rung sets the first relay bank."
#END

STRGT	D6	0
ANDN	C32
DUPBOOL
AND	C4
COPY	0x1	"4 0x0 1 C30 1 0x0 0 C31 1"
POPBOOL
ANDN	C4
COPY	0x1	"4 0x0 0 C30 1 0x0 1 C31 1"

// Rung TaskPolarity#5
// Offset 43
#BEGIN FMT_COMMENT 
" If switching, give time for galvanostat(s) to turn "
"off.<br> "
#END

STRGT	D6	0
AND	C32
TMRDOWN	T3	250

// Rung TaskPolarity#6
// Offset 50
#BEGIN FMT_COMMENT 
"Once timer finishes, turn off relay banks and start "
"another timer to allow time for that to complete.<br> "
#END

STRGT	D6	0
AND	C32
AND	T3.Done
TMRDOWN	T4	250
COPY	0x1	"4 0x0 0 C30 1 0x0 0 C31 1"

// Rung TaskPolarity#7
// Offset 64
#BEGIN FMT_COMMENT 
"Once that timer completes for relays to turn off, switch "
"relays and start another timer for that to complete.<br> "
#END

STRGT	D6	0
AND	C32
AND	T3.Done
AND	T4.Done
DUPBOOL
AND	ST1
TMRDOWN	T5	250
POPBOOL
DUPBOOL
AND	C4
COPY	0x1	"4 0x0 1 C30 1"
POPBOOL
ANDN	C4
COPY	0x1	"4 0x0 1 C31 1"

// Rung TaskPolarity#8
// Offset 90
#BEGIN FMT_COMMENT 
"Once all timers complete, reset the switching variable.  "
"This will tell the galvanostat to turn back on too.<br> "
#END

STRGT	D6	0
AND	C32
AND	T3.Done
AND	T4.Done
AND	T5.Done
COPY	0x1	"4 0x0 0 C32 1"

// End of Code Block TaskPolarity
$TSKEND	TaskPolarity

// Beginning of Code Block ProgDosingPump
$PRGRM	ProgDosingPump

// Rung ProgDosingPump#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><FONT "
"tsize=5></FONT> <br> <br>"
"<FONT tsize=5>ProgDosingPump</FONT><br><FONT "
"tsize=5></FONT> <br>pending"
#END

NOP

// End of Code Block ProgDosingPump
$PGMEND	ProgDosingPump

// Beginning of Code Block ProgWarnings
$PRGRM	ProgWarnings

// Rung ProgWarnings#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br>"
"<FONT tsize=5>ProgWarnings</FONT><FONT tsize=5></FONT><br>"
"This separate independent program loops thru conditions "
"looking for those that may pause other parts of the "
"system.  The reverse condition may also be checked waiting "
"and hoping the condition eventually clears, thus allowing "
"generation to continue.  Or, the interlock variables may be "
"reset assuming interlocks are clear, then reprocess.  The "
"interlocks are not read in particular order, however the "
"final order is from least important to most important so "
"that all conditions can be checked, but leaving the routine "
"with the most important recorded with a final code."
#END

NOP

// Rung ProgWarnings#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Flow In Rate %3E%3E%3E%3E</FONT>"
#END

STR	C60
ORE	D0	SM_Halted
STRLT	R9	R0
ORGT	R9	R1
ANDSTR
AND	B4
DEBOUNCE	D10	D11	A4

// Rung ProgWarnings#3
// Offset 21
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Generator Cell Level "
"%3E%3E%3E%3E</FONT><br>"
#END

STR	C60
ORE	D0	SM_Halted
ANDN	C46
AND	B6
DEBOUNCE	D10	D11	A6

// Rung ProgWarnings#4
// Offset 33
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Generator Cell Level "
"%3E%3E%3E%3E</FONT><br>"
#END

STR	C60
ORE	D0	SM_Halted
ANDN	C10
AND	B7
DEBOUNCE	D10	D11	A7

// Rung ProgWarnings#5
// Offset 45
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Conductivity "
"%3E%3E%3E%3E</FONT><br>"
#END

STR	C60
ORE	D0	SM_Halted
STRLT	R14	R2
ORGT	R14	R3
ANDSTR
AND	B3
DEBOUNCE	D10	D11	A3

// Rung ProgWarnings#6
// Offset 65
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C pH %3E%3E%3E%3E</FONT>"
#END

STR	C60
ORE	D0	SM_Halted
STRLT	R13	R4
ORGT	R13	R5
ANDSTR
AND	B2
DEBOUNCE	D10	D11	A2

// Rung ProgWarnings#7
// Offset 85
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C ORP %3E%3E%3E%3E</FONT><br>"
#END

STR	C60
ORE	D0	SM_Halted
STRLT	R15	R6
ORGT	R15	R7
ANDSTR
AND	B1
DEBOUNCE	D10	D11	A1

// Rung ProgWarnings#8
// Offset 105
#BEGIN FMT_COMMENT 
" <FONT tsize=5>%3C%3C%3C%3C Set Interlock Codes ON/OFF "
"%3E%3E%3E%3E</FONT> <br> "
#END

STR	C60
ORE	D0	SM_Halted
DUPBOOL
AND	A1
AND	B1
COPY	0x1	"4 0x0 A_ORPRange D1 1 0x0 1 C22 1"
POPBOOL
DUPBOOL
AND	A2
AND	B2
COPY	0x1	"4 0x0 A_pHRange D1 1 0x0 1 C22 1"
POPBOOL
DUPBOOL
AND	A3
AND	B3
COPY	0x1	"4 0x0 A_CondRange D1 1 0x0 1 C22 1"
POPBOOL
DUPBOOL
AND	A6
AND	B6
COPY	0x1	"4 0x0 A_GenNotFull D1 1 0x0 1 C22 1"
POPBOOL
DUPBOOL
AND	A4
AND	B4
COPY	0x1	"4 0x0 A_FlowRange D1 1 0x0 1 C22 1"
POPBOOL
DUPBOOL
AND	A7
AND	B7
COPY	0x1	"4 0x0 A_GenEmpty D1 1 0x0 1 C22 1"
POPBOOL
ANDN	A1
ANDN	A2
ANDN	A3
ANDN	A6
ANDN	A4
ANDN	A7
COPY	0x1	"4 0x0 A_NoAlarm D1 1 0x0 0 C22 1"

// End of Code Block ProgWarnings
$PGMEND	ProgWarnings

// Beginning of Code Block $t1Second
$TSK	$t1Second

// Rung $t1Second#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br><FONT tsize=5>$t1Second</FONT><br>"
"<FONT tsize=5></FONT> <br>This ladder task runs every "
"second after it completes.  In other words, it doesn't run "
"exactly every second, but exactly one second each time "
"after it finishes, regardless of how short or long it "
"executes.  This should be enough accuracy for total "
"calculations."
#END

NOP

// Rung $t1Second#2
// Offset 1
#BEGIN FMT_COMMENT 
"Calculate Ah and KWh and Asec"
#END

STR	ST1
AND	C2
AND	C5
MATH	TT1	"TT1 + (((R18 * R19) / 3600) / 1000)"
MATH	TT0	"TT0 + (R18 / 3600)"
MATH	TT4	"TT4 + R18"
MATH	TT5	"TT5 + (1 / 3600)"
MATH	TT6	"TT6 + 1"

// Rung $t1Second#3
// Offset 54
#BEGIN FMT_COMMENT 
"Calculate flow volume"
#END

STR	ST1
AND	C2
MATH	TT3	"TT3 + (R9 / 60)"

// Rung $t1Second#4
// Offset 66
#BEGIN FMT_COMMENT 
"Calculate the current tank level and percentage available."
#END

STR	ST1
MATH	R30	"(F11 - R28) * F12"
MATH	TT7	"(R30 / F13) * 100"

// End of Code Block $t1Second
$TSKEND	$t1Second

// Beginning of Code Block TaskAcidPumpPID
$TSK	TaskAcidPumpPID

// Rung TaskAcidPumpPID#1
// Offset 0
STR	ST1
STR	ST2
STR	ST2
RAMPSOAK	RS_0	AcidPumpCtlPID.SP	1	"4 1 F10 0 0"

// Rung TaskAcidPumpPID#2
// Offset 10
STR	ST1
FILTER	1	R13	R29

// Rung TaskAcidPumpPID#3
// Offset 14
STR	ST1
PID	AcidPumpCtlPID	0x62	R29	SC48	SC49	SC50	SC51	""""""	6553	32767	R10	DST511

// End of Code Block TaskAcidPumpPID
$TSKEND	TaskAcidPumpPID

// Beginning of Code Block TaskLoadWebPages
$TSK	TaskLoadWebPages

// Rung TaskLoadWebPages#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>Aqua Metrology Systems SafeGuard "
"H2O</FONT><br> <br><FONT tsize=5>TaskLoadWebPages</FONT><br>"
"<FONT tsize=5></FONT> <br><FONT tsize=3>When the PLC "
"restarts, the RAM file system gets cleared out, which holds "
"the user pages for the web server.  Upon startup, during "
"the top scan, and using a status holding bit, this task is "
"enabled.  By recreating the subdirectory and copying the "
"files from the SD file system back to the RAM file "
"system.</FONT>"
#END

NOP

// Rung TaskLoadWebPages#2
// Offset 1
STR	C38
FILENEWFLDR	@RamFS	"""up"""	0x0	SE0	SE1
TMRDOWN	T13	1000

// Rung TaskLoadWebPages#3
// Offset 12
STR	C38
AND	T13.Done
FILECOPY	@SDCardFS	"""\up\SGH2O_PLC.html"""	@RamFS	"""\up\SGH2O_PLC.html"""	0x0	0x0	SE2	SE3
AND	SE2
FILECOPY	@SDCardFS	"""\up\jquery.min.js"""	@RamFS	"""\up\jquery.min.js"""	0x0	0x0	SE4	SE5
AND	SE4
COPY	0x1	"4 0x0 0 C38 1"

// End of Code Block TaskLoadWebPages
$TSKEND	TaskLoadWebPages

// Beginning of Code Block TaskPropValvePID
$TSK	TaskPropValvePID

// Rung TaskPropValvePID#1
// Offset 0
STR	ST1
STR	ST2
STR	ST2
RAMPSOAK	RS_1	PropValveCtlPID.SP	1	"4 1 F15 0 0"

// Rung TaskPropValvePID#2
// Offset 10
STR	ST1
FILTER	1	R9	R32

// Rung TaskPropValvePID#3
// Offset 14
STR	ST1
PID	PropValveCtlPID	0x60	R32	SC52	SC53	SC54	SC55	""""""	6553	32767	R31	DST511

// End of Code Block TaskPropValvePID
$TSKEND	TaskPropValvePID

// Beginning of Code Block TaskConductvyPID
$TSK	TaskConductvyPID

// Rung TaskConductvyPID#1
// Offset 0
STR	ST1
STR	ST2
STR	ST2
RAMPSOAK	RS_2	ConductvyCtlPID.SP	1	"4 1 F14 0 0"

// Rung TaskConductvyPID#2
// Offset 10
STR	ST1
FILTER	1	R14	R33

// Rung TaskConductvyPID#3
// Offset 14
STR	ST1
PID	ConductvyCtlPID	0x60	R33	SC56	SC57	SC58	SC59	""""""	6553	32767	R10	DST511

// End of Code Block TaskConductvyPID
$TSKEND	TaskConductvyPID

// Beginning of Code Block TaskRoutineTest
$TSK	TaskRoutineTest

// Rung TaskRoutineTest#1
// Offset 0
STRPD	MC401
COPY	0x1	"4 0x0 1 MC402 1 0x0 MHR201 R37 1 0x0 0 MC404 1"

// Rung TaskRoutineTest#2
// Offset 10
STRN	MC403
ANDN	MC404
DUPBOOL
ANDE	R37	4
RUN	ProgRinsing
POPBOOL
ANDE	R37	1
RUN	ProgDraining

// Rung TaskRoutineTest#3
// Offset 26
STR	MC403
ANDN	MC404
DUPBOOL
ANDE	R37	4
RUN	ProgAbortRinsing
POPBOOL
ANDE	R37	1
RUN	ProgAbortDrain

// Rung TaskRoutineTest#4
// Offset 42
#BEGIN FMT_COMMENT 
"<B><I>Handshake Step 4 (Optional)</I>*</B><br>"
"<I>The GUI may send a request to stop the current routine. "
"This action is immediate but optional.</I><br>"
"<!-- notionvc: 8f5b29c4-3e89-4d80-9e0b-ba815f8c4503 "
"--><B></B><br><B>Handshake Step 5</B><br>"
"<I>The PLC sends the End signal. This action is immediate "
"for the PLC. The GUI waits for the PLC to signal the end of "
"the routine, either automatically or upon receiving an "
"abort request. This action requires waiting.</I>"
#END

STR	MC403
ANDN	MC405
COPY	0x1	"4 0x0 1 MC404 1"

// Rung TaskRoutineTest#5
// Offset 49
#BEGIN FMT_COMMENT 
"<B>Handshake Step 6</B><br>"
"<I>The GUI acknowledges the end of the routine. This action "
"is immediate. The PLC reads the acknowledgement via EndACK "
"and sets EndCMD to 0.</I>"
#END

STR	MC404
AND	MC405
COPY	0x1	"4 0x0 0 MC404 1"

// Rung TaskRoutineTest#6
// Offset 56
#BEGIN FMT_COMMENT 
"<B>Step 7</B><br>"
"<I>The GUI sees that the PLC sets EndCMD to 0 and sets "
"EndAck to 0. The PLC waits for the GUI to set StartCMD to 0 "
"and then sets StartACK to 0.</I>"
#END

STRN	MC401
COPY	0x1	"4 0x0 0 MC402 1"

// End of Code Block TaskRoutineTest
$TSKEND	TaskRoutineTest

// Beginning of Code Block TaskUpdPlatePerc
$TSK	TaskUpdPlatePerc

// Rung TaskUpdPlatePerc#1
// Offset 0
#BEGIN FMT_COMMENT 
"Consumption ratio per second"
#END

STRPD	ST4
MATH	R38	"(1.78 * F0) / 3600.0"

// Rung TaskUpdPlatePerc#2
// Offset 14
#BEGIN FMT_COMMENT 
"Total mass consumed of outter plates"
#END

STRPD	ST4
ANDE	SM_Running	D0
MATH	TT8	"MIN(TT8 + R38, F18)"

// Rung TaskUpdPlatePerc#3
// Offset 31
#BEGIN FMT_COMMENT 
"Outter plates %25 left"
#END

STRPD	ST4
MATH	TT9	"(100 * (F18 - TT8)) / F18"

// Rung TaskUpdPlatePerc#4
// Offset 45
#BEGIN FMT_COMMENT 
"Total mass consumed of inner plates. Consumption ratio is "
"2 times as large"
#END

STRPD	ST4
ANDE	SM_Running	D0
MATH	TT10	"MIN(TT10 + (2 * R38), F18)"

// Rung TaskUpdPlatePerc#5
// Offset 64
#BEGIN FMT_COMMENT 
"Inner plates %25 left"
#END

STRPD	ST4
MATH	TT11	"(100 * (F18 - TT10)) / F18"

// End of Code Block TaskUpdPlatePerc
$TSKEND	TaskUpdPlatePerc

// Beginning of Code Block ProgNotices
$PRGRM	ProgNotices

// Rung ProgNotices#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Reagent Tank Full Condition %3E%3E%3E%3E</FONT>"
#END

STRE	D0	SM_Running
ORE	D0	SM_Idle
ANDGE	TT7	F19
AND	B27
DEBOUNCE	D16	10000	A27

// Rung ProgNotices#2
// Offset 19
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Reagent Tank Empty Condition %3E%3E%3E</FONT>"
#END

STRE	D0	SM_Standby
ANDLE	TT7	F20
AND	B28
DEBOUNCE	D16	10000	A28

// Rung ProgNotices#3
// Offset 33
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Reagent Tank Restart Hysteresis "
"Condition %3E%3E%3E</FONT>"
#END

STRE	D0	SM_Starting
ANDGE	TT7	F21
AND	B29
DEBOUNCE	D16	10000	A29

// Rung ProgNotices#4
// Offset 47
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Inner Plates Fully Depleted %3E%3E</FONT>"
#END

STRLE	TT11	0.05
DEBOUNCE	D16	10000	A31

// Rung ProgNotices#5
// Offset 56
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Outer Plates Fully Depleted %3E%3E%3E</FONT>"
#END

STRLE	TT9	0.05
DEBOUNCE	D16	10000	A16

// Rung ProgNotices#6
// Offset 65
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Set Alarm Code And Alarm Active "
"Bit %3E%3E</FONT>"
#END

STRE	D0	SM_Running
ORE	D0	SM_Idle
AND	A27
AND	B27
COPY	0x1	"4 0x0 N_ReagTankFull D18 1 0x0 1 C58 1"

// Rung ProgNotices#7
// Offset 85
STRE	D0	SM_Standby
AND	A28
AND	B28
COPY	0x1	"4 0x0 N_ReagTankEmpty D18 1 0x0 1 C58 1"

// Rung ProgNotices#8
// Offset 100
STRE	D0	SM_Starting
AND	A29
AND	B29
COPY	0x1	"4 0x0 N_ReagTankOverHy D18 1 0x0 1 C58 1"

// Rung ProgNotices#9
// Offset 115
STRE	D0	SM_Running
AND	A31
AND	B31
COPY	0x1	"4 0x0 N_InPlates D18 1 0x0 1 C58 1"

// Rung ProgNotices#10
// Offset 130
STRE	D0	SM_Running
AND	A16
AND	B15
COPY	0x1	"4 0x0 N_OutPlates D18 1 0x0 1 C58 1"

// Rung ProgNotices#11
// Offset 145
#BEGIN FMT_COMMENT 
"<FONT tsize=4>%3C%3C Deactivate Notice Codes %3E%3E</FONT>"
#END

STRN	A27
ANDN	A28
ANDN	A29
ANDN	A16
ANDN	A31
COPY	0x1	"4 0x0 A_NoAlarm D18 1 0x0 0 C58 1"

// End of Code Block ProgNotices
$PGMEND	ProgNotices

// Beginning of Code Block ProgStateMachine
$PRGRM	ProgStateMachine

// Rung ProgStateMachine#1
// Offset 0
#BEGIN FMT_COMMENT 
"System is On if it is remotely enabled and locally enabled"
#END

STR	C0
AND	C1
ANDN	MC8
OUT	C2

// Rung ProgStateMachine#2
// Offset 4
STRE	D0	SM_Stopped
AND	C2
COPY	0x1	"4 0x0 SM_Starting D0 1"

// Rung ProgStateMachine#3
// Offset 17
STRE	D0	SM_Starting
DUPBOOL
AND	ST1
TMRDOWN	T17	180000
POPBOOL
DUPBOOL
ANDE	D2	A_StartupTimeout
COPY	0x1	"4 0x0 SM_Halted D0 1"
POPBOOL
DUPBOOL
ANDNE	D18	N_ReagTankOverHy
DUPBOOL
ANDE	D2	A_NoAlarm
ANDE	D1	A_NoAlarm
TMRDOWN	T14	10000
POPBOOL
AND	T14.Done
COPY	0x1	"4 0x0 SM_Running D0 1"
POPBOOL
ANDE	D18	N_ReagTankOverHy
COPY	0x1	"4 0x0 SM_Standby D0 1"

// Rung ProgStateMachine#4
// Offset 83
STRE	D0	SM_Running
DUPBOOL
ANDE	D2	A_NoAlarm
DUPBOOL
ANDE	D1	A_NoAlarm
ANDE	D18	N_ReagTankFull
COPY	0x1	"4 0x0 SM_Standby D0 1"
POPBOOL
ANDNE	D1	A_NoAlarm
COPY	0x1	"4 0x0 SM_Idle D0 1"
POPBOOL
ANDNE	D2	A_NoAlarm
COPY	0x1	"4 0x0 SM_Halted D0 1"

// Rung ProgStateMachine#5
// Offset 138
STRE	D0	SM_Idle
DUPBOOL
ANDE	D2	A_NoAlarm
ANDE	D1	A_NoAlarm
DUPBOOL
ANDE	D18	N_ReagTankFull
COPY	0x1	"4 0x0 SM_Standby D0 1"
POPBOOL
ANDNE	D18	N_ReagTankFull
COPY	0x1	"4 0x0 SM_Running D0 1"
POPBOOL
ANDNE	D2	A_NoAlarm
COPY	0x1	"4 0x0 SM_Halted D0 1"

// Rung ProgStateMachine#6
// Offset 193
STRE	D0	SM_Standby
DUPBOOL
ANDN	MC404
COPY	0x1	"4 0x0 1 C61 1"
POPBOOL
AND	MC404
COPY	0x1	"4 0x0 0 C61 1"
ANDE	D18	N_ReagTankEmpty
COPY	0x1	"4 0x0 SM_Starting D0 1 0x0 0 MC404 1"

// Rung ProgStateMachine#7
// Offset 225
STRE	D0	SM_Stopping
DUPBOOL
ANDN	MC404
COPY	0x1	"4 0x0 1 C61 1"
POPBOOL
AND	MC404
DUPBOOL
AND	C0
COPY	0x1	"4 0x0 0 MC404 1 0x0 0 C61 1 0x0 SM_Stopped D0 1"
POPBOOL
ANDN	C0
COPY	0x1	"4 0x0 0 MC404 1 0x0 0 C61 1 0x0 SM_RemoteDisable D0 1"

// Rung ProgStateMachine#8
// Offset 261
STRE	D0	SM_RemoteDisable
AND	C0
DUPBOOL
ANDE	D2	A_NoAlarm
COPY	0x1	"4 0x0 SM_Stopped D0 1"
POPBOOL
ANDNE	D2	A_NoAlarm
COPY	0x1	"4 0x0 SM_Halted D0 1"

// Rung ProgStateMachine#9
// Offset 293
STRE	D0	SM_Halted
AND	MC9
COPY	0x1	"4 0x0 SM_Stopped D0 1 0x0 0 MC9 1"

// Rung ProgStateMachine#10
// Offset 307
STRN	C2
DUPBOOL
ANDNE	D0	SM_Stopped
ANDNE	D0	SM_Halted
ANDNE	D0	SM_RemoteDisable
COPY	0x1	"4 0x0 SM_Stopping D0 1"
POPBOOL
STRE	D0	SM_Stopped
ORE	D0	SM_Halted
ANDSTR
ANDN	C0
COPY	0x1	"4 0x0 SM_RemoteDisable D0 1"

// Rung ProgStateMachine#11
// Offset 351
STRE	D0	SM_Starting
ORE	D0	SM_Running
ORE	D0	SM_Idle
OUT	C60

// Rung ProgStateMachine#12
// Offset 367
STR	ST1
COPY	0x1	"4 0x0 D0 MHR101 1"

// End of Code Block ProgStateMachine
$PGMEND	ProgStateMachine

// Beginning of Code Block ProgDraining
$PRGRM	ProgDraining

// Rung ProgDraining#1
// Offset 0
#BEGIN FMT_COMMENT 
"<B>Step 5</B><br>"
"<I>The PLC sends the End signal. This action is immediate "
"for the PLC. The GUI waits for the PLC to signal the end of "
"the routine, either automatically or upon receiving an "
"abort request. This action requires waiting.</I>"
#END

STR	ST1
COPY	0x1	"4 0x0 1 MHR202 1"

// Rung ProgDraining#2
// Offset 7
STR	C10
COPY	0x1	"4 0x0 1 C7 1"

// Rung ProgDraining#3
// Offset 13
STRN	C10
COPY	0x1	"4 0x0 0 C7 1"

// Rung ProgDraining#4
// Offset 19
STRN	C10
ANDN	C7
COPY	0x1	"4 0x0 1 MC404 1"

// Rung ProgDraining#5
// Offset 26
STR	MC404
EXIT

// End of Code Block ProgDraining
$PGMEND	ProgDraining

// Beginning of Code Block ProgAbortDrain
$PRGRM	ProgAbortDrain

// Rung ProgAbortDrain#1
// Offset 0
STR	ST1
COPY	0x1	"4 0x0 0 C7 1"

// Rung ProgAbortDrain#2
// Offset 6
STR	C7
COPY	0x1	"4 0x0 1 MC404 1"

// Rung ProgAbortDrain#3
// Offset 12
STR	MC404
EXIT

// End of Code Block ProgAbortDrain
$PGMEND	ProgAbortDrain

// Beginning of Code Block ProgAbortRinsing
$PRGRM	ProgAbortRinsing

// Rung ProgAbortRinsing#1
// Offset 0
STR	ST1
COPY	0x1	"4 0x0 1 MC404 1"

// Rung ProgAbortRinsing#2
// Offset 6
STR	MC404
EXIT

// End of Code Block ProgAbortRinsing
$PGMEND	ProgAbortRinsing

// Beginning of Code Block ProgRinsing
$PRGRM	ProgRinsing

// Rung ProgRinsing#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><FONT "
"tsize=5></FONT> <br> <br>"
"<FONT tsize=5>TaskRinsing</FONT><br><FONT tsize=5></FONT> "
"<br>pending"
#END

STR	ST1
COPY	0x1	"4 0x0 1 MHR202 1"

// Rung ProgRinsing#2
// Offset 7
STRN	MC404
COPY	0x1	"4 0x0 1 C16 1 0x0 1 C49 1"
ENTASK	TaskPropValvePID	0x0	0	0x1

// Rung ProgRinsing#3
// Offset 18
STR	X2
AND	C16
AND	C49
COPY	0x1	"4 0x0 1 C3 1"

// Rung ProgRinsing#4
// Offset 26
STR	C3
TMRDOWN	T16	10000

// Rung ProgRinsing#5
// Offset 29
STR	T16.Done
COPY	0x1	"4 0x0 0 C16 1 0x0 0 C49 1 0x0 0 C3 1"
HALT	TaskPropValvePID

// Rung ProgRinsing#6
// Offset 38
STR	T16.Done
ANDN	C16
COPY	0x1	"4 0x0 1 MC404 1"

// End of Code Block ProgRinsing
$PGMEND	ProgRinsing

// Beginning of Code Block TaskResetPlates
$TSK	TaskResetPlates

// Rung TaskResetPlates#1
// Offset 0
#BEGIN FMT_COMMENT 
"Reset Media Event"
#END

STR	C29
ANDPD	MC6
MOVE	0	TT10
MOVE	0	TT8
COPY	0x1	"4 0x0 0 TT0 1 0x0 0 TT4 1 0x0 0 TT1 1 0x0 0 TT6 1 0x0 0 TT5 1"
COPY	0x1	"4 0x0 0 MC6 1"

// Rung TaskResetPlates#2
// Offset 26
#BEGIN FMT_COMMENT 
"Reset Media Event"
#END

STR	C29
ANDPD	MC7
MOVE	0	TT10
COPY	0x1	"4 0x0 0 TT0 1 0x0 0 TT4 1 0x0 0 TT1 1 0x0 0 TT6 1 0x0 0 TT5 1"
COPY	0x1	"4 0x0 0 MC7 1"

// End of Code Block TaskResetPlates
$TSKEND	TaskResetPlates

// Beginning of Code Block $tBottomOfScan
$TSK	$tBottomOfScan

// Rung $tBottomOfScan#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br>"
"<FONT tsize=5>$tBottomOfScan</FONT><br><FONT "
"tsize=5></FONT> <br>"
"This is the last ladder task after the main ladder.  By "
"taking the necessary working memory variables and writing "
"them to the physical outputs and/or Modbus and/or any other "
"device requiring updates."
#END

NOP

// Rung $tBottomOfScan#2
// Offset 1
#BEGIN FMT_COMMENT 
"Write local memory bit variables (C) into digital outputs (Y)."
#END

STR	ST1
MAPIO	"2 C2 Y0 C21 Y1 C22 Y2 C23 Y3 C6 Y8 C7 Y7 C8 Y6 C17 Y11 C18 Y12"

// Rung $tBottomOfScan#3
// Offset 23
#BEGIN FMT_COMMENT 
"Set the inlet valve on/off only if enabled."
#END

STR	ST1
DUPBOOL
AND	C48
MAPIO	"2 C16 Y10"
POPBOOL
ANDN	C48
COPY	0x1	"4 0x0 0 Y10 1"

// Rung $tBottomOfScan#4
// Offset 38
#BEGIN FMT_COMMENT 
"Set green button LED"
#END

STR	ST1
AND	C2
OUT	Y13

// Rung $tBottomOfScan#5
// Offset 41
#BEGIN FMT_COMMENT 
"Set red button LED"
#END

STR	ST1
ANDN	C2
OUT	Y14

// Rung $tBottomOfScan#6
// Offset 44
#BEGIN FMT_COMMENT 
"Set galvanostat output if enabled"
#END

STR	ST1
AND	C41
SCALE	R8	SC36	SC37	SC38	SC39	WY0
MAPIO	"2 C5 Y28"

// Rung $tBottomOfScan#7
// Offset 57
#BEGIN FMT_COMMENT 
"Set galvanostat output enable for 10V models."
#END

STR	ST1
AND	C41
DUPBOOL
AND	C5
COPY	0x1	"4 0x0 0 WY5 1"
POPBOOL
ANDN	C5
COPY	0x1	"4 0x0 32767 WY5 1"

// Rung $tBottomOfScan#8
// Offset 75
#BEGIN FMT_COMMENT 
"Set ultrasonic output if enabled"
#END

STR	ST1
AND	C43
MAPIO	"2 C3 Y24"

// Rung $tBottomOfScan#9
// Offset 82
#BEGIN FMT_COMMENT 
"Set polarity output if enabled"
#END

STR	ST1
AND	C42
MAPIO	"2 C4 Y5 C30 Y16 C30 Y17 C31 Y20 C31 Y21"

// Rung $tBottomOfScan#10
// Offset 97
#BEGIN FMT_COMMENT 
"Set acid pump rate from PID result via pH."
#END

STR	ST1
DUPBOOL
AND	C34
AND	C50
COPY	0x1	"4 0x0 R10 WY1 1"
POPBOOL
ANDN	C34
COPY	0x1	"4 0x0 0 WY1 1"

// Rung $tBottomOfScan#11
// Offset 115
#BEGIN FMT_COMMENT 
"Set proportional valve rate from PID result via flow rate."
#END

STR	ST1
DUPBOOL
AND	C49
AND	C51
COPY	0x1	"4 0x0 R31 WY4 1"
POPBOOL
ANDN	C49
COPY	0x1	"4 0x0 0 WY4 1"

// Rung $tBottomOfScan#12
// Offset 133
#BEGIN FMT_COMMENT 
"Set acid pump rate from PID result via conductivity."
#END

STR	ST1
DUPBOOL
AND	C34
AND	C52
COPY	0x1	"4 0x0 R10 WY1 1"
POPBOOL
ANDN	C34
COPY	0x1	"4 0x0 0 WY1 1"

// Rung $tBottomOfScan#13
// Offset 151
#BEGIN FMT_COMMENT 
"Set modbus alarm bits for UI"
#END

STR	C29
ANDNE	D0	SM_Starting
MAPIO	"2 A1 MC101 A2 MC102 A3 MC103 A4 MC104 A5 MC105 A6 MC106 A22 MC122 A19 MC119 A20 MC120 A7 MC107 A23 MC123 A27 MC127 A28 MC128 A29 MC129 A15 MC115 A16 MC116 A30 MC130 A31 MC131 A32 MC132 A33 MC133"

// Rung $tBottomOfScan#14
// Offset 200
#BEGIN FMT_COMMENT 
"Set modbus sensor bits for UI"
#END

STR	C29
MAPIO	"2 C53 MC212 C54 MC213 C9 MC214 C46 MC215 C10 MC216"

// Rung $tBottomOfScan#15
// Offset 214
#BEGIN FMT_COMMENT 
"Set modbus sensor gauge values for UI"
#END

STR	C29
MATH	MHR1	"ROUND(R19 * 100)"
MATH	MHR2	"ROUND(R18 * 100)"
MATH	MHR3	"ROUND(R13 * 100)"
MATH	MHR4	"ROUND(R9 * 100)"
MATH	MHR6	"ROUND(R16 * 100)"
MATH	MHR7	"ROUND(R17 * 100)"
MATH	MHR8	"ROUND(TT7 * 100)"
MATH	MHR9	"ROUND(R14 * 100)"
MATH	MHR10	"ROUND(TT9 * 100)"
MATH	MHR11	"ROUND(TT11 * 100)"

// End of Code Block $tBottomOfScan
$TSKEND	$tBottomOfScan

#BEGIN ELEMENT_DOC
"X0","FLAGS = REST_READONLY","XRemoteEnable","Input / Bit","Remote enable"
"X2","FLAGS =","XGenLevelHiOn","Input / Bit","generator flow cell level sensor hi"
"X3","FLAGS = REST_READONLY","XRemoteOn","Input / Bit","Remote Start (Requires Remote enable to be On)"
"X4","FLAGS =","XReagntLoLoOn","Input / Bit","reagent tank level sensor lo-lo"
"X5","FLAGS =","XReagntLoOn","Input / Bit","reagent tank level sensor lo"
"X6","FLAGS =","XReagntHiOn","Input / Bit","reagent tank level sensor hi"
"X7","FLAGS =","XReagntHiHiOn","Input / Bit","reagent tank level sensor hi-hi"
"X8","FLAGS =","XGenLevelLoOn","Input / Bit","vent overflow level sensor hi"
"X10","FLAGS =","XGreenButton","Input / Bit","push button to start machine or reflect started"
"X11","FLAGS =","XRedButton","Input / Bit","push button to stop machine or reflect stopped"
"Y0","FLAGS =","YSystemOn","Output / Bit","status signal for system running"
"Y1","FLAGS =","YErrorOn","Output / Bit","status signal for errors exist"
"Y2","FLAGS =","YWarnOn","Output / Bit","status signal for warnings exist"
"Y3","FLAGS =","YInfoOn","Output / Bit","status signal for info exist"
"Y4","FLAGS =","YAcidPumpOn","Output / Bit","acid pump on/off"
"Y5","FLAGS =","YPolarityOn","Output / Bit","polarity on/off"
"Y6","FLAGS =","YReagntPumpOn","Output / Bit","reagent pump on/off"
"Y7","FLAGS =","YDrainPumpOn","Output / Bit","drain pump on/off"
"Y10","FLAGS =","YInletValveOn","Output / Bit","inlet valve on/off"
"Y11","FLAGS =","YGenValveOn","Output / Bit","generator cell drain valve on/off"
"Y13","FLAGS =","YGreenButtonOn","Output / Bit","panel button LED to reflect running"
"Y14","FLAGS =","YRedButtonOn","Output / Bit","panel button LED to reflect stopped"
"Y16","FLAGS =","YPolarity1OnR1","Output / Bit","h-bridge polarity position 1 on/off relay 1"
"Y17","FLAGS =","YPolarity1OnR3","Output / Bit","h-bridge polarity position 1 on/off relay 3"
"Y20","FLAGS =","YPolarity2OnR2","Output / Bit","h-bridge polarity position 2 on/off relay 2"
"Y21","FLAGS =","YPolarity2OnR4","Output / Bit","h-bridge polarity position 2 on/off relay 4"
"Y24","FLAGS =","YUltrasonicsOn","Output / Bit","ultrasonics on/off"
"Y28","FLAGS =","YGalvanostatOn","Output / Bit","galvanostat on/off"
"WX1","FLAGS =","WXTempOutlet","Input / SWord","raw temperature outlet value (see module/scale for ranges)"
"WX2","FLAGS =","WXTankLevel","Input / SWord","raw level sensor value (see module/scale for ranges)"
"WX3","FLAGS =","WXpH","Input / SWord","raw pH sensor value (see module/scale for ranges)"
"WX4","FLAGS =","WXConductivity","Input / SWord","raw conductivity sensor value (see module/scale for ranges)"
"WX20","FLAGS =","WXFlowInRate","Input / SWord","raw flow rate inlet value (see module/scale for ranges)"
"WX21","FLAGS =","WXTempInlet","Input / SWord","raw temperature of inlet value (see module/scale for ranges)"
"WX22","FLAGS =","WXVoltFeedback","Input / SWord","raw voltage feedback from galvanostat (see module/scale for ranges)"
"WX23","FLAGS =","WXAmpFeedback","Input / SWord","raw galvanostat amperage feedback value (see module/scale for ranges)"
"WY0","FLAGS =","WYAmperageOut","Output / SWord","scaled galvanostat out (see module/scale for ranges)"
"WY1","FLAGS =","WYAcidPumpRate","Output / SWord","scaled acid pump rate (see module/scale for ranges)"
"WY4","FLAGS =","WYPropValve","Output / SWord","scaled proportional valve out (see module/scale for ranges)"
"WY5","FLAGS =","WYGalvanostatOn","Output / SWord","galvanostat on/off for models requiring full 10V signal"
"C0","FLAGS = REST_READONLY","CRemoteEnable","Working / Bit","Remote enable"
"C1","FLAGS =","COnTrigger","Working / Bit","local signal ok to start"
"C2","FLAGS =","CSystemOn","Working / Bit","system is on"
"C3","FLAGS =","CUltrasonicsOn","Working / Bit","ultrasonics start/stop"
"C4","FLAGS =","CPolarityOn","Working / Bit","polarity start/stop"
"C5","FLAGS =","CGalvanostatOn","Working / Bit","galvanostat start/stop"
"C6","FLAGS =","CAcidPumpOn","Working / Bit","acid pump start/stop"
"C7","FLAGS =","CDrainPumpOn","Working / Bit","drain pump start/stop"
"C8","FLAGS =","CReagntPumpOn","Working / Bit","reagent pump start/stop"
"C9","FLAGS =","CAcidLevelLoOn","Working / Bit","acid tank level sensor lo"
"C10","FLAGS =","CGenLevelLo","Working / Bit","generator cell level sensor lo"
"C11","FLAGS =","CReagntLoLoOn","Working / Bit","reagent tank level sensor lo-lo"
"C12","FLAGS =","CReagntLoOn","Working / Bit","reagent tank level sensor lo"
"C13","FLAGS =","CReagntHiOn","Working / Bit","reagent tank level sensor hi"
"C14","FLAGS =","CReagntHiHiOn","Working / Bit","reagent tank level sensor hi-hi"
"C15","FLAGS =","CVentLevelOn","Working / Bit","vent overflow level sensor hi"
"C16","FLAGS =","CInletValveOn","Working / Bit","inlet valve"
"C17","FLAGS =","CGenValveOn","Working / Bit","generator cell drain valve"
"C18","FLAGS =","CReagntValveOn","Working / Bit","reagent tank drain valve"
"C19","FLAGS =","CFileLogSuccess","Working / Bit","file log success"
"C20","FLAGS =","CFileLogError","Working / Bit","file log error"
"C21","FLAGS =","CErrorOn","Working / Bit","error events exist"
"C22","FLAGS =","CWarnOn","Working / Bit","warning events exist"
"C23","FLAGS =","CInfoOn","Working / Bit","info events exist"
"C24","FLAGS =","CPolaritySyncUS","Config / Bit","ultrasonics synced with polarity switch"
"C25","FLAGS =","CAcidLevelLoLoOn","Working / Bit","acid tank level sensor lo-lo"
"C26","FLAGS =","CEnableErrors","Config / Bit","run with/without error checking"
"C27","FLAGS = REST_READONLY","CEnableWarnings","Config / Bit","run with/without warnings checking"
"C28","FLAGS = REST_READONLY","CEnableInfo","Config / Bit","run with/without info checking"
"C29","FLAGS =","CEnableModbus","Working / Bit","run with/without Modbus calls"
"C30","FLAGS =","CPolarity1On","Working / Bit","h-bridge polarity position 1"
"C31","FLAGS =","CPolarity2On","Working / Bit","h-bridge polarity position 2"
"C32","FLAGS =","CPolaritySwitch","Working / Bit","boolean during polarity h bridge switching"
"C33","FLAGS =","CDemoMode","Config / Bit","turn demo valves on/off"
"C34","FLAGS =","CEnableAcidPump","Config / Bit","run with/without acid pump"
"C35","FLAGS =","CGreenPressed","Working / Bit","stores if green button pressed last"
"C36","FLAGS =","CRedPressed","Working / Bit","stores if red button pressed last"
"C37","FLAGS =","CPolSyncStart","Working / Bit","true for the duration of ultrasonics to sync with polarity"
"C38","FLAGS =","CLoadWebPages","on/off bit","true to refreshing web user pages from SD card to RAM"
"C39","FLAGS =","CEnableRandom","Config / Bit","run with/without random sensor values"
"C40","FLAGS =","CHmiOn","Working / Bit","hmi signal ok to start"
"C41","FLAGS =","CEnableGalvan","Config / Bit","run with/without galvanostat"
"C42","FLAGS =","CEnablePolarity","Config / Bit","run with/without polarity"
"C43","FLAGS =","CEnableUltraSon","Config / Bit","run with/without ultrasonics"
"C44","FLAGS =","CPrcsngStartStop","Working / Bit","whether a start or a stop command are being processed"
"C45","FLAGS =","CGalvHasAmpFB","Config / Bit","whether galvanostat gives an amperage feedback"
"C46","FLAGS =","CGenLevelHi","Working / Bit","generator cell level sensor hi"
"C47","FLAGS =","CEnableUSFan","Config / Bit","run with/without ultrasonic fan"
"C48","FLAGS =","CEnableInletVal","Config / Bit","run with/without inlet valve"
"C49","FLAGS =","CPropValveOn","Working / Bit","proportional valve"
"C50","FLAGS =","CEnableAcidPID","Config / Bit","run with/without acid pump PID"
"C51","FLAGS =","CEnablePropPID","Config / Bit","run with/without proportional valve PID"
"C52","FLAGS =","CEnableCondPID","Config / Bit","run with/without conductivity PID"
"C53","FLAGS =","CLeakSensor","Working / Bit","leak sensor on/off"
"C54","FLAGS =","CAcidLevelHi","Working / Bit","acid tank level hi"
"C56","FLAGS =","CEnableCondPPID","Config / Bit","run with/without conductivity pulse PID"
"C57","FLAGS =","CStopDrain","",""
"C58","FLAGS =","CNoticeOn","","Bit for whether or not there is an active notice"
"C59","FLAGS =","CEnableNotices","",""
"C60","FLAGS =","CFlowingStates","","The system is on and water is flowing but not necessarily generating"
"C61","FLAGS = REST_READONLY","C61_Drain","",""
"C62","FLAGS = REST_READONLY","CRemoteOn","","Remote Start"
"D0","FLAGS =","DSystemMode","Default / SDWord","latest mode (see SystemModes)"
"D1","FLAGS =","DWarnCode","Default / SDWord","latest warning (see WarningCodes)"
"D2","FLAGS =","DErrorCode","Default / SDWord","latest error (see ErrorCodes)"
"D3","FLAGS =","DInfoCode","Default / SDWord","latest info (see InfoCodes)"
"D4","FLAGS =","DUltraDuration","Default / SDWord","ultrasonic duration off in milliseconds (o = disabled/off)"
"D5","FLAGS =","DUltraInterval","Default / SDWord","ultrasonic interval on in milliseconds (o = disabled/off)"
"D6","FLAGS =","DPolarityCycle","Default / SDWord","polarity cycle time in milliseconds (0 = disabled/off)"
"D7","FLAGS =","DErrorDebounOn","Default / SDWord","error debounce on stability in milliseconds"
"D8","FLAGS =","DInfoDebounOn","Default / SDWord","info debounce on stability in milliseconds"
"D9","FLAGS = REST_READONLY","DInfoDebounOff","Default / SDWord","info debounce off stability in milliseconds"
"D10","FLAGS = REST_READONLY","DWarnDebounOn","Default / SDWord","warning debounce on stability in milliseconds"
"D11","FLAGS = REST_READONLY","DWarnDebounOff","Default / SDWord","warning debounce off stability in milliseconds"
"D12","FLAGS =","DErrorDebounOff","Default / SDWord","error debounce off stability in milliseconds"
"D13","FLAGS =","DInputDebounOn","Default / SDWord","digital input debounce on stability in milliseconds"
"D14","FLAGS =","DInputDebounOff","Default / SDWord","digital input debounce off stability in milliseconds"
"D15","FLAGS =","DButtonDebounOn","Default / SDWord","button input debounce on stability in milliseconds"
"D16","FLAGS =","DDebounNoticeOn","","notice debounce on in miliseconds"
"D17","FLAGS =","DDebounNoticeOff","","notice debounce on in miliseconds"
"D18","FLAGS =","DNoticeCode","","Code for the notice"
"R0","FLAGS =","RFlowRateMin","Limit / Real","flow rate minimum"
"R1","FLAGS =","RFlowRateMax","Limit / Real","flow rate maximum"
"R2","FLAGS =","RConductMin","Limit / Real","conductivity minimum"
"R3","FLAGS =","RConductMax","Limit / Real","conductivity maximum"
"R4","FLAGS =","RpHMin","Limit / Real","pH minimum"
"R5","FLAGS =","RpHMax","Limit / Real","pH maximum"
"R6","FLAGS =","RORPMin","Limit / Real","ORP minimum"
"R7","FLAGS =","RORPMax","Limit / Real","ORP maximum"
"R8","FLAGS =","RAmperageOut","Scaled / Real","scaled galvanostat amperage in amps (see module/scale for ranges)"
"R9","FLAGS =","RFlowInRate","Scaled / Real","scaled flow incoming rate in L/min (see module/scale for ranges)"
"R10","FLAGS =","RAcidPumpRate","Scaled / Real","scaled acid pump rate in mL/min (see module/scale for ranges)"
"R11","FLAGS =","RDrainPumpRate","Scaled / Real","scaled drain pump rate in XXX (see module/scale for ranges)"
"R12","FLAGS =","RReagntPumpRate","Scaled / Real","scaled reagent pump rate in mL/min (see module/scale for ranges)"
"R13","FLAGS =","RpH","Scaled / Real","scaled ph sensor value in pH (see module/scale for ranges)"
"R14","FLAGS =","RConductivity","Scaled / Real","scaled conductivity sensor value in mS (see module/scale for ranges)"
"R15","FLAGS =","RORP","Scaled / Real","scaled orp sensor value in mV (see module/scale for ranges)"
"R16","FLAGS =","RTempInlet","Scaled / Real","scaled temperature in value in C (see module/scale for ranges)"
"R17","FLAGS =","RTempOutlet","Scaled / Real","scaled temperature out value in C (see module/scale for ranges)"
"R18","FLAGS =","RAmpFeedback","Scaled / Real","scaled amperage feedback value in amps (see module/scale for ranges)"
"R19","FLAGS =","RVoltFeedback","Scaled / Real","scaled voltage feedback value in volts (see module/scale for ranges)"
"R20","FLAGS =","RVoltInfo","Limit / Real","voltage Info level in volts"
"R21","FLAGS =","RVoltAlarm","Limit / Real","voltage alarm level in volts"
"R22","FLAGS =","RTempInfo","Limit / Real","temperature info level in C"
"R23","FLAGS =","RTempAlarm","Limit / Real","temperature alarm level in C"
"R24","FLAGS =","RMediaInfo","Limit / Real","media info level in %"
"R25","FLAGS =","RMediaAlarm","Limit / Real","media alarm level in %"
"R26","FLAGS =","RMaxAmerage","Limit / Real","maxium amperage devices can supply in amps"
"R27","FLAGS =","RTempVolt","Temp / Real","temporary holding variable between calculations and functions"
"R28","FLAGS =","RTankLevel","Scaled / Real","scaled tank level in meters (see module/scale for ranges)"
"R29","FLAGS =","RpHFiltered","Temp / Real","scaled and filtered value for pH for acid pump PID"
"R30","FLAGS =","RTankCurrVol","Temp / Real","reagent tank current volume in meters3"
"R31","FLAGS =","RPropValve","Scaled / Real","tbd"
"R32","FLAGS =","RFlowFiltered","Temp / Real","scaled and filtered value for flow rate for prop valve PID"
"R33","FLAGS =","RCondFiltered","Temp / Real","scaled and filtered value for conductivity for acid pump PID"
"R34","FLAGS =","RAcidDutyCycle","Percent / Real","percentage for acid pump duty cycle"
"R35","FLAGS =","RAcidDutyOn","Temp / Real","time acid pump is on in msec"
"R36","FLAGS =","RAcidDutyOff","Temp / Real","time acid pump is off in msec"
"R37","FLAGS =","StoredRoutineID","",""
"R38","FLAGS =","RMediaMConsRate","","Plates mas consumption rate"
"T0","FLAGS =","TPolDuration","TImer Struct","timer for switching polarity"
"T0.Done","FLAGS =","","TImer Struct",""
"T1","FLAGS =","TUltraInterval","TImer Struct","timer for ultrasonics interval (off time)"
"T1.Done","FLAGS =","TUltraInterval.D","TImer Struct",""
"T2","FLAGS =","TUltraDuration","TImer Struct","timer for ultrasonics duration (on time)"
"T2.Done","FLAGS =","TUltraDuration.D","TImer Struct",""
"T3","FLAGS =","TPolPause3","TImer Struct","timer for pause between h bridge switching"
"T3.Done","FLAGS =","","TImer Struct",""
"T4","FLAGS =","TPolPause4","TImer Struct","timer for pause between h bridge switching"
"T4.Done","FLAGS =","","TImer Struct",""
"T5","FLAGS =","TPolPause5","TImer Struct","timer for pause between h bridge switching"
"T5.Done","FLAGS =","","TImer Struct",""
"T6","FLAGS =","TUltraDuation","TImer Struct","timer for ultrasonics sync duration (on time)"
"T6.Done","FLAGS =","TUltraDuation.Do","TImer Struct","timer done for ultrasonics sync duration (on time)"
"T7","FLAGS =","TCondRangeTO","TImer Struct","timer for conductivity timeout"
"T8","FLAGS =","TFlowRangeTO","TImer Struct","timer for flow rate timeout"
"T9","FLAGS =","TGenNotFullTO","TImer Struct","timer for generator not filled timeout"
"T10","FLAGS =","TORPRangeTO","TImer Struct","timer for orp range timeout"
"T11","FLAGS =","TpHRangeTO","TImer Struct","timer for ph range timeout"
"T12","FLAGS =","TMediaAlarm","TImer Struct","timer for media timeout"
"T13","FLAGS =","TLoadWebPagesUP","Timer Struct","timer for creating web pages directory"
"T13.Done","FLAGS =","TLoadWebPagesUP.","Timer Struct","timer for creating web pages directory"
"T15","FLAGS = REST_READONLY","TGenEmptyTO","TimerStruct","timer for generator empty timeout"
"T17","FLAGS = REST_READONLY","TStartupTimeout","",""
"SS1","FLAGS =","SSFileName","File / String","PLC specific file name prefix"
"SL0","FLAGS =","SL_Message0","Message / String","latest message string"
"MC1","FLAGS =","MC1_UIStartCMD","Modbus / Bit","modbus UI start bit"
"MC2","FLAGS =","MC2_UIStopCMD","Modbus / Bit","modbus UI stop bit"
"MC6","FLAGS =","MC6_RstAllPltCMD","Modbus / Bit","Reset All plates CMD"
"MC7","FLAGS = REST_READONLY","MC7_RstInPltsCMD","","Reset Inner plates CMD"
"MC8","FLAGS =","MC8_RestricStart","","Address to lock the start of the process from the UI"
"MC9","FLAGS =","MC9_HaltACK","","Bit that the GUI sets to 1 to acknowledge errors. Used to go from HALTED to STOPPED"
"MC101","FLAGS =","MC101_AORP","Modbus / Bit","modbus alarm: AORPRange"
"MC102","FLAGS =","MC102_ApH","Modbus / Bit","modbus alarm: ApHRange"
"MC103","FLAGS =","MC103_ACond","Modbus / Bit","modbus alarm: ACondRange"
"MC104","FLAGS =","MC104_AFlow","Modbus / Bit","modbus alarm: AFlowRange"
"MC105","FLAGS =","MC105_ATemp","Modbus / Bit","modbus alarm: ATempRange"
"MC106","FLAGS =","MC106_GenNotFull","Modbus / Bit","modbus alarm: AGenNotFull"
"MC107","FLAGS =","MC107_GenEmpty","",""
"MC108","FLAGS =","MC108_AcidTankLo","",""
"MC109","FLAGS =","MC109_AcidEmpty","",""
"MC110","FLAGS = REST_READONLY","MC110_VoltInfo","",""
"MC111","FLAGS =","MC111_VoltAlarm","",""
"MC112","FLAGS =","MC112_ReagntOF","",""
"MC113","FLAGS =","MC113_ReagntEmpt","",""
"MC114","FLAGS =","MC114_ErrorPLC","",""
"MC115","FLAGS = REST_READONLY","MC115_OutPlatesI","",""
"MC116","FLAGS = REST_READONLY","MC116_OutPlatesN","",""
"MC117","FLAGS =","MC117_ORPRangeTO","",""
"MC118","FLAGS =","MC118_pHRangeTO","",""
"MC119","FLAGS =","MC119_CondRangTO","",""
"MC120","FLAGS =","MC120_FlowRangTO","",""
"MC121","FLAGS = REST_READONLY","MC121_TempInfo","",""
"MC122","FLAGS =","MC122_GenNotFuTO","Modbus / Bit","modbus alarm: AGenNotFullTO"
"MC123","FLAGS =","MC123_GenEmptyTO","",""
"MC127","FLAGS = REST_READONLY","MC127_ReTankFull","",""
"MC128","FLAGS = REST_READONLY","MC128_ReTankEmpt","",""
"MC129","FLAGS = REST_READONLY","MC129_ReTankHyst","",""
"MC130","FLAGS = REST_READONLY","MC130_InPlatesI","",""
"MC131","FLAGS = REST_READONLY","MC131_OutPlatesN","",""
"MC132","FLAGS = REST_READONLY","MC132_StartTO","",""
"MC212","FLAGS =","MC212_LeakSensor","Modbus / Bit","modbus leak sensor"
"MC213","FLAGS =","MC213_Acid_Lvl_H","Modbus / Bit","modbus acid tank level hi"
"MC214","FLAGS =","MC214_Acid_Lvl_L","Modbus / Bit","modbus acid tank level lo"
"MC215","FLAGS =","MC215_Gen_Lvl_H","Modbus / Bit","modbus generator flow cell level hi"
"MC216","FLAGS =","MC216_Gen_Lvl_L","Modbus / Bit","modbus generator flow cell level lo"
"MC401","FLAGS =","StartRoutineCMD","",""
"MC402","FLAGS =","StartRoutineACKS","",""
"MC403","FLAGS =","AbortRoutineCMD","",""
"MC404","FLAGS =","EndRoutineCMD","",""
"MC405","FLAGS =","EndRoutineACK","",""
"MC602","FLAGS =","MC_InletForce","Modbus / Bit","modbus actuator is being forced from GUI"
"MC603","FLAGS =","MC_InletValue","Modbus / Bit","modbus status value for actuator"
"MC610","FLAGS =","MC_DrainForce","Modbus / Bit","modbus actuator is being forced from GUI"
"MC611","FLAGS =","MC_DrainValue","Modbus / Bit","modbus status value for actuator"
"MHR1","FLAGS =","MHR1_Volt","Modbus / SWord","modbus voltage value"
"MHR2","FLAGS =","MHR2_Amp","Modbus / SWord","modbus amperage value"
"MHR3","FLAGS =","MHR3_pH","Modbus / SWord","modbus pH value"
"MHR4","FLAGS =","MHR4_Flow","Modbus / SWord","modbus flow rate"
"MHR5","FLAGS =","MHR5_InPlatePerc","Modbus / SWord","modbus inner plates percentage value"
"MHR6","FLAGS =","MHR6_TempIn","Modbus / SWord","modbus temperature in"
"MHR7","FLAGS =","MHR7_TempOut","Modbus / SWord","modbus temperature out"
"MHR8","FLAGS =","MHR8_ReagntPerc","Modbus / SWord","modbus reagent percentage value"
"MHR9","FLAGS =","MHR9_Conduct","Modbus / SWord","modbus conductivity"
"MHR10","FLAGS = REST_READONLY","MHR10_OutPlatePe","","Outer plates percentage"
"MHR11","FLAGS = REST_READONLY","MHR11_InPlatePer","","Outer plates percentage"
"MHR101","FLAGS = REST_READONLY","MHR101_Status","","Status of the StateMachine"
"MHR201","FLAGS =","RoutineID","Modbus / SWord","ID of the routine being triggered (Flush, etc.)"
"MHR202","FLAGS =","RoutineStepNum","","Current step of the routine running"
"A0","FLAGS =","ANoAlarm","Alarm / Bit","No Alarm"
"A1","FLAGS =","AORPRange","Alarm / Bit","ORP Range - ORP is out of range"
"A2","FLAGS =","ApHRange","Alarm / Bit","pH Range - PH is out of range"
"A3","FLAGS =","ACondRange","Alarm / Bit","Conductivity Range - Conductivity is out of range"
"A4","FLAGS =","AFlowRange","Alarm / Bit","Flow Range - Flow rate is out of range"
"A5","FLAGS =","ATempAlarm","Alarm / Bit","Temperature Alarm - Temperature exceeds alarm level"
"A6","FLAGS =","AGenNotFull","Alarm / Bit","Generator Level - Generator flow cell is not filled"
"A7","FLAGS =","AGenEmpty","Alarm / Bit","Generator Level - Generator flow cell is empty"
"A8","FLAGS =","AAcidTankLow","Alarm / Bit","Acid Level - Acid tank is running low"
"A9","FLAGS =","AAcidTankEmpty","Alarm / Bit","Acid Level - Acid tank is empty"
"A10","FLAGS =","AVoltInfo","Alarm / Bit","Voltage Info - Voltage exceeds info level"
"A11","FLAGS =","AVoltAlarm","Alarm / Bit","Voltage Alarm - Voltage exceeds alarm level"
"A12","FLAGS =","AReagntOverFlow","Alarm / Bit","Reagent Level - Reagent tank reached overflow"
"A13","FLAGS =","AReagntEmpty","Alarm / Bit","Reagent Level - Reagent tank is empty"
"A14","FLAGS =","AErrorPLC","Alarm / Bit","PLC Error - PLC is experiencing errors"
"A15","FLAGS =","AOutPlatesInfo","Alarm / Bit","Media Info - Media near end-of-life"
"A16","FLAGS =","AOutPlatesNotice","Alarm / Bit","Media Alarm - Media at end-of-life"
"A17","FLAGS =","AORPRangeTO","Alarm / Bit","ORP Range - ORP is out of range and timed out"
"A18","FLAGS =","ApHRangeTO","Alarm / Bit","pH Range - PH is out of range and timed out"
"A19","FLAGS =","ACondRangeTO","Alarm / Bit","Conductivity Range - Conductivity is out of range and timed out"
"A20","FLAGS =","AFlowRangeTO","Alarm / Bit","Flow Range - Flow rate is out of range and timed out"
"A21","FLAGS =","ATempInfo","Alarm / Bit","Temperature Info - Temperature exceeds info level"
"A22","FLAGS =","AGenNotFullTO","Alarm / Bit","Generator Level - Generator flow cell has not filled and timed out"
"A23","FLAGS =","AGenEmptyTO","Alarm / Bit","Generator Level - Generator flow cell is empty and timed out"
"A24","FLAGS =","AModbusWrite","Alarm / Bit","Modbus Write - an error from writing Modbus"
"A25","FLAGS =","AModbusRead","Alarm / Bit","Modbus Read - an error from reading Modbus"
"A26","FLAGS =","ALoadWebPages","Alarm / Bit","Load Web Pages - an error occurred while refreshing web pages"
"A27","FLAGS =","AReagentTankFull","Notice","Notice - the reagent tank is full"
"A28","FLAGS =","AReagentTankEmpt","Notice","Notice - the reagent tank is empty"
"A29","FLAGS = REST_READONLY","AReagTankOverHys","Notice","If the reagent tank is over a certain percentage when the machine is restarted a notice will be raised and we'll go to Standb"
"A30","FLAGS = REST_READONLY","AInPlatesInfo","",""
"A31","FLAGS = REST_READONLY","AInPlatesNotice","",""
"A32","FLAGS = REST_READONLY","AStartupTimeoutE","",""
"F0","FLAGS =","FAmperageOut","Original / Real","amperage out to galv in amps"
"F1","FLAGS =","FUltraDuration","Original / Real","ultrasonic duration off in seconds"
"F2","FLAGS =","FUltraInterval","Original / Real","ultrasonic interval on in seconds"
"F3","FLAGS =","FPolarityCycle","Original / Real","polarity cycle time in seconds"
"F4","FLAGS =","FErrorDebounOn","Original / Real","error debounce on in milliseconds"
"F5","FLAGS =","FInfoDebounOn","Original / Real","info debounce on in milliseconds"
"F6","FLAGS =","FInfoDebounOff","Original / Real","info debounce off in milliseconds"
"F7","FLAGS =","FWarnDebounOn","Original / Real","warning debounce on in milliseconds"
"F8","FLAGS =","FWarnDebounOff","Original / Real","warning debounce off in milliseconds"
"F9","FLAGS =","FErrorDebounOff","Original / Real","error debounce off in milliseconds"
"F10","FLAGS =","FpHTarget","Original / Real","target value for pH level in acid pump PID"
"F11","FLAGS =","FTankHeight","Original / Real","reagent tank height in meters"
"F12","FLAGS =","FTankCrossSect","Original / Real","reagent tank cross sectional area in meters2"
"F13","FLAGS =","FTankCapacity","Original / Real","reagent tank capacity in meters3"
"F14","FLAGS =","FCondTarget","Original / Real","target value for conductivity level"
"F15","FLAGS =","FFlowTarget","Original / Real","target flow value for proportional valve in lpm"
"F16","FLAGS =","FAmpSecFactor","Original / Real","factor used in calculating media percent"
"F17","FLAGS =","FAcidDutyDur","Original / Real","duratino time for acid pump duty cycle in msec"
"F18","FLAGS =","FTotalPlatesMass","","Total mass of the plates"
"F19","FLAGS =","FReagTankMaxPerc","","Percentage for which we consider the reagent tank to be full"
"F20","FLAGS =","FReagTankMinPerc","","Percentage for which we consider the reagent tank to be empty"
"F21","FLAGS = REST_READONLY","FReagTankHysPerc","","Percentage that acts as a limit when the device is restarted, to decide whether or not we generate"
"B0","FLAGS =","BNoAlarm","Bypass / Bit","enable/disable associated alarm: ANoAlarm"
"B1","FLAGS =","BORPRange","Bypass / Bit","enable/disable associated alarm: AORPRange"
"B2","FLAGS =","BpHRange","Bypass / Bit","enable/disable associated alarm: ApHRange"
"B3","FLAGS =","BCondRange","Bypass / Bit","enable/disable associated alarm: ACondRange"
"B4","FLAGS =","BFlowRange","Bypass / Bit","enable/disable associated alarm: AFlowRange"
"B5","FLAGS =","BTempAlarm","Bypass / Bit","enable/disable associated alarm: ATempAlarm"
"B6","FLAGS =","BGenNotFull","Bypass / Bit","enable/disable associated alarm: AGenNotFull"
"B7","FLAGS =","BGenEmpty","Bypass / Bit","enable/disable associated alarm: AGenEmpty"
"B8","FLAGS =","BAcidTankLow","Bypass / Bit","enable/disable associated alarm: AAcidTankLow"
"B9","FLAGS =","BAcidTankEmpty","Bypass / Bit","enable/disable associated alarm: AAcidTankEmpty"
"B10","FLAGS =","BVoltInfo","Bypass / Bit","enable/disable associated alarm: AVoltInfo"
"B11","FLAGS =","BVoltAlarm","Bypass / Bit","enable/disable associated alarm: AVoltAlarm"
"B12","FLAGS =","BReagntOverFlow","Bypass / Bit","enable/disable associated alarm: AReagntOverFlow"
"B13","FLAGS =","BReagntEmpty","Bypass / Bit","enable/disable associated alarm: AReagntEmpty"
"B14","FLAGS =","BErrorPLC","Bypass / Bit","enable/disable associated alarm: AErrorPLC"
"B15","FLAGS =","BOutPlatesInfo","Bypass / Bit","enable/disable associated alarm: AMediaInfo"
"B16","FLAGS =","BOutPlatesNotice","Bypass / Bit","enable/disable associated alarm: AMediaAlarm"
"B17","FLAGS =","BORPRangeTO","Bypass / Bit","enable/disable associated alarm: AORPRangeTO"
"B18","FLAGS =","BpHRangeTO","Bypass / Bit","enable/disable associated alarm: ApHRangeTO"
"B19","FLAGS =","BCondRangeTO","Bypass / Bit","enable/disable associated alarm: ACondRangeTO"
"B20","FLAGS =","BFlowRangeTO","Bypass / Bit","enable/disable associated alarm: AFlowRangeTO"
"B21","FLAGS =","BTempInfo","Bypass / Bit","enable/disable associated alarm: ATempInfo"
"B22","FLAGS =","BGenNotFullTO","Bypass / Bit","enable/disable associated alarm: AGenNotFullTO"
"B23","FLAGS =","BGenEmptyTO","Bypass / Bit","enable/disable associated alarm: AGenEmptyTO"
"B24","FLAGS =","BModbusWrite","Bypass / Bit","enable/disable associated alarm: AModbusWrite"
"B25","FLAGS =","BModbusRead","Bypass / Bit","enable/disable associated alarm: AModbusRead"
"B26","FLAGS =","BLoadWebPages","Bypass / Bit","enable/disable associated alarm: ALoadWebPages"
"B27","FLAGS =","BReagTankFull","","enable/disable for tank is full"
"B28","FLAGS =","BReagTankEmpty","",""
"B29","FLAGS = REST_READONLY","BReagTankOverHys","",""
"B30","FLAGS = REST_READONLY","BInPlatesInfo","",""
"B31","FLAGS = REST_READONLY","BInPlatesNotice","",""
"B32","FLAGS = REST_READONLY","BStartupTimeoutE","",""
"TO0","FLAGS =","TOCondRange","Timeout / SDWord","conductivity timeout in seconds"
"TO1","FLAGS =","TOFlowRange","Timeout / SDWord","flow rate timeout in seconds"
"TO2","FLAGS =","TOGenEmpty","Timeout / SDWord","generator empty timeout in seconds"
"TO3","FLAGS =","TOGenNotFull","Timeout / SDWord","generator not filled timeout in seconds"
"TO4","FLAGS =","TOORPRange","Timeout / SDWord","orp range timeout in seconds"
"TO5","FLAGS =","TOpHRange","Timeout / SDWord","pH range timeout in seconds"
"TO6","FLAGS =","TOMediaAlarm","Timeout / SDWord","media timeout in seconds"
"TT0","FLAGS =","TTAmpHours","Totals / Real","accumulated Ah since last plate reset"
"TT1","FLAGS =","TTKWattHours","Totals / Real","accumulated KWh since last plate reset"
"TT3","FLAGS =","TTFlowVolume","Totals / Real","total flow volume since last plate reset"
"TT4","FLAGS =","TTAmpSeconds","Totals / Real","holding variable for amp seconds for percent subtraction"
"TT5","FLAGS =","TTGenRunTmeHrs","Totals / Real","accumulated run time in hours of generator"
"TT6","FLAGS =","TTGenRunTimeSec","Totals / Real","accumulated run time in seconds of generator"
"TT7","FLAGS =","TTReagntPercent","Totals / Real","reagent tank current volume in percentage"
"TT8","FLAGS = REST_READONLY","TTMassConsuOut","","Total media mass consumed of the outter plates"
"TT9","FLAGS = REST_READONLY","TTMediaPerOut","","percentage of outer plate media remaining since last plate reset"
"TT10","FLAGS = REST_READONLY","TTMasConsuIn","","Total media mass consumed of the inner plates"
"TT11","FLAGS = REST_READONLY","TTMediaPercIn","","Percentage left of the inner plates"
"W0","FLAGS =","WAmpFeedback","Raw/ Real","raw galvanostat amperage feedback value (see module/scale for ranges)"
"W1","FLAGS =","WConductivity","Raw/ Real","raw conductivity sensor value (see module/scale for ranges)"
"W2","FLAGS =","WORP","Raw/ Real","raw orp value (see module/scale for ranges)"
"W3","FLAGS =","WTempInlet","Raw/ Real","raw temperature inlet value (see module/scale for ranges)"
"W4","FLAGS =","WTempOutlet","Raw/ Real","raw temperature outlet value (see module/scale for ranges)"
"W5","FLAGS =","WFlowInRate","Raw/ Real","raw incoming rate value (see module/scale for ranges)"
"W6","FLAGS =","WpH","Raw/ Real","raw pH sensor value (see module/scale for ranges)"
"W7","FLAGS =","WVoltFeedback","Raw/ Real","raw galvanostat voltage feedback value (see module/scale for ranges)"
"W8","FLAGS =","WTankLevel","Raw/ Real","raw level sensor value (see module/scale for ranges)"
"SC0","FLAGS =","SCAmpFbInMin","Scale / Real","scales for amperage feedbacks"
"SC1","FLAGS =","SCAmpFbInMax","Scale / Real","scales for amperage feedbacks"
"SC2","FLAGS =","SCAmpFbOutMin","Scale / Real","scales for amperage feedbacks"
"SC3","FLAGS =","SCAmpFbOutMax","Scale / Real","scales for amperage feedbacks"
"SC4","FLAGS =","SCCondInMin","Scale / Real","scales for conductivity"
"SC5","FLAGS =","SCCondInMax","Scale / Real","scales for conductivity"
"SC6","FLAGS =","SCCondOutMin","Scale / Real","scales for conductivity"
"SC7","FLAGS =","SCCondOutMax","Scale / Real","scales for conductivity"
"SC8","FLAGS =","SCOrpInMin","Scale / Real","scales for orp"
"SC9","FLAGS =","SCOrpInMax","Scale / Real","scales for orp"
"SC10","FLAGS =","SCOrpOutMin","Scale / Real","scales for orp"
"SC11","FLAGS =","SCOrpOutMax","Scale / Real","scales for orp"
"SC12","FLAGS =","SCTempInInMin","Scale / Real","scales for temp in"
"SC13","FLAGS =","SCTempInInMax","Scale / Real","scales for temp in"
"SC14","FLAGS =","SCTempInOutMin","Scale / Real","scales for temp in"
"SC15","FLAGS =","SCTempInOutMax","Scale / Real","scales for temp in"
"SC16","FLAGS =","SCTempOutInMin","Scale / Real","scales for temp out"
"SC17","FLAGS =","SCTempOutInMax","Scale / Real","scales for temp out"
"SC18","FLAGS =","SCTempOutOutMin","Scale / Real","scales for temp out"
"SC19","FLAGS =","SCTempOutOutMax","Scale / Real","scales for temp out"
"SC20","FLAGS =","SCFlowInMin","Scale / Real","scales for flow in rate"
"SC21","FLAGS =","SCFlowInMax","Scale / Real","scales for flow in rate"
"SC22","FLAGS =","SCFlowOutMin","Scale / Real","scales for flow in rate"
"SC23","FLAGS =","SCFlowOutMax","Scale / Real","scales for flow in rate"
"SC24","FLAGS =","SCpHInMin","Scale / Real","scales for pH"
"SC25","FLAGS =","SCpHInMax","Scale / Real","scales for pH"
"SC26","FLAGS =","SCpHOutMin","Scale / Real","scales for pH"
"SC27","FLAGS =","SCpHOutMax","Scale / Real","scales for pH"
"SC28","FLAGS =","SCVoltFbInMin","Scale / Real","scales for voltage feedback"
"SC29","FLAGS =","SCVoltFbInMax","Scale / Real","scales for voltage feedback"
"SC30","FLAGS =","SCVoltFbOutMin","Scale / Real","scales for voltage feedback"
"SC31","FLAGS =","SCVoltFbOutMax","Scale / Real","scales for voltage feedback"
"SC32","FLAGS =","SCTankLvInMin","Scale / Real","scales for tank level"
"SC33","FLAGS =","SCTankLvInMax","Scale / Real","scales for tank level"
"SC34","FLAGS =","SCTankLvOutMin","Scale / Real","scales for tank level"
"SC35","FLAGS =","SCTankLvOutMax","Scale / Real","scales for tank level"
"SC36","FLAGS =","SCAmpOutInMin","Scale / Real","scales for amperage out"
"SC37","FLAGS =","SCAmpOutInMax","Scale / Real","scales for amperage out"
"SC38","FLAGS =","SCAmpOutOutMin","Scale / Real","scales for amperage out"
"SC39","FLAGS =","SCAmpOutOutMax","Scale / Real","scales for amperage out"
"SC40","FLAGS =","SCDrainRtInMin","Scale / Real","scales for drain pump rate"
"SC41","FLAGS =","SCDrainRtInMax","Scale / Real","scales for drain pump rate"
"SC42","FLAGS =","SCDrainRtOutMin","Scale / Real","scales for drain pump rate"
"SC43","FLAGS =","SCDrainRtOutMax","Scale / Real","scales for drain pump rate"
"SC44","FLAGS =","SCReagntRtInMin","Scale / Real","scales for ragent pump rate"
"SC45","FLAGS =","SCReagntRtInMax","Scale / Real","scales for ragent pump rate"
"SC46","FLAGS =","SCReagntRtOutMin","Scale / Real","scales for ragent pump rate"
"SC47","FLAGS =","SCReagntRtOutMax","Scale / Real","scales for ragent pump rate"
"SC48","FLAGS =","SCpHRawMin","Scale / Real","scales for PID acid pump pH"
"SC49","FLAGS =","SCpHRawMax","Scale / Real","scales for PID acid pump pH"
"SC50","FLAGS =","SCpHEngMin","Scale / Real","scales for PID acid pump pH"
"SC51","FLAGS =","SCpHEngMax","Scale / Real","scales for PID acid pump pH"
"SC52","FLAGS =","SCFlowRawMin","Scale / Real","scales for PID proportional valve flow rate in lpm"
"SC53","FLAGS =","SCFlowRawMax","Scale / Real","scales for PID proportional valve flow rate in lpm"
"SC54","FLAGS =","SCFlowEngMin","Scale / Real","scales for PID proportional valve flow rate in lpm"
"SC55","FLAGS =","SCFlowEngMax","Scale / Real","scales for PID proportional valve flow rate in lpm"
"SC56","FLAGS =","SCCondRawMin","Scale / Real","scales for PID conductivity acid flow rate in mS"
"SC57","FLAGS =","SCCondRawMax","Scale / Real","scales for PID conductivity acid flow rate in mS"
"SC58","FLAGS =","SCCondEngMin","Scale / Real","scales for PID conductivity acid flow rate in mS"
"SC59","FLAGS =","SCCondEngMax","Scale / Real","scales for PID conductivity acid flow rate in mS"
"SE0","FLAGS =","SEWebDirSuc","File / Bit","success of web directory creation"
"SE1","FLAGS =","SEWebDirErr","File / Bit","error of web directory creation"
"SE2","FLAGS =","SEWebFile1Suc","File / Bit","success of web copy file 1"
"SE3","FLAGS =","SEWebFile1Err","File / Bit","error of web copy file 1"
"SE4","FLAGS =","SEWebFile2Suc","File / Bit","success of web copy file 2"
"SE5","FLAGS =","SEWebFile2Err","File / Bit","error of web copy file 2"
"ProgInfo","FLAGS =","PInfo","Program Struct","program monitors conditions that may affect future operations"
"ProgErrors","FLAGS =","PErrors","Program Struct","program monitors conditions that may halt processing and require assistance"
"TaskUltrasonics","FLAGS =","TUltrasonics","Task Struct","task starts/stops ultrasonics for the generator flow cell"
"TaskPolarity","FLAGS =","TPolarity","Task Struct","task starts/stops polarity for the generator flow cell"
"ProgWarnings","FLAGS =","PWarnings","Program Struct","program monitors conditions that may pause generation but also may recover"
"TaskGalvanostat","FLAGS =","TGalvanostat","Task Struct","task starts/stops galvanostat for the generator flow cell"
"TaskAcidPumpPID","FLAGS =","TAcidPumpPID","Task Struct","task adjusts acid pump rate to meet target pH level using PID"
"AcidPumpCtlPID","FLAGS =","PIDAcidPumpCtl","PID","routine for acid pump"
"AcidPumpCtlPID.SP","FLAGS =","PIDAcidPumpCtl.S","PID","routine for acid pump set point"
"RS_0","FLAGS =","RSAcidPumpPID","RampSoak Struct","ramp soak structure for acid pump PID"
"TaskLoadWebPages","FLAGS =","TLoadWebPages","Task Struct","task refreshes web user pages from SD card to RAM"
"PropValveCtlPID","FLAGS =","PIDPropValveCtl","PID","routine for flow control with proportional valve"
"PropValveCtlPID.SP","FLAGS =","PIDPropValveCtl.","PID","routine for flow control with proportional valve"
"TaskPropValvePID","FLAGS =","TPropValvePID","Task Strut","task adjusts proportional valve to meet flow rate target level using PID"
"RS_1","FLAGS =","RSPropValvePID","RampSoak Struct","ramp soak structure for proportional valve PID"
"ConductvyCtlPID","FLAGS =","PIDConductvyCtl","PID","routine for conductivity to acid pump"
"ConductvyCtlPID.SP","FLAGS =","","PID","routine for conductivity to acid pump"
"TaskConductvyPID","FLAGS =","TConductvyPID","Task Struct","task adjusts acid pump rate to meet target conductivity level using PID"
"RS_2","FLAGS =","RSConductvyPID","RampSoak Struct","ramp soak structure for conductivity acid PID"
"SK1","FLAGS =","SM_Idle","4","system mode: idle"
"SK2","FLAGS =","SM_Running","3","system mode: running"
"SK3","FLAGS =","SM_Stopped","1","system mode: stopped"
"SK4","FLAGS =","SM_Halted","10","system mode: halted"
"SK5","FLAGS =","A_VoltAlarm","220","alarm code: AVoltAlarm"
"SK6","FLAGS =","A_CondRange","30","alarm code: ACondRange"
"SK7","FLAGS =","A_NoAlarm","0","alarm code: ANoAlarm"
"SK8","FLAGS =","A_ReagntOverFlow","190","alarm code: AReagntOverFlow"
"SK9","FLAGS =","A_GenEmpty","105",""
"SK10","FLAGS =","A_TempAlarm","200","alarm code: ATempAlarm"
"SK11","FLAGS =","A_FlowRange","60","alarm code: AFlowRange"
"SK12","FLAGS =","A_pHRange","160","alarm code: ApHRange"
"SK13","FLAGS =","A_ORPRange","140","alarm code: AORPRange"
"SK14","FLAGS =","A_GenNotFull","100","alarm code: AGenNoFull"
"SK15","FLAGS =","A_VoltInfo","230","alarm code: AVoltInfo"
"SK16","FLAGS =","A_AcidTankEmpty","10","alarm code:AAcidTankEmpty"
"SK17","FLAGS =","A_AcidTankLow","20","alarm code: AAcidTankLow"
"SK18","FLAGS =","A_GenEmptyTO","115",""
"SK19","FLAGS =","N_ReagTankOverHy","260",""
"SK20","FLAGS =","A_InPlatesInfo","270",""
"SK21","FLAGS =","A_OutPlatesInfo","130","alarm code: AMediaInfo"
"SK22","FLAGS =","A_OutPlatesAlarm","120","alarm code: AMediaAlarm"
"SK23","FLAGS =","A_ORPRangeTO","150","alarm code: AORPRangeTO"
"SK24","FLAGS =","A_pHRangeTO","170","alarm code: ApHRangeTO"
"SK25","FLAGS =","A_CondRangeTO","40","alarm code: ACondRangeTO"
"SK26","FLAGS =","A_FlowRangeTO","70","alarm code: AFlowRangeTO"
"SK27","FLAGS =","A_TempInfo","210","alarm code: ATempInfo"
"SK28","FLAGS =","A_GenNotFullTO","110","alarm code: AGenNotFullTO"
"SK29","FLAGS =","N_InPlates","275",""
"SK30","FLAGS =","N_OutPlates","280",""
"SK31","FLAGS =","A_LoadWebPages","122","alarm code: ALoadWebPages"
"SK32","FLAGS =","N_ReagTankFull","240",""
"SK33","FLAGS =","N_ReagTankEmpty","250",""
"SK34","FLAGS =","SM_Standby","5","system mode: standby"
"SK35","FLAGS =","SM_Starting","2",""
"SK36","FLAGS =","SM_Stopping","6",""
"SK37","FLAGS =","SM_RemoteDisable","7",""
"SK38","FLAGS =","A_StartupTimeout","290",""
"US0","FLAGS =","_TRinsing","Task Struct","TRinsing","TaskRinsing","t"
#END

