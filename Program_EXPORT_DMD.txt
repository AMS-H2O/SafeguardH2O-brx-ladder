// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database w/Flags;
// System Configuration; Memory Configuration/Devices with Built-In Types and User Add-Ons;
// use Element names (no NickNames); rung/address annotations;
// <TAB> parameter delimiter; 
// Write/overwrite file C:\Users\marcp\OneDrive\Documents\[02]Work\[01]AMS\[05]SafeguardH2O\SetupDmD_v2_9_4\SafeguardH2O-brx-ladder\Program_EXPORT_DMD.txt

PLC BX-DM1E-M-D

// Do not modify SYS_CONFIG block!

#BEGIN SYS_CONFIG
ea7068c9b9807268bef217f1e802c7ab45ca171ec9ba2c1410f21ff24d4a2a8227ced95ed27bd06f
9be3cb143979e7d97d5570cf5fa8f51ac59d696355fdade7cfccff137eff838d7830c6cb350a8a43
5ea735f1ab6cd4722c8972015501200ed1478b8592e7511a9d0bd67656412ad0fc8a61814a8e888d
f9f27ab3b58512d85d64131be71c60b7f4ecd81aebd3fb0ee79365c9eb7e7bc160edfa8197a62e0b
9cda71b8f93240406897003706df20f282b4849f003ed544f58da559edaee4db44641cb4e7c753da
79efd52dcb295aa691c0f657a1e2919e1d0061cccd730b1f053acb15c1212f3f68f103e318601ae6
56ea0cfda1dcb7ab60273e27cc6b6f3d74d2b290c0c12e29842a3cc09839cd688aed6faa347fda31
73513ed559a384118f59ac4d0bb031c08837717c7ddb97c27da8c8369b7e89cd24d7874c72114b5a
32030149d24b605a9a531e3e0e09ba6c39a3f8a1c4e16288abeb6cd332d5299b2dce250e3c6fec08
ea160f1c143d00210e1acf794f34fa35cbbc012cbe6bbf68b0212276bcb48da7ce6cafbbcc9a9076
c082913c106048aa9208a9ce71f33e6839e8c6f06b7215dc3056d88076198a2b1ec34dd4e32aadc6
05ee24c2287134dbf50460b6715d58f530aed7d8f922f2d799420717a00877397e5fc6bb1f255fdb
4f59534f8d916bb505b2fa214dc66197c0d72f2cb00be436956aa158a0c8756ca7885ead4176ccc1
9b1a65513d7a6b04b59efb27833793133ca3a3b8ffa3857079461e16ddc2aa0e296bc685d2ee0920
9d5e142944e09447af3eaf9c2bbe26e3999d285f1280faa95c9c3db0f8a067ebcd94a36ac27d2f69
f7d9e524965b13c25763a4dedd968200b26f644a649990599843070a59af8dbcd8a6f89a490b562d
ef030e3e277b163cc697e4fa3378eb5d5261488a42bde7a55e7a9e092c370985dbe57682ceeaa57d
a4c93d6c9976b0377d03e4ad9b3b10f32afde21b01ac6d6f3d23e9e8ac9e298e0353e1e91a94d26d
3c7bf63c6906f62878b3c21691b8f1eeee573566375c382c8a1f9b52e95b497d3072963f0040647a
9f6353559db3924bc31541d54a115e31b6981d5ef77cb8cc24b5c64dea8da95cabbf049d19de2582
8d637f0112de78031321b5b41e97f7e7a28b86bc9ea3d8c529233d0b3fc3f9582fcf6be1e0d5e682
74d10f158f7047fc527c605a43d57c29cbd15a5aa43ba9da2765775d34630f9d972dd95812c08bb5
ff476193171d56d54a91ce645c234956c3e6c5ba68af9564faff588678dfe8ae0761ad7ca842b1fd
01bb91af13a93edbd26d7ddbe18331209a2d10077b9668f3b0e27997cbebeb8196bfefd2ede89a61
481f326ca150f7f479cb16bad23d24f76b8a893eb047f25a687ebfac9ad936d54abbdb0eea14f1c7
da73a9b9a8e69f90f9ce9ca57b8e5a2e3ada45f575ad3fac6aa68d8b79097e888f942941754c9445
d06c6198ec40d6c354a515994534f6b2a9c28874fe69bb91ad7ebb3dde86364c7e9cf8b04bbd92fd
62dc9e5cc95f5a854b87c01406fb157dca5ab784d3644d32a1d1db00205cd5826f33e1c9fff1474b
19c57dc5d2c996fb22657065758a3d0ba528ecac8b8fd1c2bf668e62e6ccd38c39d96302f3b94a9c
8d65c99813d28c53f66e473e1db75cd4c1f83abb6488db6d0c974f223ab633160ee0a95a1d54125e
7f12eecd2005d23add82e514ba99073f15144c7b25e84dca045ccb50aa17416070b38370a9d9d5b9
f9e4d5e5813c49691738aea703861410b27483f7a6f7d52c8edf3c97ba88eed7c1dddd0274dc7cf1
b27fce2043c39d5a7fe56e41b35dd35cc0da642d3653f3c5e62bcf048e9324ca4e4d2cb8c3c65d81
cd2ca9313c2849c51f50634c2a962ecdf849edc6b867a510bf1857c123aa70ff0245341a2aeeb359
e92ccf33ab22f22ebcb058d1b1d7f2772890d3e782cd992abdbe1e2052a929e32bf40b7492d129d5
1a3a65fc063736f2a2beec21c3002cfa9c1c924b8f61a731a8965a2fcc8bd8eb4a38c84f3bcd8b0b
d37a50e2702ca66a84674fe689ba20f4c95515fa6e9c6b1d151ed3bb3ccbacf723a9ba8107d32e8f
191b7332a1273acd7cb296198ec0e81eab2dc327629cfaeeb891748c0fa9861728bc31ad3160d1ef
633a7fcc6d1197aa3d34685b3e2ed9eb627cb63c31d73f48bbee44383eb2aeb186960dfef99b76f2
6743441ba4b345b6126e99b530927b8d3244cbb767e7cd325937e1919b83fee6eb87a3fe19bb7219
654e1ee4a6e4a0b18fe28079bd2e4a93253c61946caa819883e3aadcc0153b17bd34d311238a2896
4d6213171ce06406c7e3358d656d2c121cdd45e0c7c0ac31b2b515ce1438ddef8112819e7d8ea19c
77d3413ce8c290447ae4c98a7ddcade88d74bd7f29340e4480fce6817caa4ff50a32ed1da69eafda
f75e7e6707047ece8fbc98b8ef0ff008758de2adf3f85448bcbbffc1a48775df4b5bd5adc5841bf6
8b1513656d9952fe0ded72c7dd8cec90837a5fc960a991115af316b08e96801ea4d166a68ef39893
40bafe7cffb06ca3e30210c94b79a5a5218968fde3a288eeb377435f89a0cde6f10c5f2fcb2c19a2
34cd314344832ae359e4c7b58040fbcd1aba5a00fb7a98eae830e07957844f447eef91f3a9ef49a9
3861591f940eaaf2173961482cde9c2912943659392d1b07e9aed918315c90518afe8058d1c73262
1e31ba86735508cad4448a2bd7b982ae8d3376c9ad8cbc62dd1fa4c75b83e4ad05af528fa8095990
6c092290463e056dcfaf0d568dbb37604998df0150ee3c73b989d154f37afbdd577fd10f1cda0723
f479f6a60d128b821331ba9fc514af777f936c313902e6fcf21ab7e20e9f39aeba135b64342dd6fe
54d0651948d36383ab1194c7fc8e44a7fcedff233f58cc8b3fd130ab594afc99dc617e900007ed50
73d74e90e3c10302f0c274927148bc3cc060eefd556974d330550da3a3da3635d6419c3eba293e02
e0f265b05757ca19c8f4678750dd099f016b33263d625785e7b9fa48cddefbf2262449919d3c0924
61b04d0e4ce712ec908592ca2a359c7e0d2efa929fe166a19f7cc37dfe13316bb523bdf01a30485f
2bce2310b4fdc14bf08b7f321a8cf0e6011be702e26457b50eab178bc2d35389aa8377f1bfc37f79
aba1bd894166c5ae5b3890925e8e7b4e2fddc50dbe79db3d0d9bfe1f442ebcf413ee34fd82685484
6a2633d09d3ab806358c2ff165fc89b683e5c5d7588c63f51e05abe65f752b32922f8d5d6ecdef43
8c905e08f41812f4e8a61d3062434f007cc08650bec2b088198c4096afd61c77f032399049174943
a4a6beeb0f03e366cbadb3fa28b2fd95edeebf37de62102f301ac6c64038b05bab756d979e87a23e
2bc534f80061fd9d75129a3858181de1976c11360db426e38e86bd977d38ba8c3862fb3709233f8b
55dae9e782f8148cee62b837e05be0112a3bba4a3cf984a39821b2773498d1a7663f0914f3d226d4
2d69612485c9c39d48ad6b19e32181aff3a5e2b16e0ea4bbb364fe5f182bf34ee69101a9220c225f
cbcb8fedd397165878010e3b95d85bd07ff7e1c30d207e48e64efaaa2d6b3f5aa4d2fc91850785ff
d216314c988bffcbbefaab7de9ca05e4cccd7d2af9c5c8a147a0738299b4b92b86419e9d84032610
8a08961bfd01ec23c2ea07f7c321a893cd26bb18addf8ab52ba1efcfb685b002c90b6f8f5505c0e7
9a56c7556d185c0dd428d70d1ec6e356940fdb5d097197d0c276a02f933f622c2e2d99d354257c39
3075d49891afbf8e923cee4431b933836e3d1a7bd1cec61228e1db873af2e2ac4fc6fda34c71be61
7e45684240a732f2c82da764f3afe6386f4621e310ca63d8f09166226af2657887b9d78e5b05accb
1489e4904e2d87984017c60c217fa90147308e22bff3c5757822fddc644b128872d7cc91065a5bd0
7f51e738127d43547d908b5f9e6d2daf2e33ccf28a03cde6e98b345f35800fa4b84c3a76a220bc01
2289c828f4e7512e046b55e2ca775c3dcace81833ca121c13d2128cb042a76209dbea4104d043620
a25dc5ad2c850324b41c978f01fd6a6a2e4c717574664e1b783d40ca9c7ea9b78df69153a03a907b
61b57487c9cbfcf40adf697f4d2397e5e8f41195b43d8825bf7cb9ae29f3e0dc24e49adf89dcf681
c27e17adf6d8e80f95a86c0e1444b8deac9b5de215a1241ca526064b513c2f4dad9481c9931a63fb
541538b0f5cce7eedaebc472b5d9ab237399297a0a69b23d10dbb4a57508f223f9b9f1ecfdfe2a02
4f563cf117678f288c87f9b9bc40f609dde4df66f4f1a45b1d951ec0ee3f38e23da49cd8aeb6d785
02224b1be853e884b33ffffd5e14f889c66d47583ad5bed452b775c73fc962ac0b76fa6bb98188b3
874bb7aeae0d47cbbf6a9be3096a5d73fa85af5d2da93aec4bad80dc6ac9550d3e006de58bbd1a11
dc3b3a786db2d8efc1453ac2736e27194e7fc9f2be0397277c12b977f403c376083e788be768a8a9
db4f7a4191b4643effd96e290c3aa64108e6b30f4f8ffbc78f885826bf9da969a8e0009d1df8c03c
b79ea775893080f525e683d27ac0b82495a5c648eef61027bfd4e35a72a7abe58558f78a28039008
2f485e362f9f938e174436e42432e657041c63e83d0bd2ad44cf9a4daeeee716b6a0ead62a23a1a3
c097acac3c633fab1c2a495e3e9650d730c923684bec26038e1f8233edc354595d72c25275063525
05d8010456979487e17a4f677e213709b9a47126f5d49b0842dedd66a932920b52d684bc9c482765
09f3d07822d6ea99c27eb12a8aff748db34cbf24db0a3a2352413e5aeb09ce73ce1c7e4311deb483
b3a78a675f46d778c41adfa7dd3e4ee8e18a4750fa3a77e54d036ac842c15e1b4f88bf9d8076435d
735bd2041aeaed87ba3c5422a6bdca4dc5350dba4695982b017818cc11a76f7607146b7f28f17e95
9a04656aadd734554fcb997b93553856dceb6d5273ce019a3aa1befd1723f42de1cba49755c8bf31
09a9f892c6643ba6d5f1b6b3da27c79ab9a777603ae236c152f606877151c000397847874cc15f38
178446007d675b36e316f94fd2f85a6603b509a9f1d26d11815d26edbd38e28ed1aba12d02254d89
12107e4d54ad8dafd12ee75a4c3d9517bc8e50432326c2124775b4738e1d9cd3da93f5066b6dc43b
fdecd7b82e49af0e9b6909ce905dc49f99c20d19840ffd52b72c1cd13a945db6910203a74002d778
31c3e87be465cf75dfa3072822bc37a950bb04a0d2e2bfb43dd8adc22aae7743fe51f9c83b58dd22
3933498b66a3c91c46e7ec59c62003e583d878e746c818c12131c08fb8b194e728be0f7c3f75fbdf
0bc12a20bde0d5ad2d6918126589e4daa12ca82a55b8fa076555fa6d94e00f1b327ac96db22c01b8
87afd802409a5f8b726769e60271a9463fb0f0c1e37993855c034c4d3e6f07969697ede82871f5b7
d042b36e91c3509d664a88bac2ec40d96cb256d0a1490025241f43ab847e9f8c3fa5757ec789c589
c449fc50808ecfd5a9a3dcb31616b434b8981c1a431312bced62abd869a71652796b7f426d61df57
4b2528e2ff26da604bd602e33088ec2bcd5c33fac42fb2b37f62d5d68da05927e6bea25713d25191
c1f0b2be3f654f99334db232da7128ac332c16a9692ebbfc1026c235c9e39ab54adaeb82b2ecf6f2
0341707f4f416093a6689bcad6fc94631ff3ebb5280443825793d77a4174174903bf2cabddaded34
d1e0aac695683c3f110976fa8eba2f13ade7a3f0ca951d71c8400c30950a523f3e2b900116c36de6
e3410ae234b492a9d78b54d69f3862ab002bbfcd11cf38fe27980f0cae15d0e30e9918d5b5808309
b4dd9db9e1898cec7d60b2c95922d45f36319b31ae8cb2aa6e945fc1caa47e5348b2f336a91522e6
83295d4c0f90a0c702e88290c2a190e7f20807b5ff7e6ced52259c6d6e8d57579404146c7f4f2f55
2a754a09e668004ea7ab51e556fb314ae693205106058d2fa46f685e5bf77cd2a67da54b4a7d3ec9
c4e18dae01a376493cce862cf62c5a509dff3484cd1f489e51e4a1712a4a3d862293dd81e91fae90
04354b972c8116632f04f98ee39cc0ce2baf056d682b84e55fbf97056b352a4cdfdffe2ba028b6c5
ee4274169c4c6d66d574b1aed030794da3a0aba8e0d87eeb8ac83edc5fd7ee13199ab3668905800d
27b47ebc51ef6d25069d03b6ca4579782870e6a990fa1afc1ec4eb6df5fb07a43faa44de3620ac35
09148f4aaf57ab6a951b6b1c7cc2358d5b3a0516bd854e3aabbe82c8c2b3fd233feaa4019c4328f5
44ff40cf9142c8677d89fc54fd3515b396e4c803daaa0dbab06c5f7afa17ea605427dcf22c99edc6
1a49f497a2e76116ddf8e0b7f07855a91678b1cc9932a6c4cde643866b249c08a33763565d8fba06
3ad5bd9946bab52c1883473ce3e98e4a351e7af60d8d2866584849891afafc24cd864279556e8831
dd12b02e48e8531ca353bccf81dd430d1623e559f3de966154080b6524b12e7f179c080be07c3b23
31f18c4a5048445f1900b42609c56ea8e556282ae97b4ee5043d34ef7b576aba58fea67e731a65b6
d5c45434ac8ca060c827b03ff18863079677eda5014d0fc58a92f0f6c8bd1456ea1c5d9a3caeb1d9
c0b98b82fdacadd286579ad6e207a1954f9bc64ee593bd797bfec0f78e392d12907c0d58f9a4e5aa
d4b63fdfaf7a5a8283626a6a789a6973670ddaeb663e05c0ddaea6552c2d8439aaea704b43264160
6c9f02449fb61dfd5ab76011a568df828e59c668085763cf0c67ff4d76fd04291ef73b208f0c8682
d1cbf6f0b27540a0f2559917f0c0db7f8cca4b132f990df8367b8f6834544579cf5b00cf035d6603
8ced1b845573aa7927320c14e9c3927e978787ebf05e872479781196b43592dd6e1d2789531c6a88
4fce5b0564c66dedc91bb31144879da2a31caf66542469c2dc8f6ada88e0cc4cb663102ad1e4f1ce
f1124c18a641223e03169e0359a87d7855997542309bdc61248a4ddc9111a2a5b7ab96242d6cc7d3
4b8ebbdae2d4cf88ba144c8b0c9222bdf64df99a42d6c509e692eb3921dfbbcfa28ecec93bc6a6af
7e2028d802aea940626863481eea297e238efddb822098c2b9d04ddb5fac5ba92defa8c93a1dce3e
befa97047a60722d867d2fbe2781c22d12baf4abb70dc6e7106f336b0885f706076c74fd15f6f244
c93609b44992593e7167a87d8c1021293aae94894b32204e7736d8eb6b86ae861bc4660ff70f7a13
ea9a1f0941f53ba4752d97e9e929a95a062b8a3dc00a41e66538c2b2c8854d7a9ef04618bc9d92d9
93ce859e856fb50500d121c872d30851cd878324c36dc768ffdf14809d91ab8270153c719b2a0ffe
81f7ad984abc39c119a2dd6e445cd13212e11d2aad1fefeaec47ef154940bc06d7b84855ffa99767
7638affaf54cb381aa4aa7e1abf2512d42c387e009aa03d05a3304ea38742e55cb5ca0d0344188c7
cdb8c98f5192b44c6ffd7dd2944b46a835c96a1948a73594bd16d947e8aa57997aa8bdfe30dd0699
97baf66cc3665460987dcd0caf4fe89f7da579c703861586321888495a1822bd94d777c8f5976298
945ac8699c2913480fe2eab663da3590557ca10654381a43efb7104c0f87a853220094739da2e415
854d80dd1f398196e057989f1e925378ceb024d08d89a3025b0a52ed494c7d53279e0350134e9e5c
821050f7915565d95a02cc50da7483ff6be7ddd3e5befa6367eb6d87ac88419db72c289af007f2e8
3a262d775c75d626890e3172c7164d1c712b482638b362ed55860bf6386743b203d9a1a4b1ed3224
9817cec80949b70cfd9df3fdfc6d200c7fadef1b5f1d7a1f9e70d7b4e84cb224d2707ff96c9b4b77
83de28d36144c18c7d71aa411afeea2e69cb85b239c48b2153545b4f73eb5cd9a387f99a53056ac3
f65722354767d7cf87d429a40f4f7d4c44cb0631afdc7bd6db0a36ce90393e7516b282b6e2ec74d2
75a2eb575acc0f9735f1891b80b29db62fcab91ad8e5640b95cd3c7be2326d70809e9f4421024c89
5b04fa872b5ce1303cebf571e6461528ee11ba811e5b85f9f1a9d66c0b7c4785825c339c3856a5b6
1e15b7adddaf3c4cfa4b01acaed1f8583c5dca32dc84f11c1f5df048e4f06e95d931a732f272aae7
b3009793cec3299989245042c3900ee3f961a574038f5bde7c779f303bcb36fbc70bca476a8c94c7
c5f72de03b2375bf169ac8388ff3b3154ae6bb99fb8078cff404c4f355eb0f3ae3ff63fb9fc0cc34
1d66e87eef1f521f7b3850bab690d0c5bc40f49edfea6f0cd9368095979add5add3c7b1559c83e80
faf3f4be35add659c3996b45f0e12092956c7cfc693e30761c658afec98d3e55ce288022fe80fcfb
1cf96a553e2b9976e7ea125896aef2ddc1d3c2e2ad36275b24e0f51f3a53f51b677089b646fc879e
036a5defbf9a1ed9eddd171b490819167685dcb80a48041de162f891b5373d3c8f2a01a2bed7d7ff
166f3caaf2ca572235726cb5ed74ba0b509176e5005856bbd45326ae6a602e3db592b1c03ad32cfa
abbec024a56b098acbbe74a7a794fea9d73c11f2fdc919f491013efc871a052af0a609eafedd60a8
32452551882ece7f9eab2c35e6e6583578e3dbab9d9d5f51dce76259215eecdd5a792f6898c5d493
488857e3ed1618af6cf07f0f6e85083dec9ca8a3743afa30ef88c1b544e407ab6a4f179f902e0e59
932c4e7d9dbee3336813f69aa54732834ab2ca19abc36346ea2b310a86c1c6a5082e19b9c29e4d8c
bf0d1a176d472a108e43a70e0ab61854ed35b7154046f1faf78424f711b882c1d7ed03880d7f2d9e
357349a0898dc5c7e28914c02e77239b51f0abca33aacb7d68954258b3f4d62fb19ad8621bac7ebd
7e0438e81d0acd997cd1effbb20843e26ae125f519e78d13eb5a4dfefad3bd858b11e1e53b3bf5bf
50db2fac9119a1251f19d6ff718bede0d3ef3df325102a987a373ebf16630fbe94d783edd03f7153
fcf183fdf8d44af8ddc85b47de40395eb9550cc9fcf415ac3040899d34cf6aff84647e33967ad0a7
4d17f6dbee68da0da9414da23c142f29b042cca87e084469d37f8decf185f19f8458102980d4e53a
c8dd2b1afefba809f6c87ac96c411fd3e277df861dd90e63a4c10168dfbfe97dc51e269b70dfc32d
6456554a25e867ca9e2ea3dac1da5767c04a4e7c95d1fd979346678026dd9011fe4ea77feb0141c3
3c819d16ad3e7b231d351c125bad6c11965f33d0b1c1db2709f533881de2ab1f49aa496679238018
0258d2c637014a65ae0b2b9e45aa3ca6e9354fe0701f6a907faca0f36f15e3924ba6935f290ac489
127eefa595fabb771b98ad4979efb6ec1e8ece30b036752486b94aa2e5f36e725d1ae2f3d379274a
25c8feaf5b2b6238ecc1e294bc3494ccb12d48f8b9578213311a3c009e7b0db8c87b688dadd35e47
582d87b517996bba44bd12f7cc1a0bdc3442a75b519a88072c4046c99a5bab332e7a28ebd7b25bca
d36c890368df64f8c2d840c93f0320ebb1434a318c84aa8a06c89f6a5daf237f328f6b4cd787f368
8f13e93f7586578d75fb3c582c27f1f8d8c8339163dd0f5f64a6b0c5ec6847c3e69b4fab7c53c574
99fc9e0cc4a641a5bedaf24a6296d136a09e4e222c1329720f30484a4d09fe072a521929e2983fb5
28214ca5d5e7a8f08405cb85fe1c6ccbc895b540254db92582d86b56b2b1732dda472e003db60a28
f2b44670970d0398899ed2f61011daa12d4dd16562c03f07fc38d70896ae1e6e8af151129c33b5d6
a14e4dcf032d3c4cfc9535dcefeabe04190a15bfa3a7c2904be02a0e39a78ac21c1a69b3e89a2a51
3c175ff4299038b8f93743208696930594319e80b3e88d0e15459eb9f0526c6cf859218e24708633
7c8580ed0cdbbe1a39a556f5ab68804bfe94786d24e85198bcc840a7efc22aebbf597870cb012b4c
7c84f89db32e1c4edce6eb00f751709242da32588689e12818ddb19be300b471fd7f98a72f440f07
15449dd1f4c7445a423fb12f141405e1afc4b6b4c06d26e93fabcc3cb46bcabd67e7aa8f8f446a16
49083511f34c8f8542d795242f5bc3b13094a988c1fa2aef25eec4cdecb0aa9e918fdfb81ff066ee
0c989a3f91b19a5e62ca6026849877d8a21a9098038266d2e4d3bfcfe8abc8d9b508c3ae849b75b1
d9219e90d3cae4159810ce829475b25e2021c424843a52230d02e13bbbbca6567af907c960d27514
86b3477dd9c4a9f25cdbb20d9a76006c3281cf522f903492de66a6428cce3bf518a733e21e30067b
1b3e2368f36ad3374f5c4f9ca60bf86dcebde54559cac4c4100c8a3207b85202f6b440ee8af4ca07
ff6559c0724d2598bd47f261e4badd0f533a780b2a46af8ed787320b0bfa91f875ff73c3aa4e4554
04cfe519637fc54a66e88a04a1531947ada25bdea3363eb3a77459bdaeb9356c0be1dae026901dca
48e980fd16262a0fbde171f8e44a63318f38d118bff5e9fde4b4d92c45bf8c28fe50951fd6970994
47c0c91feabe2daecbf4f3695d12e78dd0e19d7137e255f6a1f85cc0d930d57441092b7242192468
10f37fff30c154f3649b8f13e5b42bf419a1654bc13dcc6e5e12ff8ef3af7296988f3f535d9e343a
acf508ddbf6d13013209092f0242907c813027d9a0bf9c5bc8c747ee08d6ff98e1d29d9da577fa80
89685ae49bf08f826969a798ab4b6ccb37e9e067fa35929af2dcfae7f6c301ed59f93c7e0d931f9b
79e0a7e4f6a0ac8e1b95d15c4a5a435da1e16a788cca6f162cd7d888688ab972e2bc2149fa0ff77f
20aa7e26d4ce6047
#END



#BEGIN DEVICE
	@LocalIOMaster, 12, 27
	@UserLog, 7, 11
	@IntEthernet, 4, 2
	@DMLogger, 5, 10
	@IntModTCPClient, 9, 14, 1000, 2, 60
	@IntSerial, 10, 15
	@RamFS, 1, 1
	@SDCardFS, 25, 1
	@IntEIPClient, 22, 31, 1000, 2, 60
	@IntEthDMPPClient, 23, 32, 50, 250, 2
	@POM, 24, 33
	@Axis0, 30, 35
	@Axis1, 31, 35
	@Axis2, 32, 35
	@Axis3, 33, 35
	@HsCtrTmr1, 14, 29
	@MyFTPClient, 32769, 38, 4294967295, 21, 30000, 4, amsftp@amshm.com, AMSwaterHM34896@!, ftp.amshm.com
	@MyHTTPClient, 32770, 8
	@SERIO_001_A, 16385, 24
	@SERIO_001_B, 17409, 24
	@SERIO_001_C, 18433, 24
	@SERIO_001_D, 19457, 24
#END

#BEGIN MEM_CONFIG
	X	BIT	decimal	2048	-1
	Y	BIT	decimal	2048	-1
	WX	SWORD	decimal	256	-1
	WY	SWORD	decimal	256	-1
	C	BIT	decimal	2048
	V	UWORD	decimal	4096
	N	SWORD	decimal	4096
	D	SDWORD	decimal	4096
	R	REAL	decimal	4096
	T	TIMER	decimal	256	-1
	CT	COUNTER	decimal	256
	SS	STRING	decimal	128
	SL	STRING	decimal	64
	UDT	DATETIME	decimal	32
	PL	UWORD	decimal	256
	DLX	BIT	octal	01000
	DLY	BIT	octal	01000
	DLC	BIT	octal	01000
	DLV	UWORD	octal	04000
	MI	BIT	decimal	1024
	MC	BIT	decimal	1024
	MIR	SWORD	decimal	2048
	MHR	SWORD	decimal	2048
	RX	REAL	decimal	256	-1
	RY	REAL	decimal	256	-1
	A	BIT	decimal	256	-1
	F	REAL	decimal	32
	B	BIT	decimal	256
	TO	SDWORD	decimal	32
	TT	REAL	decimal	16
	W	REAL	decimal	16
	SC	REAL	decimal	64
	SE	BIT	decimal	256
	MSG	STRING		0
	ERR	STRING		0
	SysName	STRING		0
	SysDesc	STRING		0
	SerialNum	STRING		0
	PartNum	STRING		0
	TaskGalvanostat	TASK		0	-1
	ProgInfo	PROGRAM		0	-1
	ProgErrors	PROGRAM		0	-1
	TaskUltrasonics	TASK		0	-1
	TaskPolarity	TASK		0	-1
	ProgDosingPump	PROGRAM		0	-1
	ProgWarnings	PROGRAM		0	-1
	TaskAcidPumpPID	TASK		0	-1
	AcidPumpCtlPID	PID		0
	RS_0	RAMPSOAK		0
	TaskLoadWebPages	TASK		0
	PropValveCtlPID	PID		0
	TaskPropValvePID	TASK		0	-1
	RS_1	RAMPSOAK		0
	ConductvyCtlPID	PID		0
	TaskConductvyPID	TASK		0	-1
	RS_2	RAMPSOAK		0
	TaskRoutineTest	TASK		0	-1
	TaskUpdPlatePerc	TASK		0	-1
	ProgNotices	PROGRAM		0	-1
	ProgStateMachine	PROGRAM		0	-1
	ProgDraining	PROGRAM		0	-1
	ProgAbortDrain	PROGRAM		0	-1
	ProgAbortRinsing	PROGRAM		0
	ProgRinsing	PROGRAM		0	-1
	TaskResetPlates	TASK		0	-1
	TaskFilterError	TASK		0	-1
#END

// Beginning of Code Block $tFirstScan
$TSK	$tFirstScan

// Rung $tFirstScan#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br>"
"<FONT tsize=5>$tFirstScan</FONT><br><FONT tsize=5></FONT> "
"<br>This is the first ladder task that is ran once when the "
"PLC is placed into RUN mode.  Just to be sure, internal "
"memory variables are initialized and any default "
"configurations can be reloaded.  If a program change "
"requires these to be reloaded, be sure to switch to program "
"mode then back to run mode either by physical or software "
"switch."
#END

NOP

// Rung $tFirstScan#2
// Offset 1
#BEGIN FMT_COMMENT 
"Reset local memory variable ranges/registers to zero when "
"PLC first starts up.  (If a nickname appears in the ""End"" "
"column, may need to increase the initialization range.)  If "
"an I/O was previously on when it shouldn't, it will be "
"reset at the bottom of the scan.  Note, not clearning "
"specific registers to be left as retentive in case they are "
"changed by UI operator (examples are target amperage, "
"polarity or ultrasonic timings)."
#END

STR	ST1
INIT	"3 C0 C70 0 A0 A33 0 B0 B48 0 F0 F23 0 W0 W15 0"
INIT	"3 R0 R7 0 R9 R47 0 D0 D3 0 D7 D23 0"

// Rung $tFirstScan#3
// Offset 32
#BEGIN FMT_COMMENT 
"Initialize specific modbus registers to 0."
#END

STR	ST1
INIT	"3 MC1 MC10 0 MC101 MC123 0"

// Rung $tFirstScan#4
// Offset 40
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C ENABLE/DISABLE "
"%3E%3E%3E%3E</FONT><br> <br>Set various enable/bypass "
"registers to test or enable/disable subsections of code.  "
"Not determined yet if from config file, retentive memory, "
"GUI, or other method.  Be sire to reset once done testing "
"and restart the PLC program mode for first scan to take "
"affect."
#END

STR	ST1
COPY	0x1	"4 0x0 0 C33 1 0x0 1 C26 1 0x0 1 C27 1 0x0 1 C28 1 0x0 1 C29 1 0x0 0 C24 1 0x0 0 C45 1 0x0 0 C47 1 0x0 1 C48 1 0x0 1 C38 1 0x0 0 C39 1 0x0 0 C50 1 0x0 1 C51 1 0x0 1 C52 1 0x0 0 C56 1 0x0 1 C34 1 0x0 1 C41 1 0x0 1 C42 1 0x0 1 C43 1 0x0 1 C59 1"

// Rung $tFirstScan#5
// Offset 65
#BEGIN FMT_COMMENT 
"Load or set default values to original hard-coded run-time "
"values.  Future could load configurations from common "
"sources (UI, file, LEDs, etc).  Not determined yet if from "
"config file, retentive memory, GUI, or other method."
#END

STR	ST1
COPY	0x1	"4 0x0 60 F3 1 0x0 10 F1 1 0x0 30 F2 1 0x0 70 F0 1 0x0 1.7 F10 1 0x0 1000 F4 1 0x0 1000 F9 1 0x0 2000 F7 1 0x0 2000 F8 1 0x0 1000 F5 1 0x0 1000 F6 1 0x0 1 F11 1 0x0 1 F12 1 0x0 1 F13 1 0x0 31 F14 1 0x0 3.5 F15 1 0x0 36000 F16 1 0x0 1000 F17 1 0x0 23400 F18 1 0x0 75.0 F19 1 0x0 30.0 F20 1 0x0 60 F21 1"

// Rung $tFirstScan#6
// Offset 118
#BEGIN FMT_COMMENT 
"Set various ranges for errors, warnings, and interlocks.  "
"Not determined yet if from config file, retentive memory, "
"GUI, or other method."
#END

STR	ST1
COPY	0x1	"4 0x0 3 R0 1 0x0 5 R1 1 0x0 29 R2 1 0x0 35 R3 1 0x0 1.5 R4 1 0x0 2 R5 1 0x0 4 R6 1 0x0 5.5 R7 1 0x0 10 R20 1 0x0 14 R21 1 0x0 30 R22 1 0x0 40 R23 1 0x0 20 R24 1 0x0 15 R25 1 0x0 200 R26 1"

// Rung $tFirstScan#7
// Offset 155
#BEGIN FMT_COMMENT 
"Set various timeout values for errors, warnings, and "
"interlocks.  Not determined yet if from config file, "
"retentive memory, GUI, or other method."
#END

STR	ST1
COPY	0x1	"4 0x0 120000 TO0 1 0x0 120000 TO1 1 0x0 120000 TO2 1 0x0 120000 TO3 1 0x0 120000 TO4 1 0x0 300000 TO5 1 0x0 120000 TO6 1"

// Rung $tFirstScan#8
// Offset 181
#BEGIN FMT_COMMENT 
"Set check rules (warnings, interlocks, errors) to be "
"either enabled or disabled for individual testing.  Be sure "
"to reset once done testing and restart the PLC program "
"mode.  First, INIT all B registers to 0 or 1 (depending "
"upon desired affect), then COPY select B registers to 1 to "
"test individual rules.  Several combinations are possible.  "
"Remember to check the CEnableErrors, CEnableInterlocks, and "
"CEnableWarnings registers above too."
#END

STR	ST1
COPY	0x1	"4 0x0 0 B0 1 0x0 0 B1 1 0x0 0 B2 1 0x0 1 B3 1 0x0 1 B4 1 0x0 0 B5 1 0x0 1 B6 1 0x0 1 B7 1 0x0 0 B8 1 0x0 0 B9 1 0x0 0 B10 1 0x0 0 B11 1 0x0 0 B12 1 0x0 0 B13 1 0x0 0 B14 1 0x0 1 B15 1 0x0 1 B16 1 0x0 0 B17 1 0x0 0 B18 1 0x0 1 B19 1 0x0 1 B20 1 0x0 0 B21 1 0x0 1 B22 1 0x0 1 B23 1 0x0 0 B24 1 0x0 0 B25 1 0x0 0 B26 1 0x0 1 B27 1 0x0 1 B28 1 0x0 1 B29 1 0x0 1 B30 1 0x0 1 B31 1 0x0 1 B32 1"

// Rung $tFirstScan#9
// Offset 219
#BEGIN FMT_COMMENT 
"Load original default values into actual default working "
"variables that do not need any manipulation like "
"milliseconds.  If these change downstream or via GUI, "
"alternate approach is needed between working and saving of "
"the new default values.  Not determined yet if from config "
"file, retentive memory, GUI, or other method.<br> <br>"
"Set debounce values..."
#END

STR	ST1
COPY	0x1	"4 0x0 F4 D7 1 0x0 F9 D12 1 0x0 F5 D8 1 0x0 F6 D9 1 0x0 F7 D10 1 0x0 F8 D11 1 0x0 F5 D16 1 0x0 F6 D17 1 0x0 1440 D19 1 0x0 720 D20 1"

// Rung $tFirstScan#10
// Offset 244
#BEGIN FMT_COMMENT 
"Set scaling parameters for each device.  Different "
"installs/products could have different ranges depending "
"upon product.  Rather than finding the SCALE command, can "
"enter here."
#END

STR	ST1
COPY	0x1	"4 0x0 0 SC0 1 0x0 16383 SC1 1 0x0 0 SC2 1 0x0 R26 SC3 1 0x0 0 SC4 1 0x0 32767 SC5 1 0x0 0 SC6 1 0x0 100 SC7 1 0x0 0 SC8 1 0x0 16383 SC9 1 0x0 -2 SC10 1 0x0 2 SC11 1 0x0 6553 SC12 1 0x0 32767 SC13 1 0x0 -10 SC14 1 0x0 70 SC15 1 0x0 0 SC16 1 0x0 32767 SC17 1 0x0 -40 SC18 1 0x0 85 SC19 1 0x0 6553 SC20 1 0x0 32767 SC21 1 0x0 0 SC22 1 0x0 25 SC23 1 0x0 6553 SC24 1 0x0 32767 SC25 1 0x0 0 SC26 1 0x0 14 SC27 1 0x0 0 SC28 1 0x0 32767 SC29 1 0x0 0 SC30 1 0x0 15 SC31 1 0x0 6553 SC32 1 0x0 32767 SC33 1 0x0 8 SC34 1 0x0 0 SC35 1 0x0 0 SC36 1 0x0 R26 SC37 1 0x0 3276 SC38 1 0x0 29490 SC39 1 0x0 0 SC40 1 0x0 32767 SC41 1 0x0 0 SC42 1 0x0 32767 SC43 1 0x0 0 SC44 1 0x0 32767 SC45 1 0x0 0 SC46 1 0x0 32767 SC47 1"

// Rung $tFirstScan#11
// Offset 345
#BEGIN FMT_COMMENT 
"Scaling for acid pump PID in regards to pH."
#END

STR	ST1
COPY	0x1	"4 0x0 0 SC48 1 0x0 14 SC49 1 0x0 0 SC50 1 0x0 14 SC51 1 0x0 0 SC52 1 0x0 25 SC53 1 0x0 0 SC54 1 0x0 25 SC55 1 0x0 0 SC56 1 0x0 100 SC57 1 0x0 0 SC58 1 0x0 100 SC59 1"

// Rung $tFirstScan#12
// Offset 374
#BEGIN FMT_COMMENT 
"Set the default path and file name for log files using the "
"SysName of the assigned PLC."
#END

STR	ST1
STRCOPY	SysName	SS1	1
STRINSERT	"""data\"""	SS1	0

// Rung $tFirstScan#13
// Offset 383
#BEGIN FMT_COMMENT 
"Set the default tuning parameters for the acid pump PID control."
#END

STR	ST1
AND	C50
PIDINIT	AcidPumpCtlPID	276	295.432	9.208	0

// Rung $tFirstScan#14
// Offset 392
#BEGIN FMT_COMMENT 
"Set the default tuning parameters for the proportional "
"valve PID control."
#END

STR	ST1
AND	C51
PIDINIT	PropValveCtlPID	100	4.5	3.809	0

// Rung $tFirstScan#15
// Offset 401
#BEGIN FMT_COMMENT 
"Set the default tuning parameters for the conductivity PID control."
#END

STR	ST1
AND	C52
PIDINIT	ConductvyCtlPID	100	2.544	11.91	1.985

// Rung $tFirstScan#16
// Offset 411
#BEGIN FMT_COMMENT 
"Set timed variables back to original default if a previous "
"value was not in retentive memory (i.e. was zero value).  "
"Also, convert original saved default values from seconds to "
"milliseconds for those registers that need milliseconds."
#END

STR	ST1
MATH	D6	"ROUND(F3 * 1000)"
MATH	D4	"ROUND(F1 * 1000)"
MATH	D5	"ROUND(F2 * 1000)"

// Rung $tFirstScan#17
// Offset 439
#BEGIN FMT_COMMENT 
"Set remote on here rather than using software forces.  "
"This is a reserved register for sites requiring an external "
"event to start/stop processing."
#END

STR	ST1
COPY	0x1	"4 0x0 1 C0 1"

// Rung $tFirstScan#18
// Offset 445
STR	ST1
COPY	0x1	"4 0x0 ""First scan complete."" SL0 1"

// End of Code Block $tFirstScan
$TSKEND	$tFirstScan

// Beginning of Code Block $tTopOfScan
$TSK	$tTopOfScan

// Rung $tTopOfScan#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br>"
"<FONT tsize=5>$tTopOfScan</FONT><br><FONT tsize=5></FONT> "
"<br>This is the first ladder task before the main ladder "
"steps for each loop.  By taking any physical inputs and/or "
"Modbus and/or any other device supplying updates and "
"writing them into memory registers for all ladder "
"operations for processing until the bottom of the scan in "
"which all outputs are set."
#END

NOP

// Rung $tTopOfScan#2
// Offset 1
STR	X1
DEBOUNCE	D13	D14	C63

// Rung $tTopOfScan#3
// Offset 6
#BEGIN FMT_COMMENT 
"Read in incoming digital bits (X) and debounce signal for "
"stability into working variables (C).<br> "
#END

STR	X2
DEBOUNCE	D13	D14	C9

// Rung $tTopOfScan#4
// Offset 11
STR	X8
DEBOUNCE	D13	D14	C10

// Rung $tTopOfScan#5
// Offset 16
STR	X2
DEBOUNCE	D13	D14	C46

// Rung $tTopOfScan#6
// Offset 21
STR	X4
DEBOUNCE	D13	D14	C11

// Rung $tTopOfScan#7
// Offset 26
STR	X5
DEBOUNCE	D13	D14	C12

// Rung $tTopOfScan#8
// Offset 31
STR	X6
DEBOUNCE	D13	D14	C13

// Rung $tTopOfScan#9
// Offset 36
STR	X7
DEBOUNCE	D13	D14	C14

// Rung $tTopOfScan#10
// Offset 41
STR	X8
DEBOUNCE	D13	D14	C15

// Rung $tTopOfScan#11
// Offset 46
STR	X9
DEBOUNCE	D13	D14	C25

// Rung $tTopOfScan#12
// Offset 51
STR	X10
ANDN	MC8
ANDN	C57
DEBOUNCE	D15	32768	C35

// Rung $tTopOfScan#13
// Offset 58
STR	X11
DEBOUNCE	D15	32768	C36

// Rung $tTopOfScan#14
// Offset 63
STR	X12
DEBOUNCE	D15	32768	C64

// Rung $tTopOfScan#15
// Offset 68
STR	X13
DEBOUNCE	D15	32768	C65

// Rung $tTopOfScan#16
// Offset 73
STR	X14
DEBOUNCE	D15	32768	C66

// Rung $tTopOfScan#17
// Offset 78
STR	X15
DEBOUNCE	D15	32768	C67

// Rung $tTopOfScan#18
// Offset 83
#BEGIN FMT_COMMENT 
"Read all scaled analog inputs (WX) into local memory "
"decimal variables (R).  Use unscaled analog inputs (WX) for "
"original raw values from devices."
#END

STR	ST1
MAPIO	"2 WX23 W0 WX4 W1 WX2 W8 WX21 W3 WX1 W4 WX20 W5 WX3 W6 WX22 W7"

// Rung $tTopOfScan#19
// Offset 103
#BEGIN FMT_COMMENT 
"Convert raw (WX) values into scaled values per each "
"individual device specs."
#END

STR	ST1
SCALE	W0	SC0	SC1	SC2	SC3	R18
SCALE	W1	SC4	SC5	SC6	SC7	R14
SCALE	W3	SC12	SC13	SC14	SC15	R16
SCALE	W4	SC16	SC17	SC18	SC19	R17
SCALE	W5	SC20	SC21	SC22	SC23	R9
SCALE	W6	SC24	SC25	SC26	SC27	R13
SCALE	W7	SC28	SC29	SC30	SC31	R27
SCALE	W8	SC32	SC33	SC34	SC35	R28

// Rung $tTopOfScan#20
// Offset 152
#BEGIN FMT_COMMENT 
"If on a system where galvanostat doesn't return a feedback "
"amperage, set the feedback to the target out amperagee."
#END

STRN	C45
COPY	0x1	"4 0x0 R8 R18 1"

// Rung $tTopOfScan#21
// Offset 159
#BEGIN FMT_COMMENT 
"If flow rate returns negative, set back to zero."
#END

STRLT	R9	0.06
COPY	0x1	"4 0x0 0 R9 1"

// Rung $tTopOfScan#22
// Offset 170
#BEGIN FMT_COMMENT 
"If voltage approaches zero, set to zero."
#END

STRLT	R27	0.06
COPY	0x1	"4 0x0 0 R27 1"

// Rung $tTopOfScan#23
// Offset 181
#BEGIN FMT_COMMENT 
"If amperage approaches zero, set to zero."
#END

STRLT	R18	0.06
COPY	0x1	"4 0x0 0 R18 1"

// Rung $tTopOfScan#24
// Offset 192
#BEGIN FMT_COMMENT 
"Use FILTER command against the incoming voltage reading to "
"slow down the drastic changes, especially during polarity "
"switching."
#END

STR	ST1
FILTER	2	R27	R19

// Rung $tTopOfScan#25
// Offset 196
STR	C45
MATH	R19	"R19 * 10"
MATH	R18	"R18 * 10"

// Rung $tTopOfScan#26
// Offset 213
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C DEMO MODE "
"%3E%3E%3E%3E</FONT><br><FONT tsize=5></FONT> <br>If in "
"DemoMode, overwrite any values from above."
#END

STR	C33
COPY	0x1	"4 0x0 5.55 R18 1 0x0 55.5 R14 1 0x0 2.2 R15 1 0x0 25.5 R16 1 0x0 35.5 R17 1 0x0 4.44 R9 1 0x0 2.2 R13 1 0x0 7.77 R19 1 0x0 4000 R28 1"

// Rung $tTopOfScan#27
// Offset 244
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C WEB PAGES "
"%3E%3E%3E%3E</FONT><br> <br>Refresh web pages from SD card "
"to RAM."
#END

STR	C38
ENTASK	TaskLoadWebPages	0x0	0	0x1

// Rung $tTopOfScan#28
// Offset 249
#BEGIN FMT_COMMENT 
"On leading edge of green button press or leading edge of "
"HMI start state, set local bit.<br>"
"Output the button press to modbus (MC3) so that it can be "
"interpreted by the UI as a command to start."
#END

STRPD	C35
ORPD	MC1
ORPD	C63
COPY	0x1	"4 0x0 1 C1 1 0x0 0 C36 1 0x0 0 MC1 1"

// Rung $tTopOfScan#29
// Offset 262
#BEGIN FMT_COMMENT 
"On leading edge of red button press or trailing edge of "
"HMI entered stop state, set local bit.<br>"
"Output the button press to modbus (MC4) so that it can be "
"interpreted by the UI as a command to stop."
#END

STRPD	C36
ORPD	MC2
ORND	C63
ORE	D0	SM_Halted
COPY	0x1	"4 0x0 0 C1 1 0x0 0 C35 1 0x0 0 MC2 1"

// Rung $tTopOfScan#30
// Offset 280
STR	MC8
ENTASK	TaskRoutineTest	0x0	0	0x1

// End of Code Block $tTopOfScan
$TSKEND	$tTopOfScan

// Beginning of Code Block $Main
$PRGRM	$Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br><FONT tsize=5>$Main</FONT><br>"
"<FONT tsize=5></FONT> <br>This is the main ladder loop "
"launched afte the TopOfScan.  The BottomOfScan is launched "
"after this Main loop.  This Main task starts and stops "
"other programs and tasks."
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C ERRORS / WARNINGS / INFO "
"%3E%3E%3E%3E</FONT><br> <br>Start side programs to monitor "
"conditions (errors, warnings and info) that may or may not "
"require a temporary halt of processing.  If the condition "
"returns to normal, processing may proceed, otherwise, local "
"operators may need to resolve the issue and restart.  See "
"the programs for further details."
#END

STR	C28
RUN	ProgInfo

// Rung $Main#3
// Offset 4
STR	C26
RUN	ProgErrors

// Rung $Main#4
// Offset 7
STR	C27
RUN	ProgWarnings

// Rung $Main#5
// Offset 10
STR	C59
RUN	ProgNotices

// Rung $Main#6
// Offset 13
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C GENERATOR "
"%3E%3E%3E%3E</FONT><br> <br>If the system bit is on and "
"there are no errors and there are no interlocks, start the "
"tasks which handle the amperage, ultrasonics, and "
"polarity.  The task should stay active and running as long "
"as these conditions are met.  Also, turn on one of the "
"H-bridge relays."
#END

STRE	D0	SM_Running
ENTASK	TaskGalvanostat	0x0	0	0x1
ENTASK	TaskUltrasonics	0x0	0	0x1
ENTASK	TaskPolarity	0x0	0	0x1

// Rung $Main#7
// Offset 30
#BEGIN FMT_COMMENT 
"<FONT tsize=5></FONT>But, if the system bit is off, or "
"there is an error, or there is an interlock, or the system "
"mode is not correct, turn off the generator task.  Although "
"halting a task should automatically turn off all embedded "
"bits to that task, perform a copy anyway to make sure."
#END

STRNE	D0	SM_Running
HALT	TaskGalvanostat
HALT	TaskUltrasonics
HALT	TaskPolarity
COPY	0x1	"4 0x0 0 C5 1 0x0 0 R8 1 0x0 0 C3 1 0x0 0 C4 1 0x0 0 C30 1 0x0 0 C31 1 0x0 0 C37 1"

// Rung $Main#8
// Offset 50
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C MAIN INLET VALVE "
"%3E%3E%3E%3E</FONT><br> <br>If the system is running, open "
"up the main valve and close when not running."
#END

STRN	MC602
AND	C60
STR	MC602
AND	MC603
ORSTR
COPY	0x1	"4 0x0 1 C16 1"

// Rung $Main#9
// Offset 60
#BEGIN FMT_COMMENT 
" "
#END

STRN	MC8
STRN	MC602
ANDN	C60
STR	MC602
ANDN	MC603
ORSTR
ANDSTR
COPY	0x1	"4 0x0 0 C16 1"

// Rung $Main#10
// Offset 72
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C DRAIN PUMP "
"%3E%3E%3E%3E</FONT><br> <br>If the UI is forcing on/off the "
"drain pump, set elements needed."
#END

STR	MC610
DUPBOOL
AND	MC611
COPY	0x1	"4 0x0 1 C7 1"
POPBOOL
ANDN	MC611
COPY	0x1	"4 0x0 0 C7 1"

// Rung $Main#11
// Offset 87
#BEGIN FMT_COMMENT 
"<FONT tsize=5><FONT tsize=5>%3C%3C%3C%3C ACID PUMP PID "
"%3E%3E%3E%3E</FONT><br> <br></FONT><FONT tsize=3>Start/stop "
"PID task for acid pump controlling ph.</FONT>"
#END

STR	C60
AND	C50
ENTASK	TaskAcidPumpPID	0x0	0	0x1
COPY	0x1	"4 0x0 1 C6 1"

// Rung $Main#12
// Offset 98
#BEGIN FMT_COMMENT 
" "
#END

STRN	C60
HALT	TaskAcidPumpPID
COPY	0x1	"4 0x0 0 R10 1 0x0 0 C6 1"

// Rung $Main#13
// Offset 107
#BEGIN FMT_COMMENT 
"<FONT tsize=5><FONT tsize=5><FONT tsize=5><FONT "
"tsize=5>%3C%3C%3C%3C PROPORTIONAL VALVE PID "
"%3E%3E%3E%3E</FONT><br> <br></FONT><FONT tsize=3>Start/stop "
"PID task for proportional valve controlling flow "
"rate.</FONT></FONT><br></FONT>"
#END

STRN	MC602
AND	C60
AND	C51
STR	MC602
AND	MC603
ORSTR
ENTASK	TaskPropValvePID	0x0	0	0x1
COPY	0x1	"4 0x0 1 C49 1"

// Rung $Main#14
// Offset 122
STRN	MC8
DUPBOOL
ANDN	MC602
ANDN	C60
HALT	TaskPropValvePID
POPBOOL
AND	MC602
ANDN	MC603
COPY	0x1	"4 0x0 0 C49 1"

// Rung $Main#15
// Offset 135
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C SYSTEM MODE "
"%3E%3E%3E%3E</FONT><br> <br>Upon each and every loop, "
"regardelss if system is on or off, determine the current "
"status of the system (i.e. Ready, Running, Alarm, etc) and "
"set registers accordingly for further use.  This isn't "
"defined as a task or program, which may run in different "
"scans, but instead as a subroutine, which will run as part "
"of the current scan, every time, right now.<br> <br>"
"Hierarchy of Status:<br> <br>"
"1)  If the system determines no errors and there are no "
"interlocks:<br>RUNNING, PROCESSING, GENERATING, ON, "
"NORMAL<br> <br>2)  If the system determines an interruption "
"event:<br>PAUSED, WAITING, PENDING, INTERLOCKED, STARTUP<br>"
" <br>3)  If the system determines an error event:<br>"
"ALARM, ERROR, STOPPED, HALTED, ALERT, OFF<br> <br>"
"4)  Else<br>READY, IDLE, STANDBY, OFF, OPERATOR, "
"MAINTENANCE, MANUAL"
#END

STR	ST1
RUN	ProgStateMachine

// Rung $Main#16
// Offset 138
#BEGIN FMT_COMMENT 
"<FONT tsize=5><FONT tsize=5>%3C%3C%3C%3C CONDUCTIVITY PID "
"%3E%3E%3E%3E</FONT><br> <br></FONT><FONT tsize=3>Start/stop "
"PID task for acid pump controlling conductivity.</FONT>"
#END

STR	C60
AND	C52
ENTASK	TaskConductvyPID	0x0	0	0x1
COPY	0x1	"4 0x0 1 C6 1"

// Rung $Main#17
// Offset 149
STRN	C60
HALT	TaskConductvyPID
COPY	0x1	"4 0x0 0 R10 1 0x0 0 C6 1"

// Rung $Main#18
// Offset 158
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C FILE LOG %3E%3E%3E%3E</FONT><br>"
" <br>If the system is running, log data entry at "
"pre-determined time."
#END

STR	ST1
FILELOG	@SDCardFS	SS1	0x22	SS0	"2 D0 4 C0 3 R8 2 R13 1 R16 2 R19 1 TT0 4"	"TimeStamp() "","" D0 "","" D1 "","" D2 "","" D3 "","" C0 "","" C1 "","" C2 "","" R8 "","" R9 "","" R13 "","" R16 "","" R17 "","" R19 "","" TT0 "","" TT1 "","" TT2 "","" TT3 ""$0D$0A"""	0x0	C19	C20

// Rung $Main#19
// Offset 321
STR	ST1
ENTASK	TaskUpdPlatePerc	0x0	0	0x1

// Rung $Main#20
// Offset 326
STR	ST1
ENTASK	TaskResetPlates	0x0	0	0x1

// Rung $Main#21
// Offset 331
STR	C61
RUN	ProgDraining

// Rung $Main#22
// Offset 334
STR	ST1
ENTASK	TaskFilterError	0x0	0	0x1

// End of Code Block $Main
$PGMEND	$Main

// Beginning of Code Block TaskGalvanostat
$TSK	TaskGalvanostat

// Rung TaskGalvanostat#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br> <br>"
"<FONT tsize=5>TaskGalvanostat</FONT><br><FONT "
"tsize=5></FONT> <br>"
"<FONT tsize=3>This independent task is started and stopped "
"via the Main control loop ladder.  The generator supporting "
"devices are started and stopped here.  The generator flow "
"cell has the galvanostat, ultrasonics, and polarity "
"switching.  To disable a specific device, its values could "
"be preconfigured as zero.</FONT>"
#END

NOP

// Rung TaskGalvanostat#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=3></FONT> "
#END

STRGT	F0	0
DUPBOOL
AND	C32
COPY	0x1	"4 0x0 0 C5 1 0x0 F0 R8 1"
POPBOOL
ANDN	C32
COPY	0x1	"4 0x0 1 C5 1 0x0 F0 R8 1"

// Rung TaskGalvanostat#3
// Offset 23
#BEGIN FMT_COMMENT 
"If the target amperage is equal or below zero, make sure "
"the galvanostat is off/disabled and amperage is zero.<br> "
#END

STRLE	F0	0
COPY	0x1	"4 0x0 0 C5 1 0x0 0 R8 1"

// End of Code Block TaskGalvanostat
$TSKEND	TaskGalvanostat

// Beginning of Code Block ProgInfo
$PRGRM	ProgInfo

// Rung ProgInfo#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br><FONT tsize=5>ProgInfo</FONT><br>"
"<FONT tsize=5></FONT> <br>This separate independent program "
"loops thru conditions looking for those that may need to be "
"reported, but not necessary halt or pause the system.  The "
"reverse condition may also be checked waiting and hoping "
"the warning eventually clears, thus allowing the process to "
"continue in the long term.  Or, the warnings may be reset "
"at first and reprocessed over and over.  The warnings "
"aren't read in order, but final assignment is ordered from "
"those that are least important to most important so that "
"all conditions can be checked, but leaving the routine with "
"the most important code recorded."
#END

NOP

// Rung ProgInfo#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Low Web Pages %3E%3E%3E%3E</FONT>"
#END

STR	C38
AND	B26
DUPBOOL
ANDN	SE0
AND	SE2
AND	SE4
DEBOUNCE	D8	D9	A26
POPBOOL
AND	SE0
STRN	SE2
ORN	SE4
ANDSTR
DEBOUNCE	D8	D9	A26

// Rung ProgInfo#3
// Offset 20
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Acid Tank Low "
"%3E%3E%3E%3E</FONT><br> "
#END

STR	C9
AND	B8
DEBOUNCE	D8	D9	A8

// Rung ProgInfo#4
// Offset 26
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Voltage Increasing %3E%3E%3E%3E</FONT>"
#END

STRGE	R19	R20
AND	B10
DEBOUNCE	D8	D9	A10

// Rung ProgInfo#5
// Offset 35
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Temperature Increasing %3E%3E%3E%3E</FONT>"
#END

STRGE	R17	R22
AND	B21
DEBOUNCE	D8	D9	A21

// Rung ProgInfo#6
// Offset 44
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Outer Plates Low %25 %3E%3E%3E</FONT>"
#END

STRLE	TT9	R24
AND	B15
DEBOUNCE	D8	D9	A15

// Rung ProgInfo#7
// Offset 53
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Outer Plates Low %25 %3E%3E%3E</FONT>"
#END

STRLE	TT11	R24
AND	B30
DEBOUNCE	D8	D9	A30

// Rung ProgInfo#8
// Offset 62
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Filter Backwash %3E%3E%3E</FONT>"
#END

STR	C64
OR	C65
OR	C66
OR	C67
AND	B33
DEBOUNCE	D8	D9	A33

// Rung ProgInfo#9
// Offset 71
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Set Warning Codes ON/OFF "
"%3E%3E%3E%3E</FONT> "
#END

STR	C2
DUPBOOL
AND	A26
COPY	0x1	"4 0x0 A_LoadWebPages D3 1 0x0 1 C23 1"
POPBOOL
DUPBOOL
AND	A8
COPY	0x1	"4 0x0 A_AcidTankLow D3 1 0x0 1 C23 1"
POPBOOL
DUPBOOL
AND	A10
COPY	0x1	"4 0x0 A_VoltInfo D3 1 0x0 1 C23 1"
POPBOOL
DUPBOOL
AND	A21
COPY	0x1	"4 0x0 A_TempInfo D3 1 0x0 1 C23 1"
POPBOOL
DUPBOOL
AND	A30
COPY	0x1	"4 0x0 A_InPlatesInfo D3 1 0x0 1 C23 1"
POPBOOL
DUPBOOL
AND	A15
COPY	0x1	"4 0x0 A_OutPlatesInfo D3 1 0x0 1 C23 1"
POPBOOL
DUPBOOL
AND	A33
COPY	0x1	"4 0x0 A_Backwash D3 1 0x0 1 C23 1"
POPBOOL
ANDN	A8
ANDN	A10
ANDN	A21
ANDN	A15
ANDN	A30
ANDN	A33
COPY	0x1	"4 0x0 A_NoAlarm D3 1 0x0 0 C23 1"

// Rung ProgInfo#10
// Offset 163
STRN	C2
COPY	0x1	"4 0x0 A_NoAlarm D3 1 0x0 0 C23 1"

// End of Code Block ProgInfo
$PGMEND	ProgInfo

// Beginning of Code Block ProgErrors
$PRGRM	ProgErrors

// Rung ProgErrors#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br>"
"<FONT tsize=5>ProgErrors</FONT><br><FONT tsize=5></FONT> "
"<br>This separate independent program loops thru conditions "
"looking for those that may halt the entire system.  The "
"reverse condition may not be checked, but cleared by "
"operators and restarted manually.  The errors are read in "
"any order, but ordered from those that are least important "
"to most important so that all conditions can be checked, "
"but leaving the routine with the most important recorded "
"code."
#END

NOP

// Rung ProgErrors#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Acid Tank Empty "
"%3E%3E%3E%3E</FONT><br> "
#END

STR	C25
AND	B9
DEBOUNCE	D7	32768	A9

// Rung ProgErrors#3
// Offset 7
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Reagent Tank Overflow "
"%3E%3E%3E%3E</FONT><br> "
#END

STR	C14
AND	B12
DEBOUNCE	D7	32768	A12

// Rung ProgErrors#4
// Offset 13
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Voltage Too High "
"%3E%3E%3E%3E</FONT><br> "
#END

STRGE	R19	R21
AND	B11
DEBOUNCE	D7	32768	A11

// Rung ProgErrors#5
// Offset 22
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Temperature Too High %3E%3E%3E%3E</FONT>"
#END

STRGE	R17	R23
AND	B5
DEBOUNCE	D7	32768	A5

// Rung ProgErrors#6
// Offset 31
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Startup Timeout %3E%3E%3E</FONT>"
#END

STR	T17.Done
AND	B32
DEBOUNCE	D7	10000	A32

// Rung ProgErrors#7
// Offset 37
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C TIMEOUTS %3E%3E%3E%3E</FONT><br> "
#END

STR	A3
AND	B19
ONDTMR	T7	TO0	A19

// Rung ProgErrors#8
// Offset 42
#BEGIN FMT_COMMENT 
" "
#END

STR	A4
AND	B20
ONDTMR	T8	TO1	A20

// Rung ProgErrors#9
// Offset 47
STR	A6
AND	B22
ONDTMR	T9	TO3	A22

// Rung ProgErrors#10
// Offset 52
STR	A7
AND	B23
ONDTMR	T15	TO2	A23

// Rung ProgErrors#11
// Offset 57
STR	A1
AND	B17
ONDTMR	T10	TO4	A17

// Rung ProgErrors#12
// Offset 62
STR	A2
AND	B18
ONDTMR	T11	TO5	A18

// Rung ProgErrors#13
// Offset 67
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Too many backwashes %3E%3E%3E</FONT>"
#END

STRGE	CT0.Acc	3
AND	B34
DEBOUNCE	D7	10000	A34

// Rung ProgErrors#14
// Offset 76
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Set Error Codes On/Off "
"%3E%3E%3E%3E</FONT><br><FONT tsize=5></FONT> "
#END

STRE	D0	SM_Idle
ORE	D0	SM_Running
ORPD	C62
DUPBOOL
AND	A12
COPY	0x1	"4 0x0 A_ReagntOverFlow D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A9
COPY	0x1	"4 0x0 A_AcidTankEmpty D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A11
COPY	0x1	"4 0x0 A_VoltAlarm D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A5
COPY	0x1	"4 0x0 A_TempAlarm D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A19
COPY	0x1	"4 0x0 A_CondRangeTO D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A20
COPY	0x1	"4 0x0 A_FlowRangeTO D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A22
COPY	0x1	"4 0x0 A_GenNotFullTO D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A17
COPY	0x1	"4 0x0 A_ORPRangeTO D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A18
COPY	0x1	"4 0x0 A_pHRangeTO D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A23
COPY	0x1	"4 0x0 A_GenEmptyTO D2 1 0x0 1 C21 1"
POPBOOL
DUPBOOL
AND	A32
COPY	0x1	"4 0x0 A_StartupTimeout D2 1 0x0 1 C21 1"
POPBOOL
AND	A34
COPY	0x1	"4 0x0 A_TooManyBW D2 1 0x0 1 C21 1"

// Rung ProgErrors#15
// Offset 218
STRND	C62
COPY	0x1	"4 0x0 A_NoAlarm D2 1 0x0 0 C21 1"

// End of Code Block ProgErrors
$PGMEND	ProgErrors

// Beginning of Code Block TaskUltrasonics
$TSK	TaskUltrasonics

// Rung TaskUltrasonics#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br> <br>"
"<FONT tsize=5>TaskUltrasonics</FONT><br><FONT "
"tsize=5></FONT> <br>"
"<FONT tsize=3>This independent task is started and stopped "
"via the Main control loop ladder.  The generator supporting "
"devices are started and stopped here.  The generator flow "
"cell has the galvanostat, ultrasonics, and polarity "
"switching.  To disable a specific device, its values could "
"be preconfigured as zero.</FONT>"
#END

NOP

// Rung TaskUltrasonics#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C ULTRASONICS - INDEPENDENT "
"%3E%3E%3E%3E</FONT><br> <br>If values are above zero, and "
"NOT syncing to polarity, start the interval timer, turn on "
"ultrasonics, then start another timer for duration.  Once "
"all complete, reset and start over.<br> "
#END

STRGT	D5	0
ANDGT	D4	0
ANDN	C24
TMRDOWN	T1	D5

// Rung TaskUltrasonics#3
// Offset 12
STRGT	D5	0
ANDGT	D4	0
ANDN	C24
AND	T1.Done
COPY	0x1	"4 0x0 1 C3 1"
TMRDOWN	T2	D4

// Rung TaskUltrasonics#4
// Offset 29
STRGT	D5	0
ANDGT	D4	0
ANDN	C24
AND	T1.Done
AND	T2.Done
COPY	0x1	"4 0x0 0 C3 1"
RSTT	T1

// Rung TaskUltrasonics#5
// Offset 46
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C ULTRASONICS - SYNCRONIZED "
"%3E%3E%3E%3E</FONT><br> <br>If values are above zero, and "
"syncing to polarity, set values as soon as the polarity "
"switched.  Once that is detected, turn on ultrasonics, "
"start a timer, then reset for next polarity event.<br> "
#END

STRGT	D4	0
AND	C24
ANDPD	C32
COPY	0x1	"4 0x0 1 C37 1 0x0 1 C3 1"

// Rung TaskUltrasonics#6
// Offset 59
STRGT	D4	0
AND	C24
AND	C37
TMRDOWN	T6	D4
AND	T6.Done
COPY	0x1	"4 0x0 0 C37 1 0x0 0 C3 1"

// End of Code Block TaskUltrasonics
$TSKEND	TaskUltrasonics

// Beginning of Code Block TaskPolarity
$TSK	TaskPolarity

// Rung TaskPolarity#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br> <br>"
"<FONT tsize=5>TaskPolarity</FONT><br><FONT tsize=5></FONT> "
"<br><FONT tsize=3>This independent task is started and "
"stopped via the Main control loop ladder.  The generator "
"supporting devices are started and stopped here.  The "
"generator flow cell has the galvanostat, ultrasonics, and "
"polarity switching.  To disable a specific device, its "
"values could be preconfigured as zero.</FONT>"
#END

NOP

// Rung TaskPolarity#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C SINGLE RELAY POLARITY "
"%3E%3E%3E%3E</FONT><br> <br>If polarity duration is above "
"zero (zero is disabled), start polarity duration timer.  If "
"duration is above zero, and when timer finishes, toggle the "
"output bit for polarity reversing of the galvanostat "
"relays.  Also, set variable for setting the beginning of "
"the polarity switching.  This will alert the galvanostat "
"task.  This is for single relay systems."
#END

STRGT	D6	0
ANDN	C32
ANDN	T0.Done
TMR	T0	D6

// Rung TaskPolarity#3
// Offset 9
STRGT	D6	0
ANDN	C32
AND	T0.Done
PONOFF	C4	ST1023
COPY	0x1	"4 0x0 1 C32 1"

// Rung TaskPolarity#4
// Offset 22
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C H-BRIDGE RELAY POLARITY "
"%3E%3E%3E%3E</FONT><br> <br>For H-Bridge relay sets, once "
"main duration timer completes above, turn off galvanostat "
"for a lower power switching of relay coils.  The "
"galvanostat is turned off in its task when the bit "
"CPolaritySwitch is enabled.<br> <br>"
"If not switching, turn on appropriate relays depending upon "
"the polarity value.  This is really only needed on startup "
"as the logic below will handle the actual switch.  However, "
"on first cycle, this rung sets the first relay bank."
#END

STRGT	D6	0
ANDN	C32
DUPBOOL
AND	C4
COPY	0x1	"4 0x0 1 C30 1 0x0 0 C31 1"
POPBOOL
ANDN	C4
COPY	0x1	"4 0x0 0 C30 1 0x0 1 C31 1"

// Rung TaskPolarity#5
// Offset 43
#BEGIN FMT_COMMENT 
" If switching, give time for galvanostat(s) to turn "
"off.<br> "
#END

STRGT	D6	0
AND	C32
TMRDOWN	T3	250

// Rung TaskPolarity#6
// Offset 50
#BEGIN FMT_COMMENT 
"Once timer finishes, turn off relay banks and start "
"another timer to allow time for that to complete.<br> "
#END

STRGT	D6	0
AND	C32
AND	T3.Done
TMRDOWN	T4	250
COPY	0x1	"4 0x0 0 C30 1 0x0 0 C31 1"

// Rung TaskPolarity#7
// Offset 64
#BEGIN FMT_COMMENT 
"Once that timer completes for relays to turn off, switch "
"relays and start another timer for that to complete.<br> "
#END

STRGT	D6	0
AND	C32
AND	T3.Done
AND	T4.Done
DUPBOOL
AND	ST1
TMRDOWN	T5	250
POPBOOL
DUPBOOL
AND	C4
COPY	0x1	"4 0x0 1 C30 1"
POPBOOL
ANDN	C4
COPY	0x1	"4 0x0 1 C31 1"

// Rung TaskPolarity#8
// Offset 90
#BEGIN FMT_COMMENT 
"Once all timers complete, reset the switching variable.  "
"This will tell the galvanostat to turn back on too.<br> "
#END

STRGT	D6	0
AND	C32
AND	T3.Done
AND	T4.Done
AND	T5.Done
COPY	0x1	"4 0x0 0 C32 1"

// End of Code Block TaskPolarity
$TSKEND	TaskPolarity

// Beginning of Code Block ProgDosingPump
$PRGRM	ProgDosingPump

// Rung ProgDosingPump#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><FONT "
"tsize=5></FONT> <br> <br>"
"<FONT tsize=5>ProgDosingPump</FONT><br><FONT "
"tsize=5></FONT> <br>pending"
#END

NOP

// End of Code Block ProgDosingPump
$PGMEND	ProgDosingPump

// Beginning of Code Block ProgWarnings
$PRGRM	ProgWarnings

// Rung ProgWarnings#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br>"
"<FONT tsize=5>ProgWarnings</FONT><FONT tsize=5></FONT><br>"
"This separate independent program loops thru conditions "
"looking for those that may pause other parts of the "
"system.  The reverse condition may also be checked waiting "
"and hoping the condition eventually clears, thus allowing "
"generation to continue.  Or, the interlock variables may be "
"reset assuming interlocks are clear, then reprocess.  The "
"interlocks are not read in particular order, however the "
"final order is from least important to most important so "
"that all conditions can be checked, but leaving the routine "
"with the most important recorded with a final code."
#END

NOP

// Rung ProgWarnings#2
// Offset 1
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Flow In Rate %3E%3E%3E%3E</FONT>"
#END

STRLT	R9	R0
ORGT	R9	R1
AND	B4
DEBOUNCE	D10	D11	A4

// Rung ProgWarnings#3
// Offset 14
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Generator Cell Level "
"%3E%3E%3E%3E</FONT><br>"
#END

STRN	C46
AND	B6
DEBOUNCE	D10	D11	A6

// Rung ProgWarnings#4
// Offset 20
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Generator Cell Level "
"%3E%3E%3E%3E</FONT><br>"
#END

STRN	C10
AND	B7
DEBOUNCE	D10	D11	A7

// Rung ProgWarnings#5
// Offset 26
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Conductivity "
"%3E%3E%3E%3E</FONT><br>"
#END

STRLT	R14	R2
ORGT	R14	R3
AND	B3
DEBOUNCE	D10	D11	A3

// Rung ProgWarnings#6
// Offset 39
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C pH %3E%3E%3E%3E</FONT>"
#END

STRLT	R13	R4
ORGT	R13	R5
AND	B2
DEBOUNCE	D10	D11	A2

// Rung ProgWarnings#7
// Offset 52
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C ORP %3E%3E%3E%3E</FONT><br>"
#END

STRLT	R15	R6
ORGT	R15	R7
AND	B1
DEBOUNCE	D10	D11	A1

// Rung ProgWarnings#8
// Offset 65
#BEGIN FMT_COMMENT 
" <FONT tsize=5>%3C%3C%3C%3C Set Interlock Codes ON/OFF "
"%3E%3E%3E%3E</FONT> <br> "
#END

STRE	D0	SM_Running
ORE	D0	SM_Idle
DUPBOOL
AND	A1
COPY	0x1	"4 0x0 A_ORPRange D1 1 0x0 1 C22 1"
POPBOOL
DUPBOOL
AND	A2
COPY	0x1	"4 0x0 A_pHRange D1 1 0x0 1 C22 1"
POPBOOL
DUPBOOL
AND	A3
COPY	0x1	"4 0x0 A_CondRange D1 1 0x0 1 C22 1"
POPBOOL
DUPBOOL
AND	A6
COPY	0x1	"4 0x0 A_GenNotFull D1 1 0x0 1 C22 1"
POPBOOL
DUPBOOL
AND	A4
COPY	0x1	"4 0x0 A_FlowRange D1 1 0x0 1 C22 1"
POPBOOL
AND	A7
COPY	0x1	"4 0x0 A_GenEmpty D1 1 0x0 1 C22 1"

// Rung ProgWarnings#9
// Offset 139
STRN	A1
ANDN	A2
ANDN	A3
ANDN	A6
ANDN	A7
OUT	C63
COPY	0x1	"4 0x0 A_NoAlarm D1 1 0x0 0 C22 1"

// Rung ProgWarnings#10
// Offset 153
STRNE	D0	SM_Running
ANDNE	D0	SM_Idle
COPY	0x1	"4 0x0 A_NoAlarm D1 1 0x0 0 C22 1"

// Rung ProgWarnings#11
// Offset 171
NOP

// Rung ProgWarnings#12
// Offset 172
NOP

// End of Code Block ProgWarnings
$PGMEND	ProgWarnings

// Beginning of Code Block $t1Second
$TSK	$t1Second

// Rung $t1Second#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br><FONT tsize=5>$t1Second</FONT><br>"
"<FONT tsize=5></FONT> <br>This ladder task runs every "
"second after it completes.  In other words, it doesn't run "
"exactly every second, but exactly one second each time "
"after it finishes, regardless of how short or long it "
"executes.  This should be enough accuracy for total "
"calculations."
#END

NOP

// Rung $t1Second#2
// Offset 1
#BEGIN FMT_COMMENT 
"Calculate Ah and KWh and Asec"
#END

STR	ST1
AND	C2
AND	C5
MATH	TT1	"TT1 + (((R18 * R19) / 3600) / 1000)"
MATH	TT0	"TT0 + (R18 / 3600)"
MATH	TT4	"TT4 + R18"
MATH	TT5	"TT5 + (1 / 3600)"
MATH	TT6	"TT6 + 1"

// Rung $t1Second#3
// Offset 54
#BEGIN FMT_COMMENT 
"Calculate flow volume"
#END

STR	ST1
AND	C2
MATH	TT3	"TT3 + (R9 / 60)"

// Rung $t1Second#4
// Offset 66
#BEGIN FMT_COMMENT 
"Calculate the current tank level and percentage available."
#END

STR	ST1
MATH	R30	"(F11 - R28) * F12"
MATH	TT7	"(R30 / F13) * 100"

// End of Code Block $t1Second
$TSKEND	$t1Second

// Beginning of Code Block TaskAcidPumpPID
$TSK	TaskAcidPumpPID

// Rung TaskAcidPumpPID#1
// Offset 0
STR	ST1
STR	ST2
STR	ST2
RAMPSOAK	RS_0	AcidPumpCtlPID.SP	1	"4 1 F10 0 0"

// Rung TaskAcidPumpPID#2
// Offset 10
STR	ST1
FILTER	1	R13	R29

// Rung TaskAcidPumpPID#3
// Offset 14
STR	ST1
PID	AcidPumpCtlPID	0x62	R29	SC48	SC49	SC50	SC51	""""""	6553	32767	R10	DST511

// End of Code Block TaskAcidPumpPID
$TSKEND	TaskAcidPumpPID

// Beginning of Code Block TaskLoadWebPages
$TSK	TaskLoadWebPages

// Rung TaskLoadWebPages#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>Aqua Metrology Systems SafeGuard "
"H2O</FONT><br> <br><FONT tsize=5>TaskLoadWebPages</FONT><br>"
"<FONT tsize=5></FONT> <br><FONT tsize=3>When the PLC "
"restarts, the RAM file system gets cleared out, which holds "
"the user pages for the web server.  Upon startup, during "
"the top scan, and using a status holding bit, this task is "
"enabled.  By recreating the subdirectory and copying the "
"files from the SD file system back to the RAM file "
"system.</FONT>"
#END

NOP

// Rung TaskLoadWebPages#2
// Offset 1
STR	C38
FILENEWFLDR	@RamFS	"""up"""	0x0	SE0	SE1
TMRDOWN	T13	1000

// Rung TaskLoadWebPages#3
// Offset 12
STR	C38
AND	T13.Done
FILECOPY	@SDCardFS	"""\up\SGH2O_PLC.html"""	@RamFS	"""\up\SGH2O_PLC.html"""	0x0	0x0	SE2	SE3
AND	SE2
FILECOPY	@SDCardFS	"""\up\jquery.min.js"""	@RamFS	"""\up\jquery.min.js"""	0x0	0x0	SE4	SE5
AND	SE4
COPY	0x1	"4 0x0 0 C38 1"

// End of Code Block TaskLoadWebPages
$TSKEND	TaskLoadWebPages

// Beginning of Code Block TaskPropValvePID
$TSK	TaskPropValvePID

// Rung TaskPropValvePID#1
// Offset 0
STR	ST1
STR	ST2
STR	ST2
RAMPSOAK	RS_1	PropValveCtlPID.SP	1	"4 1 F15 0 0"

// Rung TaskPropValvePID#2
// Offset 10
STR	ST1
FILTER	1	R9	R32

// Rung TaskPropValvePID#3
// Offset 14
STR	ST1
PID	PropValveCtlPID	0x60	R32	SC52	SC53	SC54	SC55	""""""	6553	32767	R31	DST511

// End of Code Block TaskPropValvePID
$TSKEND	TaskPropValvePID

// Beginning of Code Block TaskConductvyPID
$TSK	TaskConductvyPID

// Rung TaskConductvyPID#1
// Offset 0
STR	ST1
STR	ST2
STR	ST2
RAMPSOAK	RS_2	ConductvyCtlPID.SP	1	"4 1 F14 0 0"

// Rung TaskConductvyPID#2
// Offset 10
STR	ST1
FILTER	1	R14	R33

// Rung TaskConductvyPID#3
// Offset 14
STR	ST1
PID	ConductvyCtlPID	0x60	R33	SC56	SC57	SC58	SC59	""""""	6553	32767	R10	DST511

// End of Code Block TaskConductvyPID
$TSKEND	TaskConductvyPID

// Beginning of Code Block TaskRoutineTest
$TSK	TaskRoutineTest

// Rung TaskRoutineTest#1
// Offset 0
STRPD	MC401
COPY	0x1	"4 0x0 1 MC402 1 0x0 MHR201 R37 1 0x0 0 MC404 1"

// Rung TaskRoutineTest#2
// Offset 10
STRN	MC403
ANDN	MC404
DUPBOOL
ANDE	R37	4
RUN	ProgRinsing
POPBOOL
ANDE	R37	1
RUN	ProgDraining

// Rung TaskRoutineTest#3
// Offset 26
STR	MC403
ANDN	MC404
DUPBOOL
ANDE	R37	4
RUN	ProgAbortRinsing
POPBOOL
ANDE	R37	1
RUN	ProgAbortDrain

// Rung TaskRoutineTest#4
// Offset 42
#BEGIN FMT_COMMENT 
"<B><I>Handshake Step 4 (Optional)</I>*</B><br>"
"<I>The GUI may send a request to stop the current routine. "
"This action is immediate but optional.</I><br>"
"<!-- notionvc: 8f5b29c4-3e89-4d80-9e0b-ba815f8c4503 "
"--><B></B><br><B>Handshake Step 5</B><br>"
"<I>The PLC sends the End signal. This action is immediate "
"for the PLC. The GUI waits for the PLC to signal the end of "
"the routine, either automatically or upon receiving an "
"abort request. This action requires waiting.</I>"
#END

STR	MC403
ANDN	MC405
COPY	0x1	"4 0x0 1 MC404 1"

// Rung TaskRoutineTest#5
// Offset 49
#BEGIN FMT_COMMENT 
"<B>Handshake Step 6</B><br>"
"<I>The GUI acknowledges the end of the routine. This action "
"is immediate. The PLC reads the acknowledgement via EndACK "
"and sets EndCMD to 0.</I>"
#END

STR	MC404
AND	MC405
COPY	0x1	"4 0x0 0 MC404 1"

// Rung TaskRoutineTest#6
// Offset 56
#BEGIN FMT_COMMENT 
"<B>Step 7</B><br>"
"<I>The GUI sees that the PLC sets EndCMD to 0 and sets "
"EndAck to 0. The PLC waits for the GUI to set StartCMD to 0 "
"and then sets StartACK to 0.</I>"
#END

STRN	MC401
COPY	0x1	"4 0x0 0 MC402 1"

// End of Code Block TaskRoutineTest
$TSKEND	TaskRoutineTest

// Beginning of Code Block TaskUpdPlatePerc
$TSK	TaskUpdPlatePerc

// Rung TaskUpdPlatePerc#1
// Offset 0
#BEGIN FMT_COMMENT 
"Consumption ratio per second"
#END

STRPD	ST4
MATH	R38	"(1.78 * F0) / 3600.0"

// Rung TaskUpdPlatePerc#2
// Offset 14
#BEGIN FMT_COMMENT 
"Total mass consumed of outter plates"
#END

STRPD	ST4
ANDE	SM_Running	D0
MATH	TT8	"MIN(TT8 + R38, F18)"

// Rung TaskUpdPlatePerc#3
// Offset 31
#BEGIN FMT_COMMENT 
"Outter plates %25 left"
#END

STRPD	ST4
MATH	TT9	"(100 * (F18 - TT8)) / F18"

// Rung TaskUpdPlatePerc#4
// Offset 45
#BEGIN FMT_COMMENT 
"Total mass consumed of inner plates. Consumption ratio is "
"2 times as large"
#END

STRPD	ST4
ANDE	SM_Running	D0
MATH	TT10	"MIN(TT10 + (2 * R38), F18)"

// Rung TaskUpdPlatePerc#5
// Offset 64
#BEGIN FMT_COMMENT 
"Inner plates %25 left"
#END

STRPD	ST4
MATH	TT11	"(100 * (F18 - TT10)) / F18"

// End of Code Block TaskUpdPlatePerc
$TSKEND	TaskUpdPlatePerc

// Beginning of Code Block ProgNotices
$PRGRM	ProgNotices

// Rung ProgNotices#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C%3C Reagent Tank Full Condition %3E%3E%3E%3E</FONT>"
#END

STRGE	TT7	F19
STRE	D0	SM_Starting
ANDGE	TT7	F21
ORSTR
AND	B27
DEBOUNCE	D16	32768	A27

// Rung ProgNotices#2
// Offset 19
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Reagent Tank Empty Condition "
"%3E%3E%3E</FONT><br>Ideally this should be a negated "
"debounce but it doesn't exist."
#END

STRLE	TT7	F20
AND	B27
COPY	0x1	"4 0x0 0 A27 1"

// Rung ProgNotices#3
// Offset 29
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Inner Plates Fully Depleted %3E%3E</FONT>"
#END

STRLE	TT11	0.05
DEBOUNCE	D16	10000	A31

// Rung ProgNotices#4
// Offset 38
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Outer Plates Fully Depleted %3E%3E%3E</FONT>"
#END

STRLE	TT9	0.05
DEBOUNCE	D16	10000	A16

// Rung ProgNotices#5
// Offset 47
#BEGIN FMT_COMMENT 
"<FONT tsize=5>%3C%3C%3C Set Alarm Code And Alarm Active "
"Bit %3E%3E</FONT>"
#END

STR	C2
DUPBOOL
AND	A27
COPY	0x1	"4 0x0 N_ReagTankFull D18 1 0x0 1 C58 1"
POPBOOL
DUPBOOL
AND	A31
COPY	0x1	"4 0x0 N_InPlates D18 1 0x0 1 C58 1"
POPBOOL
DUPBOOL
AND	A16
COPY	0x1	"4 0x0 N_OutPlates D18 1 0x0 1 C58 1"
POPBOOL
ANDN	A27
ANDN	A16
ANDN	A31
COPY	0x1	"4 0x0 A_NoAlarm D18 1 0x0 0 C58 1"

// Rung ProgNotices#6
// Offset 92
STRN	C2
COPY	0x1	"4 0x0 A_NoAlarm D18 1 0x0 0 C58 1"

// End of Code Block ProgNotices
$PGMEND	ProgNotices

// Beginning of Code Block ProgStateMachine
$PRGRM	ProgStateMachine

// Rung ProgStateMachine#1
// Offset 0
#BEGIN FMT_COMMENT 
"System is On if it is remotely enabled and locally enabled"
#END

STR	C0
AND	C1
ANDN	MC8
OUT	C2

// Rung ProgStateMachine#2
// Offset 4
STRE	D0	SM_Stopped
AND	C2
COPY	0x1	"4 0x0 SM_Starting D0 1"

// Rung ProgStateMachine#3
// Offset 17
STRE	D0	SM_Starting
DUPBOOL
AND	ST1
TMRDOWN	T17	180000
POPBOOL
DUPBOOL
AND	A32
COPY	0x1	"4 0x0 SM_Halted D0 1"
POPBOOL
ANDN	A32
DUPBOOL
ANDE	D18	A_NoAlarm
AND	C63
TMRDOWN	T14	10000
AND	T14.Done
COPY	0x1	"4 0x0 SM_Running D0 1"
POPBOOL
ANDNE	D18	A_NoAlarm
COPY	0x1	"4 0x0 SM_Standby D0 1"

// Rung ProgStateMachine#4
// Offset 69
STRE	D0	SM_Running
DUPBOOL
ANDE	D2	A_NoAlarm
DUPBOOL
ANDE	D18	A_NoAlarm
ANDNE	D1	A_NoAlarm
COPY	0x1	"4 0x0 SM_Idle D0 1"
POPBOOL
ANDNE	D18	A_NoAlarm
COPY	0x1	"4 0x0 SM_Standby D0 1"
POPBOOL
ANDNE	D2	A_NoAlarm
COPY	0x1	"4 0x0 SM_Halted D0 1"

// Rung ProgStateMachine#5
// Offset 124
STRE	D0	SM_Idle
DUPBOOL
ANDE	D2	A_NoAlarm
DUPBOOL
ANDNE	D18	A_NoAlarm
COPY	0x1	"4 0x0 SM_Standby D0 1"
POPBOOL
ANDE	D18	A_NoAlarm
ANDE	D1	A_NoAlarm
COPY	0x1	"4 0x0 SM_Running D0 1"
POPBOOL
ANDNE	D2	A_NoAlarm
COPY	0x1	"4 0x0 SM_Halted D0 1"

// Rung ProgStateMachine#6
// Offset 179
STRE	D0	SM_Standby
DUPBOOL
ANDN	MC404
COPY	0x1	"4 0x0 1 C61 1"
POPBOOL
AND	MC404
COPY	0x1	"4 0x0 0 C61 1"
ANDE	D18	A_NoAlarm
COPY	0x1	"4 0x0 SM_Starting D0 1 0x0 0 MC404 1"

// Rung ProgStateMachine#7
// Offset 211
STRE	D0	SM_Stopping
DUPBOOL
ANDN	MC404
COPY	0x1	"4 0x0 1 C61 1"
POPBOOL
AND	MC404
DUPBOOL
AND	C0
COPY	0x1	"4 0x0 0 MC404 1 0x0 0 C61 1 0x0 SM_Stopped D0 1"
POPBOOL
ANDN	C0
COPY	0x1	"4 0x0 0 MC404 1 0x0 0 C61 1 0x0 SM_RemoteDisable D0 1"

// Rung ProgStateMachine#8
// Offset 247
STRE	D0	SM_RemoteDisable
AND	C0
DUPBOOL
ANDE	D2	A_NoAlarm
COPY	0x1	"4 0x0 SM_Stopped D0 1"
POPBOOL
ANDNE	D2	A_NoAlarm
COPY	0x1	"4 0x0 SM_Halted D0 1"

// Rung ProgStateMachine#9
// Offset 279
STRE	D0	SM_Halted
DUPBOOL
ANDN	MC404
COPY	0x1	"4 0x0 1 C61 1"
POPBOOL
AND	MC404
COPY	0x1	"4 0x0 0 C61 1"
AND	MC9
COPY	0x1	"4 0x0 SM_Stopped D0 1 0x0 0 MC404 1 0x0 0 MC9 1"

// Rung ProgStateMachine#10
// Offset 308
STRN	C2
DUPBOOL
ANDNE	D0	SM_Stopped
ANDNE	D0	SM_Halted
ANDNE	D0	SM_RemoteDisable
COPY	0x1	"4 0x0 SM_Stopping D0 1"
POPBOOL
STRE	D0	SM_Stopped
ORE	D0	SM_Halted
ANDSTR
ANDN	C0
COPY	0x1	"4 0x0 SM_RemoteDisable D0 1"

// Rung ProgStateMachine#11
// Offset 352
STRE	D0	SM_Halted
OUT	C62

// Rung ProgStateMachine#12
// Offset 358
STRE	D0	SM_Starting
ORE	D0	SM_Running
ORE	D0	SM_Idle
OUT	C60

// Rung ProgStateMachine#13
// Offset 374
STR	ST1
COPY	0x1	"4 0x0 D0 MHR101 1"

// End of Code Block ProgStateMachine
$PGMEND	ProgStateMachine

// Beginning of Code Block ProgDraining
$PRGRM	ProgDraining

// Rung ProgDraining#1
// Offset 0
#BEGIN FMT_COMMENT 
"<B>Step 5</B><br>"
"<I>The PLC sends the End signal. This action is immediate "
"for the PLC. The GUI waits for the PLC to signal the end of "
"the routine, either automatically or upon receiving an "
"abort request. This action requires waiting.</I>"
#END

STR	ST1
COPY	0x1	"4 0x0 1 MHR202 1"

// Rung ProgDraining#2
// Offset 7
STR	C10
COPY	0x1	"4 0x0 1 C7 1"

// Rung ProgDraining#3
// Offset 13
STRN	C10
COPY	0x1	"4 0x0 0 C7 1"

// Rung ProgDraining#4
// Offset 19
STRN	C10
ANDN	C7
COPY	0x1	"4 0x0 1 MC404 1"

// Rung ProgDraining#5
// Offset 26
STR	MC404
EXIT

// End of Code Block ProgDraining
$PGMEND	ProgDraining

// Beginning of Code Block ProgAbortDrain
$PRGRM	ProgAbortDrain

// Rung ProgAbortDrain#1
// Offset 0
STR	ST1
COPY	0x1	"4 0x0 0 C7 1"

// Rung ProgAbortDrain#2
// Offset 6
STR	C7
COPY	0x1	"4 0x0 1 MC404 1"

// Rung ProgAbortDrain#3
// Offset 12
STR	MC404
EXIT

// End of Code Block ProgAbortDrain
$PGMEND	ProgAbortDrain

// Beginning of Code Block ProgAbortRinsing
$PRGRM	ProgAbortRinsing

// Rung ProgAbortRinsing#1
// Offset 0
STR	ST1
COPY	0x1	"4 0x0 1 MC404 1"

// Rung ProgAbortRinsing#2
// Offset 6
STR	MC404
EXIT

// End of Code Block ProgAbortRinsing
$PGMEND	ProgAbortRinsing

// Beginning of Code Block ProgRinsing
$PRGRM	ProgRinsing

// Rung ProgRinsing#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><FONT "
"tsize=5></FONT> <br> <br>"
"<FONT tsize=5>TaskRinsing</FONT><br><FONT tsize=5></FONT> "
"<br>pending"
#END

STR	ST1
COPY	0x1	"4 0x0 1 MHR202 1"

// Rung ProgRinsing#2
// Offset 7
STRN	MC404
COPY	0x1	"4 0x0 1 C16 1 0x0 1 C49 1"
ENTASK	TaskPropValvePID	0x0	0	0x1

// Rung ProgRinsing#3
// Offset 18
STR	X2
AND	C16
AND	C49
COPY	0x1	"4 0x0 1 C3 1"

// Rung ProgRinsing#4
// Offset 26
STR	C3
TMRDOWN	T16	10000

// Rung ProgRinsing#5
// Offset 29
STR	T16.Done
COPY	0x1	"4 0x0 0 C16 1 0x0 0 C49 1 0x0 0 C3 1"
HALT	TaskPropValvePID

// Rung ProgRinsing#6
// Offset 38
STR	T16.Done
ANDN	C16
COPY	0x1	"4 0x0 1 MC404 1"

// End of Code Block ProgRinsing
$PGMEND	ProgRinsing

// Beginning of Code Block TaskResetPlates
$TSK	TaskResetPlates

// Rung TaskResetPlates#1
// Offset 0
#BEGIN FMT_COMMENT 
"Reset Media Event"
#END

STR	C29
ANDPD	MC6
MOVE	0	TT10
MOVE	0	TT8
COPY	0x1	"4 0x0 0 TT0 1 0x0 0 TT4 1 0x0 0 TT1 1 0x0 0 TT6 1 0x0 0 TT5 1"
COPY	0x1	"4 0x0 0 MC6 1"

// Rung TaskResetPlates#2
// Offset 26
#BEGIN FMT_COMMENT 
"Reset Media Event"
#END

STR	C29
ANDPD	MC7
MOVE	0	TT10
COPY	0x1	"4 0x0 0 TT0 1 0x0 0 TT4 1 0x0 0 TT1 1 0x0 0 TT6 1 0x0 0 TT5 1"
COPY	0x1	"4 0x0 0 MC7 1"

// End of Code Block TaskResetPlates
$TSKEND	TaskResetPlates

// Beginning of Code Block TaskFilterError
$TSK	TaskFilterError

// Rung TaskFilterError#1
// Offset 0
STR	ST3
STR	C100
CNT	CT1	D100

// Rung TaskFilterError#2
// Offset 4
STRE	CT1.Acc	D20
OUT	C100

// Rung TaskFilterError#3
// Offset 9
STR	C64
STR	C100
ANDGT	CT0.Acc	0
STRPD	ST1
UDC	CT0	DST511	DST511

// Rung TaskFilterError#4
// Offset 20
NOP

// End of Code Block TaskFilterError
$TSKEND	TaskFilterError

// Beginning of Code Block $tBottomOfScan
$TSK	$tBottomOfScan

// Rung $tBottomOfScan#1
// Offset 0
#BEGIN FMT_COMMENT 
"<FONT tsize=5>AMS SafeGuard H2O</FONT><br>"
"<FONT tsize=5></FONT> <br>"
"<FONT tsize=5>$tBottomOfScan</FONT><br><FONT "
"tsize=5></FONT> <br>"
"This is the last ladder task after the main ladder.  By "
"taking the necessary working memory variables and writing "
"them to the physical outputs and/or Modbus and/or any other "
"device requiring updates."
#END

NOP

// Rung $tBottomOfScan#2
// Offset 1
#BEGIN FMT_COMMENT 
"Write local memory bit variables (C) into digital outputs (Y)."
#END

STR	ST1
MAPIO	"2 C2 Y0 C21 Y1 C22 Y2 C23 Y3 C6 Y8 C7 Y7 C8 Y6 C17 Y11 C18 Y12"

// Rung $tBottomOfScan#3
// Offset 23
#BEGIN FMT_COMMENT 
"Set the inlet valve on/off only if enabled."
#END

STR	ST1
DUPBOOL
AND	C48
MAPIO	"2 C16 Y10"
POPBOOL
ANDN	C48
COPY	0x1	"4 0x0 0 Y10 1"

// Rung $tBottomOfScan#4
// Offset 38
#BEGIN FMT_COMMENT 
"Set green button LED"
#END

STR	ST1
AND	C2
OUT	Y13

// Rung $tBottomOfScan#5
// Offset 41
#BEGIN FMT_COMMENT 
"Set red button LED"
#END

STR	ST1
ANDN	C2
OUT	Y14

// Rung $tBottomOfScan#6
// Offset 44
#BEGIN FMT_COMMENT 
"Set galvanostat output if enabled"
#END

STR	ST1
AND	C41
SCALE	R8	SC36	SC37	SC38	SC39	WY0
MAPIO	"2 C5 Y28"

// Rung $tBottomOfScan#7
// Offset 57
#BEGIN FMT_COMMENT 
"Set galvanostat output enable for 10V models."
#END

STR	ST1
AND	C41
DUPBOOL
AND	C5
COPY	0x1	"4 0x0 0 WY5 1"
POPBOOL
ANDN	C5
COPY	0x1	"4 0x0 32767 WY5 1"

// Rung $tBottomOfScan#8
// Offset 75
#BEGIN FMT_COMMENT 
"Set ultrasonic output if enabled"
#END

STR	ST1
AND	C43
MAPIO	"2 C3 Y24"

// Rung $tBottomOfScan#9
// Offset 82
#BEGIN FMT_COMMENT 
"Set polarity output if enabled"
#END

STR	ST1
AND	C42
MAPIO	"2 C4 Y5 C30 Y16 C30 Y17 C31 Y20 C31 Y21"

// Rung $tBottomOfScan#10
// Offset 97
#BEGIN FMT_COMMENT 
"Set acid pump rate from PID result via pH."
#END

STR	ST1
DUPBOOL
AND	C34
AND	C50
COPY	0x1	"4 0x0 R10 WY1 1"
POPBOOL
ANDN	C34
COPY	0x1	"4 0x0 0 WY1 1"

// Rung $tBottomOfScan#11
// Offset 115
#BEGIN FMT_COMMENT 
"Set proportional valve rate from PID result via flow rate."
#END

STR	ST1
DUPBOOL
AND	C49
AND	C51
COPY	0x1	"4 0x0 R31 WY4 1"
POPBOOL
ANDN	C49
COPY	0x1	"4 0x0 0 WY4 1"

// Rung $tBottomOfScan#12
// Offset 133
#BEGIN FMT_COMMENT 
"Set acid pump rate from PID result via conductivity."
#END

STR	ST1
DUPBOOL
AND	C34
AND	C52
COPY	0x1	"4 0x0 R10 WY1 1"
POPBOOL
ANDN	C34
COPY	0x1	"4 0x0 0 WY1 1"

// Rung $tBottomOfScan#13
// Offset 151
#BEGIN FMT_COMMENT 
"Set modbus alarm bits for UI"
#END

STR	C29
DUPBOOL
ANDNE	D18	A_NoAlarm
MAPIO	"2 A27 MC127 A31 MC131 A16 MC116"
POPBOOL
ANDE	D18	A_NoAlarm
COPY	0x0	"4 0x0 0 MC127 1 0x0 0 MC131 1 0x0 0 MC116 1"

// Rung $tBottomOfScan#14
// Offset 181
#BEGIN FMT_COMMENT 
"Set modbus alarm bits for UI"
#END

STR	C29
DUPBOOL
ANDNE	D1	A_NoAlarm
MAPIO	"2 A1 MC101 A2 MC102 A3 MC103 A4 MC104 A6 MC106 A7 MC107"
POPBOOL
ANDE	D1	A_NoAlarm
COPY	0x1	"4 0x0 0 MC101 1 0x0 0 MC102 1 0x0 0 MC103 1 0x0 0 MC104 1 0x0 0 MC106 1 0x0 0 MC107 1"

// Rung $tBottomOfScan#15
// Offset 219
#BEGIN FMT_COMMENT 
"Set modbus alarm bits for UI"
#END

STR	C29
DUPBOOL
ANDNE	D3	A_NoAlarm
MAPIO	"2 A8 MC108 A10 MC110 A15 MC115 A21 MC121 A30 MC130 A33 MC133"
POPBOOL
ANDE	D3	A_NoAlarm
COPY	0x1	"4 0x0 0 MC108 1 0x0 0 MC110 1 0x0 0 MC115 1 0x0 0 MC121 1 0x0 0 MC130 1 0x0 0 MC133 1"

// Rung $tBottomOfScan#16
// Offset 257
#BEGIN FMT_COMMENT 
"Set modbus alarm bits for UI"
#END

STR	C29
DUPBOOL
ANDNE	D2	A_NoAlarm
MAPIO	"2 A5 MC105 A9 MC109 A11 MC111 A12 MC112 A16 MC116 A17 MC117 A18 MC118 A19 MC119 A20 MC120 A22 MC122 A23 MC123 A32 MC132 A34 MC134"
POPBOOL
ANDE	D2	A_NoAlarm
COPY	0x1	"4 0x0 0 MC105 1 0x0 0 MC109 1 0x0 0 MC111 1 0x0 0 MC112 1 0x0 0 MC116 1 0x0 0 MC117 1 0x0 0 MC118 1 0x0 0 MC119 1 0x0 0 MC120 1 0x0 0 MC122 1 0x0 0 MC123 1 0x0 0 MC132 1 0x0 0 MC134 1"

// Rung $tBottomOfScan#17
// Offset 316
#BEGIN FMT_COMMENT 
"Set modbus sensor bits for UI"
#END

STR	C29
MAPIO	"2 C53 MC212 C54 MC213 C9 MC214 C46 MC215 C10 MC216"

// Rung $tBottomOfScan#18
// Offset 330
#BEGIN FMT_COMMENT 
"Set modbus sensor gauge values for UI"
#END

STR	C29
MATH	MHR1	"ROUND(R19 * 100)"
MATH	MHR2	"ROUND(R18 * 100)"
MATH	MHR3	"ROUND(R13 * 100)"
MATH	MHR4	"ROUND(R9 * 100)"
MATH	MHR6	"ROUND(R16 * 100)"
MATH	MHR7	"ROUND(R17 * 100)"
MATH	MHR8	"ROUND(TT7 * 100)"
MATH	MHR9	"ROUND(R14 * 100)"
MATH	MHR10	"ROUND(TT9 * 100)"
MATH	MHR11	"ROUND(TT11 * 100)"

// End of Code Block $tBottomOfScan
$TSKEND	$tBottomOfScan

#BEGIN ELEMENT_DOC
"X0","FLAGS = REST_READONLY","XRemoteEnable","Input / Bit","Remote enable"
"X1","FLAGS = REST_READONLY","XRemoteStart","",""
"X2","FLAGS =","XGenLevelHiOn","Input / Bit","generator flow cell level sensor hi"
"X4","FLAGS =","XReagntLoLoOn","Input / Bit","reagent tank level sensor lo-lo"
"X5","FLAGS =","XReagntLoOn","Input / Bit","reagent tank level sensor lo"
"X6","FLAGS =","XReagntHiOn","Input / Bit","reagent tank level sensor hi"
"X7","FLAGS =","XReagntHiHiOn","Input / Bit","reagent tank level sensor hi-hi"
"X8","FLAGS =","XGenLevelLoOn","Input / Bit","vent overflow level sensor hi"
"X10","FLAGS =","XGreenButton","Input / Bit","push button to start machine or reflect started"
"X11","FLAGS =","XRedButton","Input / Bit","push button to stop machine or reflect stopped"
"X12","FLAGS = REST_READONLY","XFilter1Backwash","",""
"X13","FLAGS = REST_READONLY","XFilter2Backwash","",""
"X14","FLAGS = REST_READONLY","XFilter3Backwash","",""
"X15","FLAGS = REST_READONLY","XFilter4Backwash","",""
"Y0","FLAGS =","YSystemOn","Output / Bit","status signal for system running"
"Y1","FLAGS =","YErrorOn","Output / Bit","status signal for errors exist"
"Y2","FLAGS =","YWarnOn","Output / Bit","status signal for warnings exist"
"Y3","FLAGS =","YInfoOn","Output / Bit","status signal for info exist"
"Y4","FLAGS =","YAcidPumpOn","Output / Bit","acid pump on/off"
"Y5","FLAGS =","YPolarityOn","Output / Bit","polarity on/off"
"Y6","FLAGS =","YReagntPumpOn","Output / Bit","reagent pump on/off"
"Y7","FLAGS =","YDrainPumpOn","Output / Bit","drain pump on/off"
"Y10","FLAGS =","YInletValveOn","Output / Bit","inlet valve on/off"
"Y11","FLAGS =","YGenValveOn","Output / Bit","generator cell drain valve on/off"
"Y13","FLAGS =","YGreenButtonOn","Output / Bit","panel button LED to reflect running"
"Y14","FLAGS =","YRedButtonOn","Output / Bit","panel button LED to reflect stopped"
"Y16","FLAGS =","YPolarity1OnR1","Output / Bit","h-bridge polarity position 1 on/off relay 1"
"Y17","FLAGS =","YPolarity1OnR3","Output / Bit","h-bridge polarity position 1 on/off relay 3"
"Y20","FLAGS =","YPolarity2OnR2","Output / Bit","h-bridge polarity position 2 on/off relay 2"
"Y21","FLAGS =","YPolarity2OnR4","Output / Bit","h-bridge polarity position 2 on/off relay 4"
"Y24","FLAGS =","YUltrasonicsOn","Output / Bit","ultrasonics on/off"
"Y28","FLAGS =","YGalvanostatOn","Output / Bit","galvanostat on/off"
"WX1","FLAGS =","WXTempOutlet","Input / SWord","raw temperature outlet value (see module/scale for ranges)"
"WX2","FLAGS =","WXTankLevel","Input / SWord","raw level sensor value (see module/scale for ranges)"
"WX3","FLAGS =","WXpH","Input / SWord","raw pH sensor value (see module/scale for ranges)"
"WX4","FLAGS =","WXConductivity","Input / SWord","raw conductivity sensor value (see module/scale for ranges)"
"WX20","FLAGS =","WXFlowInRate","Input / SWord","raw flow rate inlet value (see module/scale for ranges)"
"WX21","FLAGS =","WXTempInlet","Input / SWord","raw temperature of inlet value (see module/scale for ranges)"
"WX22","FLAGS =","WXVoltFeedback","Input / SWord","raw voltage feedback from galvanostat (see module/scale for ranges)"
"WX23","FLAGS =","WXAmpFeedback","Input / SWord","raw galvanostat amperage feedback value (see module/scale for ranges)"
"WY0","FLAGS =","WYAmperageOut","Output / SWord","scaled galvanostat out (see module/scale for ranges)"
"WY1","FLAGS =","WYAcidPumpRate","Output / SWord","scaled acid pump rate (see module/scale for ranges)"
"WY4","FLAGS =","WYPropValve","Output / SWord","scaled proportional valve out (see module/scale for ranges)"
"WY5","FLAGS =","WYGalvanostatOn","Output / SWord","galvanostat on/off for models requiring full 10V signal"
"C0","FLAGS = REST_READONLY","CRemoteEnable","Working / Bit","remote signal ok to start"
"C1","FLAGS =","COnTrigger","Working / Bit","local signal ok to start"
"C2","FLAGS =","CSystemOn","Working / Bit","system is on"
"C3","FLAGS =","CUltrasonicsOn","Working / Bit","ultrasonics start/stop"
"C4","FLAGS =","CPolarityOn","Working / Bit","polarity start/stop"
"C5","FLAGS =","CGalvanostatOn","Working / Bit","galvanostat start/stop"
"C6","FLAGS =","CAcidPumpOn","Working / Bit","acid pump start/stop"
"C7","FLAGS =","CDrainPumpOn","Working / Bit","drain pump start/stop"
"C8","FLAGS =","CReagntPumpOn","Working / Bit","reagent pump start/stop"
"C9","FLAGS =","CAcidLevelLoOn","Working / Bit","acid tank level sensor lo"
"C10","FLAGS =","CGenLevelLo","Working / Bit","generator cell level sensor lo"
"C11","FLAGS =","CReagntLoLoOn","Working / Bit","reagent tank level sensor lo-lo"
"C12","FLAGS =","CReagntLoOn","Working / Bit","reagent tank level sensor lo"
"C13","FLAGS =","CReagntHiOn","Working / Bit","reagent tank level sensor hi"
"C14","FLAGS =","CReagntHiHiOn","Working / Bit","reagent tank level sensor hi-hi"
"C15","FLAGS =","CVentLevelOn","Working / Bit","vent overflow level sensor hi"
"C16","FLAGS =","CInletValveOn","Working / Bit","inlet valve"
"C17","FLAGS =","CGenValveOn","Working / Bit","generator cell drain valve"
"C18","FLAGS =","CReagntValveOn","Working / Bit","reagent tank drain valve"
"C19","FLAGS =","CFileLogSuccess","Working / Bit","file log success"
"C20","FLAGS =","CFileLogError","Working / Bit","file log error"
"C21","FLAGS =","CErrorOn","Working / Bit","error events exist"
"C22","FLAGS =","CWarnOn","Working / Bit","warning events exist"
"C23","FLAGS =","CInfoOn","Working / Bit","info events exist"
"C24","FLAGS =","CPolaritySyncUS","Config / Bit","ultrasonics synced with polarity switch"
"C25","FLAGS =","CAcidLevelLoLoOn","Working / Bit","acid tank level sensor lo-lo"
"C26","FLAGS =","CEnableErrors","Config / Bit","run with/without error checking"
"C27","FLAGS = REST_READONLY","CEnableWarnings","Config / Bit","run with/without warnings checking"
"C28","FLAGS = REST_READONLY","CEnableInfo","Config / Bit","run with/without info checking"
"C29","FLAGS =","CEnableModbus","Working / Bit","run with/without Modbus calls"
"C30","FLAGS =","CPolarity1On","Working / Bit","h-bridge polarity position 1"
"C31","FLAGS =","CPolarity2On","Working / Bit","h-bridge polarity position 2"
"C32","FLAGS =","CPolaritySwitch","Working / Bit","boolean during polarity h bridge switching"
"C33","FLAGS =","CDemoMode","Config / Bit","turn demo valves on/off"
"C34","FLAGS =","CEnableAcidPump","Config / Bit","run with/without acid pump"
"C35","FLAGS =","CGreenPressed","Working / Bit","stores if green button pressed last"
"C36","FLAGS =","CRedPressed","Working / Bit","stores if red button pressed last"
"C37","FLAGS =","CPolSyncStart","Working / Bit","true for the duration of ultrasonics to sync with polarity"
"C38","FLAGS =","CLoadWebPages","on/off bit","true to refreshing web user pages from SD card to RAM"
"C39","FLAGS =","CEnableRandom","Config / Bit","run with/without random sensor values"
"C40","FLAGS =","CHmiOn","Working / Bit","hmi signal ok to start"
"C41","FLAGS =","CEnableGalvan","Config / Bit","run with/without galvanostat"
"C42","FLAGS =","CEnablePolarity","Config / Bit","run with/without polarity"
"C43","FLAGS =","CEnableUltraSon","Config / Bit","run with/without ultrasonics"
"C44","FLAGS =","CPrcsngStartStop","Working / Bit","whether a start or a stop command are being processed"
"C45","FLAGS =","CGalvHasAmpFB","Config / Bit","whether galvanostat gives an amperage feedback"
"C46","FLAGS =","CGenLevelHi","Working / Bit","generator cell level sensor hi"
"C47","FLAGS =","CEnableUSFan","Config / Bit","run with/without ultrasonic fan"
"C48","FLAGS =","CEnableInletVal","Config / Bit","run with/without inlet valve"
"C49","FLAGS =","CPropValveOn","Working / Bit","proportional valve"
"C50","FLAGS =","CEnableAcidPID","Config / Bit","run with/without acid pump PID"
"C51","FLAGS =","CEnablePropPID","Config / Bit","run with/without proportional valve PID"
"C52","FLAGS =","CEnableCondPID","Config / Bit","run with/without conductivity PID"
"C53","FLAGS =","CLeakSensor","Working / Bit","leak sensor on/off"
"C54","FLAGS =","CAcidLevelHi","Working / Bit","acid tank level hi"
"C56","FLAGS =","CEnableCondPPID","Config / Bit","run with/without conductivity pulse PID"
"C57","FLAGS =","CStopDrain","",""
"C58","FLAGS =","CNoticeOn","","Bit for whether or not there is an active notice"
"C59","FLAGS =","CEnableNotices","",""
"C60","FLAGS =","CFlowingStates","","The system is on and water is flowing but not necessarily generating"
"C61","FLAGS = REST_READONLY","C61_Drain","",""
"C62","FLAGS = REST_READONLY","CHaltedState","",""
"C63","FLAGS = REST_READONLY","CRemoteOn","",""
"C64","FLAGS = REST_READONLY","CFilter1Backwash","",""
"C65","FLAGS = REST_READONLY","CFilter2Backwash","",""
"C66","FLAGS = REST_READONLY","CFilter3Backwash","",""
"C67","FLAGS = REST_READONLY","CFilter4Backwash","",""
"C100","FLAGS = REST_READONLY","CBWCntReset","",""
"D0","FLAGS =","DSystemMode","Default / SDWord","latest mode (see SystemModes)"
"D1","FLAGS =","DWarnCode","Default / SDWord","latest warning (see WarningCodes)"
"D2","FLAGS =","DErrorCode","Default / SDWord","latest error (see ErrorCodes)"
"D3","FLAGS =","DInfoCode","Default / SDWord","latest info (see InfoCodes)"
"D4","FLAGS =","DUltraDuration","Default / SDWord","ultrasonic duration off in milliseconds (o = disabled/off)"
"D5","FLAGS =","DUltraInterval","Default / SDWord","ultrasonic interval on in milliseconds (o = disabled/off)"
"D6","FLAGS =","DPolarityCycle","Default / SDWord","polarity cycle time in milliseconds (0 = disabled/off)"
"D7","FLAGS =","DErrorDebounOn","Default / SDWord","error debounce on stability in milliseconds"
"D8","FLAGS =","DInfoDebounOn","Default / SDWord","info debounce on stability in milliseconds"
"D9","FLAGS = REST_READONLY","DInfoDebounOff","Default / SDWord","info debounce off stability in milliseconds"
"D10","FLAGS = REST_READONLY","DWarnDebounOn","Default / SDWord","warning debounce on stability in milliseconds"
"D11","FLAGS = REST_READONLY","DWarnDebounOff","Default / SDWord","warning debounce off stability in milliseconds"
"D12","FLAGS =","DErrorDebounOff","Default / SDWord","error debounce off stability in milliseconds"
"D13","FLAGS =","DInputDebounOn","Default / SDWord","digital input debounce on stability in milliseconds"
"D14","FLAGS =","DInputDebounOff","Default / SDWord","digital input debounce off stability in milliseconds"
"D15","FLAGS =","DButtonDebounOn","Default / SDWord","button input debounce on stability in milliseconds"
"D16","FLAGS =","DDebounNoticeOn","","notice debounce on in miliseconds"
"D17","FLAGS =","DDebounNoticeOff","","notice debounce on in miliseconds"
"D18","FLAGS =","DNoticeCode","","Code for the notice"
"D19","FLAGS = REST_READONLY","DBackwashFreq","",""
"D20","FLAGS = REST_READONLY","DBackwCountDown","",""
"R0","FLAGS =","RFlowRateMin","Limit / Real","flow rate minimum"
"R1","FLAGS =","RFlowRateMax","Limit / Real","flow rate maximum"
"R2","FLAGS =","RConductMin","Limit / Real","conductivity minimum"
"R3","FLAGS =","RConductMax","Limit / Real","conductivity maximum"
"R4","FLAGS =","RpHMin","Limit / Real","pH minimum"
"R5","FLAGS =","RpHMax","Limit / Real","pH maximum"
"R6","FLAGS =","RORPMin","Limit / Real","ORP minimum"
"R7","FLAGS =","RORPMax","Limit / Real","ORP maximum"
"R8","FLAGS =","RAmperageOut","Scaled / Real","scaled galvanostat amperage in amps (see module/scale for ranges)"
"R9","FLAGS =","RFlowInRate","Scaled / Real","scaled flow incoming rate in L/min (see module/scale for ranges)"
"R10","FLAGS =","RAcidPumpRate","Scaled / Real","scaled acid pump rate in mL/min (see module/scale for ranges)"
"R11","FLAGS =","RDrainPumpRate","Scaled / Real","scaled drain pump rate in XXX (see module/scale for ranges)"
"R12","FLAGS =","RReagntPumpRate","Scaled / Real","scaled reagent pump rate in mL/min (see module/scale for ranges)"
"R13","FLAGS =","RpH","Scaled / Real","scaled ph sensor value in pH (see module/scale for ranges)"
"R14","FLAGS =","RConductivity","Scaled / Real","scaled conductivity sensor value in mS (see module/scale for ranges)"
"R15","FLAGS =","RORP","Scaled / Real","scaled orp sensor value in mV (see module/scale for ranges)"
"R16","FLAGS =","RTempInlet","Scaled / Real","scaled temperature in value in C (see module/scale for ranges)"
"R17","FLAGS =","RTempOutlet","Scaled / Real","scaled temperature out value in C (see module/scale for ranges)"
"R18","FLAGS =","RAmpFeedback","Scaled / Real","scaled amperage feedback value in amps (see module/scale for ranges)"
"R19","FLAGS =","RVoltFeedback","Scaled / Real","scaled voltage feedback value in volts (see module/scale for ranges)"
"R20","FLAGS =","RVoltInfo","Limit / Real","voltage Info level in volts"
"R21","FLAGS =","RVoltAlarm","Limit / Real","voltage alarm level in volts"
"R22","FLAGS =","RTempInfo","Limit / Real","temperature info level in C"
"R23","FLAGS =","RTempAlarm","Limit / Real","temperature alarm level in C"
"R24","FLAGS =","RMediaInfo","Limit / Real","media info level in %"
"R25","FLAGS =","RMediaAlarm","Limit / Real","media alarm level in %"
"R26","FLAGS =","RMaxAmerage","Limit / Real","maxium amperage devices can supply in amps"
"R27","FLAGS =","RTempVolt","Temp / Real","temporary holding variable between calculations and functions"
"R28","FLAGS =","RTankLevel","Scaled / Real","scaled tank level in meters (see module/scale for ranges)"
"R29","FLAGS =","RpHFiltered","Temp / Real","scaled and filtered value for pH for acid pump PID"
"R30","FLAGS =","RTankCurrVol","Temp / Real","reagent tank current volume in meters3"
"R31","FLAGS =","RPropValve","Scaled / Real","tbd"
"R32","FLAGS =","RFlowFiltered","Temp / Real","scaled and filtered value for flow rate for prop valve PID"
"R33","FLAGS =","RCondFiltered","Temp / Real","scaled and filtered value for conductivity for acid pump PID"
"R34","FLAGS =","RAcidDutyCycle","Percent / Real","percentage for acid pump duty cycle"
"R35","FLAGS =","RAcidDutyOn","Temp / Real","time acid pump is on in msec"
"R36","FLAGS =","RAcidDutyOff","Temp / Real","time acid pump is off in msec"
"R37","FLAGS =","StoredRoutineID","",""
"R38","FLAGS =","RMediaMConsRate","","Plates mas consumption rate"
"R39","FLAGS = REST_READONLY","RBackwashCount","","Counts backwashes attempts per hour"
"T0","FLAGS =","TPolDuration","TImer Struct","timer for switching polarity"
"T0.Done","FLAGS =","","TImer Struct",""
"T1","FLAGS =","TUltraInterval","TImer Struct","timer for ultrasonics interval (off time)"
"T1.Done","FLAGS =","TUltraInterval.D","TImer Struct",""
"T2","FLAGS =","TUltraDuration","TImer Struct","timer for ultrasonics duration (on time)"
"T2.Done","FLAGS =","TUltraDuration.D","TImer Struct",""
"T3","FLAGS =","TPolPause3","TImer Struct","timer for pause between h bridge switching"
"T3.Done","FLAGS =","","TImer Struct",""
"T4","FLAGS =","TPolPause4","TImer Struct","timer for pause between h bridge switching"
"T4.Done","FLAGS =","","TImer Struct",""
"T5","FLAGS =","TPolPause5","TImer Struct","timer for pause between h bridge switching"
"T5.Done","FLAGS =","","TImer Struct",""
"T6","FLAGS =","TUltraDuation","TImer Struct","timer for ultrasonics sync duration (on time)"
"T6.Done","FLAGS =","TUltraDuation.Do","TImer Struct","timer done for ultrasonics sync duration (on time)"
"T7","FLAGS =","TCondRangeTO","TImer Struct","timer for conductivity timeout"
"T8","FLAGS =","TFlowRangeTO","TImer Struct","timer for flow rate timeout"
"T9","FLAGS =","TGenNotFullTO","TImer Struct","timer for generator not filled timeout"
"T10","FLAGS =","TORPRangeTO","TImer Struct","timer for orp range timeout"
"T11","FLAGS =","TpHRangeTO","TImer Struct","timer for ph range timeout"
"T12","FLAGS =","TMediaAlarm","TImer Struct","timer for media timeout"
"T13","FLAGS =","TLoadWebPagesUP","Timer Struct","timer for creating web pages directory"
"T13.Done","FLAGS =","TLoadWebPagesUP.","Timer Struct","timer for creating web pages directory"
"T15","FLAGS = REST_READONLY","TGenEmptyTO","TimerStruct","timer for generator empty timeout"
"T17","FLAGS = REST_READONLY","TStartupTimeout","",""
"CT0","FLAGS = REST_READONLY","CTBackwasFreqCnt","",""
"SS1","FLAGS =","SSFileName","File / String","PLC specific file name prefix"
"SL0","FLAGS =","SL_Message0","Message / String","latest message string"
"MC1","FLAGS =","MC1_UIStartCMD","Modbus / Bit","modbus UI start bit"
"MC2","FLAGS =","MC2_UIStopCMD","Modbus / Bit","modbus UI stop bit"
"MC6","FLAGS =","MC6_RstAllPltCMD","Modbus / Bit","Reset All plates CMD"
"MC7","FLAGS = REST_READONLY","MC7_RstInPltsCMD","","Reset Inner plates CMD"
"MC8","FLAGS =","MC8_RestricStart","","Address to lock the start of the process from the UI"
"MC9","FLAGS =","MC9_HaltACK","","Bit that the GUI sets to 1 to acknowledge errors. Used to go from HALTED to STOPPED"
"MC101","FLAGS =","MC101_AORP","Modbus / Bit","modbus alarm: AORPRange"
"MC102","FLAGS =","MC102_ApH","Modbus / Bit","modbus alarm: ApHRange"
"MC103","FLAGS =","MC103_ACond","Modbus / Bit","modbus alarm: ACondRange"
"MC104","FLAGS =","MC104_AFlow","Modbus / Bit","modbus alarm: AFlowRange"
"MC105","FLAGS =","MC105_ATemp","Modbus / Bit","modbus alarm: ATempRange"
"MC106","FLAGS =","MC106_GenNotFull","Modbus / Bit","modbus alarm: AGenNotFull"
"MC107","FLAGS =","MC107_GenEmpty","",""
"MC108","FLAGS =","MC108_AcidTankLo","",""
"MC109","FLAGS =","MC109_AcidEmpty","",""
"MC110","FLAGS = REST_READONLY","MC110_VoltInfo","",""
"MC111","FLAGS =","MC111_VoltAlarm","",""
"MC112","FLAGS =","MC112_ReagntOF","",""
"MC115","FLAGS = REST_READONLY","MC115_OutPlatesI","",""
"MC116","FLAGS = REST_READONLY","MC116_OutPlatesN","",""
"MC117","FLAGS =","MC117_ORPRangeTO","",""
"MC118","FLAGS =","MC118_pHRangeTO","",""
"MC119","FLAGS =","MC119_CondRangTO","",""
"MC120","FLAGS =","MC120_FlowRangTO","",""
"MC121","FLAGS = REST_READONLY","MC121_TempInfo","",""
"MC122","FLAGS =","MC122_GenNotFuTO","Modbus / Bit","modbus alarm: AGenNotFullTO"
"MC123","FLAGS =","MC123_GenEmptyTO","",""
"MC127","FLAGS = REST_READONLY","MC127_ReTankFull","",""
"MC130","FLAGS = REST_READONLY","MC130_InPlatesI","",""
"MC131","FLAGS = REST_READONLY","MC131_InPlatesN","",""
"MC132","FLAGS = REST_READONLY","MC132_StartTO","",""
"MC133","FLAGS = REST_READONLY","MC133_Backwash","",""
"MC134","FLAGS = REST_READONLY","MC134_TooManyBWE","",""
"MC212","FLAGS =","MC212_LeakSensor","Modbus / Bit","modbus leak sensor"
"MC213","FLAGS =","MC213_Acid_Lvl_H","Modbus / Bit","modbus acid tank level hi"
"MC214","FLAGS =","MC214_Acid_Lvl_L","Modbus / Bit","modbus acid tank level lo"
"MC215","FLAGS =","MC215_Gen_Lvl_H","Modbus / Bit","modbus generator flow cell level hi"
"MC216","FLAGS =","MC216_Gen_Lvl_L","Modbus / Bit","modbus generator flow cell level lo"
"MC401","FLAGS =","StartRoutineCMD","",""
"MC402","FLAGS =","StartRoutineACKS","",""
"MC403","FLAGS =","AbortRoutineCMD","",""
"MC404","FLAGS =","EndRoutineCMD","",""
"MC405","FLAGS =","EndRoutineACK","",""
"MC602","FLAGS =","MC_InletForce","Modbus / Bit","modbus actuator is being forced from GUI"
"MC603","FLAGS =","MC_InletValue","Modbus / Bit","modbus status value for actuator"
"MC610","FLAGS =","MC_DrainForce","Modbus / Bit","modbus actuator is being forced from GUI"
"MC611","FLAGS =","MC_DrainValue","Modbus / Bit","modbus status value for actuator"
"MHR1","FLAGS =","MHR1_Volt","Modbus / SWord","modbus voltage value"
"MHR2","FLAGS =","MHR2_Amp","Modbus / SWord","modbus amperage value"
"MHR3","FLAGS =","MHR3_pH","Modbus / SWord","modbus pH value"
"MHR4","FLAGS =","MHR4_Flow","Modbus / SWord","modbus flow rate"
"MHR5","FLAGS =","MHR5_InPlatePerc","Modbus / SWord","modbus inner plates percentage value"
"MHR6","FLAGS =","MHR6_TempIn","Modbus / SWord","modbus temperature in"
"MHR7","FLAGS =","MHR7_TempOut","Modbus / SWord","modbus temperature out"
"MHR8","FLAGS =","MHR8_ReagntPerc","Modbus / SWord","modbus reagent percentage value"
"MHR9","FLAGS =","MHR9_Conduct","Modbus / SWord","modbus conductivity"
"MHR10","FLAGS = REST_READONLY","MHR10_OutPlatePe","","Outer plates percentage"
"MHR11","FLAGS = REST_READONLY","MHR11_InPlatePer","","Outer plates percentage"
"MHR101","FLAGS = REST_READONLY","MHR101_Status","","Status of the StateMachine"
"MHR201","FLAGS =","RoutineID","Modbus / SWord","ID of the routine being triggered (Flush, etc.)"
"MHR202","FLAGS =","RoutineStepNum","","Current step of the routine running"
"A0","FLAGS =","ANoAlarm","Alarm / Bit","No Alarm"
"A1","FLAGS =","AORPRange","Alarm / Bit","ORP Range - ORP is out of range"
"A2","FLAGS =","ApHRange","Alarm / Bit","pH Range - PH is out of range"
"A3","FLAGS =","ACondRange","Alarm / Bit","Conductivity Range - Conductivity is out of range"
"A4","FLAGS =","AFlowRange","Alarm / Bit","Flow Range - Flow rate is out of range"
"A5","FLAGS =","ATempAlarm","Alarm / Bit","Temperature Alarm - Temperature exceeds alarm level"
"A6","FLAGS =","AGenNotFull","Alarm / Bit","Generator Level - Generator flow cell is not filled"
"A7","FLAGS =","AGenEmpty","Alarm / Bit","Generator Level - Generator flow cell is empty"
"A8","FLAGS =","AAcidTankLow","Alarm / Bit","Acid Level - Acid tank is running low"
"A9","FLAGS =","AAcidTankEmpty","Alarm / Bit","Acid Level - Acid tank is empty"
"A10","FLAGS =","AVoltInfo","Alarm / Bit","Voltage Info - Voltage exceeds info level"
"A11","FLAGS =","AVoltAlarm","Alarm / Bit","Voltage Alarm - Voltage exceeds alarm level"
"A12","FLAGS =","AReagntOverFlow","Alarm / Bit","Reagent Level - Reagent tank reached overflow"
"A13","FLAGS =","AReagntEmpty","Alarm / Bit","Reagent Level - Reagent tank is empty"
"A14","FLAGS =","AErrorPLC","Alarm / Bit","PLC Error - PLC is experiencing errors"
"A15","FLAGS =","AOutPlatesInfo","Alarm / Bit","Media Info - Media near end-of-life"
"A16","FLAGS =","AOutPlatesNotice","Alarm / Bit","Media Alarm - Media at end-of-life"
"A17","FLAGS =","AORPRangeTO","Alarm / Bit","ORP Range - ORP is out of range and timed out"
"A18","FLAGS =","ApHRangeTO","Alarm / Bit","pH Range - PH is out of range and timed out"
"A19","FLAGS =","ACondRangeTO","Alarm / Bit","Conductivity Range - Conductivity is out of range and timed out"
"A20","FLAGS =","AFlowRangeTO","Alarm / Bit","Flow Range - Flow rate is out of range and timed out"
"A21","FLAGS =","ATempInfo","Alarm / Bit","Temperature Info - Temperature exceeds info level"
"A22","FLAGS =","AGenNotFullTO","Alarm / Bit","Generator Level - Generator flow cell has not filled and timed out"
"A23","FLAGS =","AGenEmptyTO","Alarm / Bit","Generator Level - Generator flow cell is empty and timed out"
"A24","FLAGS =","AModbusWrite","Alarm / Bit","Modbus Write - an error from writing Modbus"
"A25","FLAGS =","AModbusRead","Alarm / Bit","Modbus Read - an error from reading Modbus"
"A26","FLAGS =","ALoadWebPages","Alarm / Bit","Load Web Pages - an error occurred while refreshing web pages"
"A27","FLAGS =","AReagentTankFull","Notice","Notice - the reagent tank is full"
"A30","FLAGS = REST_READONLY","AInPlatesInfo","",""
"A31","FLAGS = REST_READONLY","AInPlatesNotice","",""
"A32","FLAGS = REST_READONLY","AStartupTimeoutE","",""
"A33","FLAGS = REST_READONLY","ABackwash","Info","Filters are backwashing"
"A34","FLAGS = REST_READONLY","ATooManyBWError","","Too many backwashes error"
"F0","FLAGS =","FAmperageOut","Original / Real","amperage out to galv in amps"
"F1","FLAGS =","FUltraDuration","Original / Real","ultrasonic duration off in seconds"
"F2","FLAGS =","FUltraInterval","Original / Real","ultrasonic interval on in seconds"
"F3","FLAGS =","FPolarityCycle","Original / Real","polarity cycle time in seconds"
"F4","FLAGS =","FErrorDebounOn","Original / Real","error debounce on in milliseconds"
"F5","FLAGS =","FInfoDebounOn","Original / Real","info debounce on in milliseconds"
"F6","FLAGS =","FInfoDebounOff","Original / Real","info debounce off in milliseconds"
"F7","FLAGS =","FWarnDebounOn","Original / Real","warning debounce on in milliseconds"
"F8","FLAGS =","FWarnDebounOff","Original / Real","warning debounce off in milliseconds"
"F9","FLAGS =","FErrorDebounOff","Original / Real","error debounce off in milliseconds"
"F10","FLAGS =","FpHTarget","Original / Real","target value for pH level in acid pump PID"
"F11","FLAGS =","FTankHeight","Original / Real","reagent tank height in meters"
"F12","FLAGS =","FTankCrossSect","Original / Real","reagent tank cross sectional area in meters2"
"F13","FLAGS =","FTankCapacity","Original / Real","reagent tank capacity in meters3"
"F14","FLAGS =","FCondTarget","Original / Real","target value for conductivity level"
"F15","FLAGS =","FFlowTarget","Original / Real","target flow value for proportional valve in lpm"
"F16","FLAGS =","FAmpSecFactor","Original / Real","factor used in calculating media percent"
"F17","FLAGS =","FAcidDutyDur","Original / Real","duratino time for acid pump duty cycle in msec"
"F18","FLAGS =","FTotalPlatesMass","","Total mass of the plates"
"F19","FLAGS =","FReagTankMaxPerc","","Percentage for which we consider the reagent tank to be full"
"F20","FLAGS =","FReagTankMinPerc","","Percentage for which we consider the reagent tank to be empty"
"F21","FLAGS = REST_READONLY","FReagTankHysPerc","","Percentage that acts as a limit when the device is restarted, to decide whether or not we generate"
"B0","FLAGS =","BNoAlarm","Bypass / Bit","enable/disable associated alarm: ANoAlarm"
"B1","FLAGS =","BORPRange","Bypass / Bit","enable/disable associated alarm: AORPRange"
"B2","FLAGS =","BpHRange","Bypass / Bit","enable/disable associated alarm: ApHRange"
"B3","FLAGS =","BCondRange","Bypass / Bit","enable/disable associated alarm: ACondRange"
"B4","FLAGS =","BFlowRange","Bypass / Bit","enable/disable associated alarm: AFlowRange"
"B5","FLAGS =","BTempAlarm","Bypass / Bit","enable/disable associated alarm: ATempAlarm"
"B6","FLAGS =","BGenNotFull","Bypass / Bit","enable/disable associated alarm: AGenNotFull"
"B7","FLAGS =","BGenEmpty","Bypass / Bit","enable/disable associated alarm: AGenEmpty"
"B8","FLAGS =","BAcidTankLow","Bypass / Bit","enable/disable associated alarm: AAcidTankLow"
"B9","FLAGS =","BAcidTankEmpty","Bypass / Bit","enable/disable associated alarm: AAcidTankEmpty"
"B10","FLAGS =","BVoltInfo","Bypass / Bit","enable/disable associated alarm: AVoltInfo"
"B11","FLAGS =","BVoltAlarm","Bypass / Bit","enable/disable associated alarm: AVoltAlarm"
"B12","FLAGS =","BReagntOverFlow","Bypass / Bit","enable/disable associated alarm: AReagntOverFlow"
"B13","FLAGS =","BReagntEmpty","Bypass / Bit","enable/disable associated alarm: AReagntEmpty"
"B14","FLAGS =","BErrorPLC","Bypass / Bit","enable/disable associated alarm: AErrorPLC"
"B15","FLAGS =","BOutPlatesInfo","Bypass / Bit","enable/disable associated alarm: AMediaInfo"
"B16","FLAGS =","BOutPlatesNotice","Bypass / Bit","enable/disable associated alarm: AMediaAlarm"
"B17","FLAGS =","BORPRangeTO","Bypass / Bit","enable/disable associated alarm: AORPRangeTO"
"B18","FLAGS =","BpHRangeTO","Bypass / Bit","enable/disable associated alarm: ApHRangeTO"
"B19","FLAGS =","BCondRangeTO","Bypass / Bit","enable/disable associated alarm: ACondRangeTO"
"B20","FLAGS =","BFlowRangeTO","Bypass / Bit","enable/disable associated alarm: AFlowRangeTO"
"B21","FLAGS =","BTempInfo","Bypass / Bit","enable/disable associated alarm: ATempInfo"
"B22","FLAGS =","BGenNotFullTO","Bypass / Bit","enable/disable associated alarm: AGenNotFullTO"
"B23","FLAGS =","BGenEmptyTO","Bypass / Bit","enable/disable associated alarm: AGenEmptyTO"
"B24","FLAGS =","BModbusWrite","Bypass / Bit","enable/disable associated alarm: AModbusWrite"
"B25","FLAGS =","BModbusRead","Bypass / Bit","enable/disable associated alarm: AModbusRead"
"B26","FLAGS =","BLoadWebPages","Bypass / Bit","enable/disable associated alarm: ALoadWebPages"
"B27","FLAGS =","BReagTankFull","","enable/disable for tank is full"
"B28","FLAGS =","BReagTankEmpty","",""
"B29","FLAGS = REST_READONLY","BReagTankOverHys","",""
"B30","FLAGS = REST_READONLY","BInPlatesInfo","",""
"B31","FLAGS = REST_READONLY","BInPlatesNotice","",""
"B32","FLAGS = REST_READONLY","BStartupTimeoutE","",""
"B33","FLAGS = REST_READONLY","BBackwash","","Enable bit for backwash alarm"
"B34","FLAGS = REST_READONLY","BTooManyBWError","",""
"TO0","FLAGS =","TOCondRange","Timeout / SDWord","conductivity timeout in seconds"
"TO1","FLAGS =","TOFlowRange","Timeout / SDWord","flow rate timeout in seconds"
"TO2","FLAGS =","TOGenEmpty","Timeout / SDWord","generator empty timeout in seconds"
"TO3","FLAGS =","TOGenNotFull","Timeout / SDWord","generator not filled timeout in seconds"
"TO4","FLAGS =","TOORPRange","Timeout / SDWord","orp range timeout in seconds"
"TO5","FLAGS =","TOpHRange","Timeout / SDWord","pH range timeout in seconds"
"TO6","FLAGS =","TOMediaAlarm","Timeout / SDWord","media timeout in seconds"
"TT0","FLAGS =","TTAmpHours","Totals / Real","accumulated Ah since last plate reset"
"TT1","FLAGS =","TTKWattHours","Totals / Real","accumulated KWh since last plate reset"
"TT3","FLAGS =","TTFlowVolume","Totals / Real","total flow volume since last plate reset"
"TT4","FLAGS =","TTAmpSeconds","Totals / Real","holding variable for amp seconds for percent subtraction"
"TT5","FLAGS =","TTGenRunTmeHrs","Totals / Real","accumulated run time in hours of generator"
"TT6","FLAGS =","TTGenRunTimeSec","Totals / Real","accumulated run time in seconds of generator"
"TT7","FLAGS =","TTReagntPercent","Totals / Real","reagent tank current volume in percentage"
"TT8","FLAGS = REST_READONLY","TTMassConsuOut","","Total media mass consumed of the outter plates"
"TT9","FLAGS = REST_READONLY","TTMediaPerOut","","percentage of outer plate media remaining since last plate reset"
"TT10","FLAGS = REST_READONLY","TTMasConsuIn","","Total media mass consumed of the inner plates"
"TT11","FLAGS = REST_READONLY","TTMediaPercIn","","Percentage left of the inner plates"
"W0","FLAGS =","WAmpFeedback","Raw/ Real","raw galvanostat amperage feedback value (see module/scale for ranges)"
"W1","FLAGS =","WConductivity","Raw/ Real","raw conductivity sensor value (see module/scale for ranges)"
"W2","FLAGS =","WORP","Raw/ Real","raw orp value (see module/scale for ranges)"
"W3","FLAGS =","WTempInlet","Raw/ Real","raw temperature inlet value (see module/scale for ranges)"
"W4","FLAGS =","WTempOutlet","Raw/ Real","raw temperature outlet value (see module/scale for ranges)"
"W5","FLAGS =","WFlowInRate","Raw/ Real","raw incoming rate value (see module/scale for ranges)"
"W6","FLAGS =","WpH","Raw/ Real","raw pH sensor value (see module/scale for ranges)"
"W7","FLAGS =","WVoltFeedback","Raw/ Real","raw galvanostat voltage feedback value (see module/scale for ranges)"
"W8","FLAGS =","WTankLevel","Raw/ Real","raw level sensor value (see module/scale for ranges)"
"SC0","FLAGS =","SCAmpFbInMin","Scale / Real","scales for amperage feedbacks"
"SC1","FLAGS =","SCAmpFbInMax","Scale / Real","scales for amperage feedbacks"
"SC2","FLAGS =","SCAmpFbOutMin","Scale / Real","scales for amperage feedbacks"
"SC3","FLAGS =","SCAmpFbOutMax","Scale / Real","scales for amperage feedbacks"
"SC4","FLAGS =","SCCondInMin","Scale / Real","scales for conductivity"
"SC5","FLAGS =","SCCondInMax","Scale / Real","scales for conductivity"
"SC6","FLAGS =","SCCondOutMin","Scale / Real","scales for conductivity"
"SC7","FLAGS =","SCCondOutMax","Scale / Real","scales for conductivity"
"SC8","FLAGS =","SCOrpInMin","Scale / Real","scales for orp"
"SC9","FLAGS =","SCOrpInMax","Scale / Real","scales for orp"
"SC10","FLAGS =","SCOrpOutMin","Scale / Real","scales for orp"
"SC11","FLAGS =","SCOrpOutMax","Scale / Real","scales for orp"
"SC12","FLAGS =","SCTempInInMin","Scale / Real","scales for temp in"
"SC13","FLAGS =","SCTempInInMax","Scale / Real","scales for temp in"
"SC14","FLAGS =","SCTempInOutMin","Scale / Real","scales for temp in"
"SC15","FLAGS =","SCTempInOutMax","Scale / Real","scales for temp in"
"SC16","FLAGS =","SCTempOutInMin","Scale / Real","scales for temp out"
"SC17","FLAGS =","SCTempOutInMax","Scale / Real","scales for temp out"
"SC18","FLAGS =","SCTempOutOutMin","Scale / Real","scales for temp out"
"SC19","FLAGS =","SCTempOutOutMax","Scale / Real","scales for temp out"
"SC20","FLAGS =","SCFlowInMin","Scale / Real","scales for flow in rate"
"SC21","FLAGS =","SCFlowInMax","Scale / Real","scales for flow in rate"
"SC22","FLAGS =","SCFlowOutMin","Scale / Real","scales for flow in rate"
"SC23","FLAGS =","SCFlowOutMax","Scale / Real","scales for flow in rate"
"SC24","FLAGS =","SCpHInMin","Scale / Real","scales for pH"
"SC25","FLAGS =","SCpHInMax","Scale / Real","scales for pH"
"SC26","FLAGS =","SCpHOutMin","Scale / Real","scales for pH"
"SC27","FLAGS =","SCpHOutMax","Scale / Real","scales for pH"
"SC28","FLAGS =","SCVoltFbInMin","Scale / Real","scales for voltage feedback"
"SC29","FLAGS =","SCVoltFbInMax","Scale / Real","scales for voltage feedback"
"SC30","FLAGS =","SCVoltFbOutMin","Scale / Real","scales for voltage feedback"
"SC31","FLAGS =","SCVoltFbOutMax","Scale / Real","scales for voltage feedback"
"SC32","FLAGS =","SCTankLvInMin","Scale / Real","scales for tank level"
"SC33","FLAGS =","SCTankLvInMax","Scale / Real","scales for tank level"
"SC34","FLAGS =","SCTankLvOutMin","Scale / Real","scales for tank level"
"SC35","FLAGS =","SCTankLvOutMax","Scale / Real","scales for tank level"
"SC36","FLAGS =","SCAmpOutInMin","Scale / Real","scales for amperage out"
"SC37","FLAGS =","SCAmpOutInMax","Scale / Real","scales for amperage out"
"SC38","FLAGS =","SCAmpOutOutMin","Scale / Real","scales for amperage out"
"SC39","FLAGS =","SCAmpOutOutMax","Scale / Real","scales for amperage out"
"SC40","FLAGS =","SCDrainRtInMin","Scale / Real","scales for drain pump rate"
"SC41","FLAGS =","SCDrainRtInMax","Scale / Real","scales for drain pump rate"
"SC42","FLAGS =","SCDrainRtOutMin","Scale / Real","scales for drain pump rate"
"SC43","FLAGS =","SCDrainRtOutMax","Scale / Real","scales for drain pump rate"
"SC44","FLAGS =","SCReagntRtInMin","Scale / Real","scales for ragent pump rate"
"SC45","FLAGS =","SCReagntRtInMax","Scale / Real","scales for ragent pump rate"
"SC46","FLAGS =","SCReagntRtOutMin","Scale / Real","scales for ragent pump rate"
"SC47","FLAGS =","SCReagntRtOutMax","Scale / Real","scales for ragent pump rate"
"SC48","FLAGS =","SCpHRawMin","Scale / Real","scales for PID acid pump pH"
"SC49","FLAGS =","SCpHRawMax","Scale / Real","scales for PID acid pump pH"
"SC50","FLAGS =","SCpHEngMin","Scale / Real","scales for PID acid pump pH"
"SC51","FLAGS =","SCpHEngMax","Scale / Real","scales for PID acid pump pH"
"SC52","FLAGS =","SCFlowRawMin","Scale / Real","scales for PID proportional valve flow rate in lpm"
"SC53","FLAGS =","SCFlowRawMax","Scale / Real","scales for PID proportional valve flow rate in lpm"
"SC54","FLAGS =","SCFlowEngMin","Scale / Real","scales for PID proportional valve flow rate in lpm"
"SC55","FLAGS =","SCFlowEngMax","Scale / Real","scales for PID proportional valve flow rate in lpm"
"SC56","FLAGS =","SCCondRawMin","Scale / Real","scales for PID conductivity acid flow rate in mS"
"SC57","FLAGS =","SCCondRawMax","Scale / Real","scales for PID conductivity acid flow rate in mS"
"SC58","FLAGS =","SCCondEngMin","Scale / Real","scales for PID conductivity acid flow rate in mS"
"SC59","FLAGS =","SCCondEngMax","Scale / Real","scales for PID conductivity acid flow rate in mS"
"SE0","FLAGS =","SEWebDirSuc","File / Bit","success of web directory creation"
"SE1","FLAGS =","SEWebDirErr","File / Bit","error of web directory creation"
"SE2","FLAGS =","SEWebFile1Suc","File / Bit","success of web copy file 1"
"SE3","FLAGS =","SEWebFile1Err","File / Bit","error of web copy file 1"
"SE4","FLAGS =","SEWebFile2Suc","File / Bit","success of web copy file 2"
"SE5","FLAGS =","SEWebFile2Err","File / Bit","error of web copy file 2"
"ProgInfo","FLAGS =","PInfo","Program Struct","program monitors conditions that may affect future operations"
"ProgErrors","FLAGS =","PErrors","Program Struct","program monitors conditions that may halt processing and require assistance"
"TaskUltrasonics","FLAGS =","TUltrasonics","Task Struct","task starts/stops ultrasonics for the generator flow cell"
"TaskPolarity","FLAGS =","TPolarity","Task Struct","task starts/stops polarity for the generator flow cell"
"ProgWarnings","FLAGS =","PWarnings","Program Struct","program monitors conditions that may pause generation but also may recover"
"TaskGalvanostat","FLAGS =","TGalvanostat","Task Struct","task starts/stops galvanostat for the generator flow cell"
"TaskAcidPumpPID","FLAGS =","TAcidPumpPID","Task Struct","task adjusts acid pump rate to meet target pH level using PID"
"AcidPumpCtlPID","FLAGS =","PIDAcidPumpCtl","PID","routine for acid pump"
"AcidPumpCtlPID.SP","FLAGS =","PIDAcidPumpCtl.S","PID","routine for acid pump set point"
"RS_0","FLAGS =","RSAcidPumpPID","RampSoak Struct","ramp soak structure for acid pump PID"
"TaskLoadWebPages","FLAGS =","TLoadWebPages","Task Struct","task refreshes web user pages from SD card to RAM"
"PropValveCtlPID","FLAGS =","PIDPropValveCtl","PID","routine for flow control with proportional valve"
"PropValveCtlPID.SP","FLAGS =","PIDPropValveCtl.","PID","routine for flow control with proportional valve"
"TaskPropValvePID","FLAGS =","TPropValvePID","Task Strut","task adjusts proportional valve to meet flow rate target level using PID"
"RS_1","FLAGS =","RSPropValvePID","RampSoak Struct","ramp soak structure for proportional valve PID"
"ConductvyCtlPID","FLAGS =","PIDConductvyCtl","PID","routine for conductivity to acid pump"
"ConductvyCtlPID.SP","FLAGS =","","PID","routine for conductivity to acid pump"
"TaskConductvyPID","FLAGS =","TConductvyPID","Task Struct","task adjusts acid pump rate to meet target conductivity level using PID"
"RS_2","FLAGS =","RSConductvyPID","RampSoak Struct","ramp soak structure for conductivity acid PID"
"SK1","FLAGS =","SM_Idle","4","system mode: idle"
"SK2","FLAGS =","SM_Running","3","system mode: running"
"SK3","FLAGS =","SM_Stopped","1","system mode: stopped"
"SK4","FLAGS =","SM_Halted","10","system mode: halted"
"SK5","FLAGS =","A_VoltAlarm","220","alarm code: AVoltAlarm"
"SK6","FLAGS =","A_CondRange","30","alarm code: ACondRange"
"SK7","FLAGS =","A_NoAlarm","0","alarm code: ANoAlarm"
"SK8","FLAGS =","A_ReagntOverFlow","190","alarm code: AReagntOverFlow"
"SK9","FLAGS =","A_GenEmpty","105",""
"SK10","FLAGS =","A_TempAlarm","200","alarm code: ATempAlarm"
"SK11","FLAGS =","A_FlowRange","60","alarm code: AFlowRange"
"SK12","FLAGS =","A_pHRange","160","alarm code: ApHRange"
"SK13","FLAGS =","A_ORPRange","140","alarm code: AORPRange"
"SK14","FLAGS =","A_GenNotFull","100","alarm code: AGenNoFull"
"SK15","FLAGS =","A_VoltInfo","230","alarm code: AVoltInfo"
"SK16","FLAGS =","A_AcidTankEmpty","10","alarm code:AAcidTankEmpty"
"SK17","FLAGS =","A_AcidTankLow","20","alarm code: AAcidTankLow"
"SK18","FLAGS =","A_GenEmptyTO","115",""
"SK19","FLAGS =","A_Backwash","300",""
"SK20","FLAGS =","A_InPlatesInfo","270",""
"SK21","FLAGS =","A_OutPlatesInfo","130","alarm code: AMediaInfo"
"SK22","FLAGS =","A_OutPlatesAlarm","120","alarm code: AMediaAlarm"
"SK23","FLAGS =","A_ORPRangeTO","150","alarm code: AORPRangeTO"
"SK24","FLAGS =","A_pHRangeTO","170","alarm code: ApHRangeTO"
"SK25","FLAGS =","A_CondRangeTO","40","alarm code: ACondRangeTO"
"SK26","FLAGS =","A_FlowRangeTO","70","alarm code: AFlowRangeTO"
"SK27","FLAGS =","A_TempInfo","210","alarm code: ATempInfo"
"SK28","FLAGS =","A_GenNotFullTO","110","alarm code: AGenNotFullTO"
"SK29","FLAGS =","N_InPlates","275",""
"SK30","FLAGS =","N_OutPlates","280",""
"SK31","FLAGS =","A_LoadWebPages","122","alarm code: ALoadWebPages"
"SK32","FLAGS =","N_ReagTankFull","240",""
"SK33","FLAGS =","N_ReagTankEmpty","250",""
"SK34","FLAGS =","SM_Standby","5","system mode: standby"
"SK35","FLAGS =","SM_Starting","2",""
"SK36","FLAGS =","SM_Stopping","6",""
"SK37","FLAGS =","SM_RemoteDisable","7",""
"SK38","FLAGS =","A_StartupTimeout","290",""
"SK39","FLAGS =","A_TooManyBW","310","Error: Too many backwashes"
"US0","FLAGS =","_TRinsing","Task Struct","TRinsing","TaskRinsing","t"
#END

